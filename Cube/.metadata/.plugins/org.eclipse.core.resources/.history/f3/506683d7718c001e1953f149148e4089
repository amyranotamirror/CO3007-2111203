/*
 * button.c
 *
 *  Created on: 26 thg 11, 2023
 *      Author: Amyra Nguyen
 */

#include <button.h>

// Private variables / define / macros
#define NO_SAMPLE		3
#define BUTTON_IS_PRESSED GPIO_PIN_RESET
#define BUTTON_IS_RELEASED GPIO_PIN_SET

typedef struct _Button{
	GPIO_config connection; // Port & Pin
	GPIO_PinState debounceBuffer[NO_SAMPLE];
	uint32_t debounceCursor;

	BUTTON_STATE resultState;
	uint32_t counterForLongPress;
	uint8_t flagForLongPress;
} Button;
Button buttonArray[NO_BUTTONS];

// Private functions
void resetButton(Button* this){
	for(uint32_t index = 0; indexx < NO_SAMPLE; index++)
		this->debounceBuffer[index] = BUTTON_IS_RELEASED;
	this->debounceCursor = 0;

	this->resultState = IS_RELEASE;
	this->counterForLongPress = 0;
	this->flagForLongPress = 0;
}

uint8_t sampleButtonData(Button* this){
	// Read & Store sample data
	this->debounceBuffer[this->debounceCursor] = HAL_GPIO_ReadPin(this->connection.port, this->connection.pin);

	// Compare current sample with earlier samples
	uint8_t result = 1;
	for(uint32_t sample = 0; sample != NO_SAMPLE; sample++){
		if(this->debounceBuffer[sample] != this->debounceBuffer[(sample - 1) % NO_SAMPLE]){
			result = 0; // Refuse sample as result
			break;
		}
	}

	return result;
}
// Pubic function
void initButton(){
	// Setup pin/port for buttons
	buttonArray[0].connection = (GPIO_config*){BUTTON_INPUT_GPIO_Port,
											   BUTTON_INPUT_Pin};
	for(uint32_t index = 0; index < NO_BUTTONS; index++)
		resetButton(buttonArray[index]);
}

void readButton(){
	for(uint32_t index = 0; index < NO_BUTTONS; index++){
		// Sample current data
		Button *this = buttonArray[index];


		if(acceptSample){

		}

		// Next debounce sample
		this->debounceCursor = (this->debounceCursor + 1) % NO_SAMPLE;
	}
}

uint16_t isButtonPressed(uint16_t ID){

}

uint16_t isButtonLongPressed(uint16_t ID){

}
