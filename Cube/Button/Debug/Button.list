
Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002700  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800280c  0800280c  0001280c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002898  08002898  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08002898  08002898  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002898  08002898  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002898  08002898  00012898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800289c  0800289c  0001289c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080028a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000003c  080028dc  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080028dc  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ea9  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d57  00000000  00000000  00029f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002bc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002c6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d4d  00000000  00000000  0002d010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d152  00000000  00000000  00043d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000827be  00000000  00000000  00050eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d366d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002928  00000000  00000000  000d36c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	080027f4 	.word	0x080027f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	080027f4 	.word	0x080027f4

0800014c <init_button>:
/* Private variables declaration */
static GPIO_PinState debounceBuffer[NUM_DEBOUNCE][NUM_BUTTON];
button buttons[NUM_BUTTON];

/* Public function  */
void init_button(){
 800014c:	b480      	push	{r7}
 800014e:	b089      	sub	sp, #36	; 0x24
 8000150:	af00      	add	r7, sp, #0
	// Calculate value for button sampling, auto increase

	// Set physical port and pin
	buttons[0].physical = (GPIO_config){BUTTON_1_GPIO_Port, BUTTON_1_Pin};
 8000152:	4b25      	ldr	r3, [pc, #148]	; (80001e8 <init_button+0x9c>)
 8000154:	4a25      	ldr	r2, [pc, #148]	; (80001ec <init_button+0xa0>)
 8000156:	e892 0003 	ldmia.w	r2, {r0, r1}
 800015a:	e883 0003 	stmia.w	r3, {r0, r1}
	buttons[1].physical = (GPIO_config){BUTTON_2_GPIO_Port, BUTTON_2_Pin};
 800015e:	4b22      	ldr	r3, [pc, #136]	; (80001e8 <init_button+0x9c>)
 8000160:	4a23      	ldr	r2, [pc, #140]	; (80001f0 <init_button+0xa4>)
 8000162:	3318      	adds	r3, #24
 8000164:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000168:	e883 0003 	stmia.w	r3, {r0, r1}
	buttons[2].physical = (GPIO_config){BUTTON_3_GPIO_Port, BUTTON_3_Pin};
 800016c:	4b1e      	ldr	r3, [pc, #120]	; (80001e8 <init_button+0x9c>)
 800016e:	4a21      	ldr	r2, [pc, #132]	; (80001f4 <init_button+0xa8>)
 8000170:	3330      	adds	r3, #48	; 0x30
 8000172:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000176:	e883 0003 	stmia.w	r3, {r0, r1}

	// Set button initial state
	for(uint16_t index = 0; index < NUM_BUTTON; index++){
 800017a:	2300      	movs	r3, #0
 800017c:	83fb      	strh	r3, [r7, #30]
 800017e:	e02a      	b.n	80001d6 <init_button+0x8a>
		buttons[index].state = BUTTON_IS_RELEASED;
 8000180:	8bfa      	ldrh	r2, [r7, #30]
 8000182:	4919      	ldr	r1, [pc, #100]	; (80001e8 <init_button+0x9c>)
 8000184:	4613      	mov	r3, r2
 8000186:	005b      	lsls	r3, r3, #1
 8000188:	4413      	add	r3, r2
 800018a:	00db      	lsls	r3, r3, #3
 800018c:	440b      	add	r3, r1
 800018e:	3308      	adds	r3, #8
 8000190:	2201      	movs	r2, #1
 8000192:	701a      	strb	r2, [r3, #0]
		buttons[index].counterForLongPress = 0;
 8000194:	8bfa      	ldrh	r2, [r7, #30]
 8000196:	4914      	ldr	r1, [pc, #80]	; (80001e8 <init_button+0x9c>)
 8000198:	4613      	mov	r3, r2
 800019a:	005b      	lsls	r3, r3, #1
 800019c:	4413      	add	r3, r2
 800019e:	00db      	lsls	r3, r3, #3
 80001a0:	440b      	add	r3, r1
 80001a2:	3310      	adds	r3, #16
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
		buttons[index].flagForLongPress = TURN_OFF;
 80001a8:	8bfa      	ldrh	r2, [r7, #30]
 80001aa:	490f      	ldr	r1, [pc, #60]	; (80001e8 <init_button+0x9c>)
 80001ac:	4613      	mov	r3, r2
 80001ae:	005b      	lsls	r3, r3, #1
 80001b0:	4413      	add	r3, r2
 80001b2:	00db      	lsls	r3, r3, #3
 80001b4:	440b      	add	r3, r1
 80001b6:	3315      	adds	r3, #21
 80001b8:	2201      	movs	r2, #1
 80001ba:	701a      	strb	r2, [r3, #0]
		buttons[index].flagToResponse = TURN_OFF;
 80001bc:	8bfa      	ldrh	r2, [r7, #30]
 80001be:	490a      	ldr	r1, [pc, #40]	; (80001e8 <init_button+0x9c>)
 80001c0:	4613      	mov	r3, r2
 80001c2:	005b      	lsls	r3, r3, #1
 80001c4:	4413      	add	r3, r2
 80001c6:	00db      	lsls	r3, r3, #3
 80001c8:	440b      	add	r3, r1
 80001ca:	3314      	adds	r3, #20
 80001cc:	2201      	movs	r2, #1
 80001ce:	701a      	strb	r2, [r3, #0]
	for(uint16_t index = 0; index < NUM_BUTTON; index++){
 80001d0:	8bfb      	ldrh	r3, [r7, #30]
 80001d2:	3301      	adds	r3, #1
 80001d4:	83fb      	strh	r3, [r7, #30]
 80001d6:	8bfb      	ldrh	r3, [r7, #30]
 80001d8:	2b02      	cmp	r3, #2
 80001da:	d9d1      	bls.n	8000180 <init_button+0x34>
	}
}
 80001dc:	bf00      	nop
 80001de:	bf00      	nop
 80001e0:	3724      	adds	r7, #36	; 0x24
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	0800280c 	.word	0x0800280c
 80001f0:	08002814 	.word	0x08002814
 80001f4:	0800281c 	.word	0x0800281c

080001f8 <button_reading>:

void button_reading(){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
	/* Trigger: Button sampling with timer interrupt, flag raised */
	for(int index = 0; index < NUM_BUTTON; index++){
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e0ed      	b.n	80003e0 <button_reading+0x1e8>
		// Shift buffer & Read pin
		debounceBuffer[2][index] = debounceBuffer[1][index];
 8000204:	4a7b      	ldr	r2, [pc, #492]	; (80003f4 <button_reading+0x1fc>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4413      	add	r3, r2
 800020a:	3303      	adds	r3, #3
 800020c:	7819      	ldrb	r1, [r3, #0]
 800020e:	4a79      	ldr	r2, [pc, #484]	; (80003f4 <button_reading+0x1fc>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4413      	add	r3, r2
 8000214:	3306      	adds	r3, #6
 8000216:	460a      	mov	r2, r1
 8000218:	701a      	strb	r2, [r3, #0]
		debounceBuffer[1][index] = debounceBuffer[0][index];
 800021a:	4a76      	ldr	r2, [pc, #472]	; (80003f4 <button_reading+0x1fc>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4413      	add	r3, r2
 8000220:	7819      	ldrb	r1, [r3, #0]
 8000222:	4a74      	ldr	r2, [pc, #464]	; (80003f4 <button_reading+0x1fc>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	4413      	add	r3, r2
 8000228:	3303      	adds	r3, #3
 800022a:	460a      	mov	r2, r1
 800022c:	701a      	strb	r2, [r3, #0]
		debounceBuffer[0][index] = HAL_GPIO_ReadPin(
 800022e:	4972      	ldr	r1, [pc, #456]	; (80003f8 <button_reading+0x200>)
 8000230:	687a      	ldr	r2, [r7, #4]
 8000232:	4613      	mov	r3, r2
 8000234:	005b      	lsls	r3, r3, #1
 8000236:	4413      	add	r3, r2
 8000238:	00db      	lsls	r3, r3, #3
 800023a:	440b      	add	r3, r1
 800023c:	6818      	ldr	r0, [r3, #0]
 800023e:	496e      	ldr	r1, [pc, #440]	; (80003f8 <button_reading+0x200>)
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	4613      	mov	r3, r2
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	4413      	add	r3, r2
 8000248:	00db      	lsls	r3, r3, #3
 800024a:	440b      	add	r3, r1
 800024c:	3304      	adds	r3, #4
 800024e:	881b      	ldrh	r3, [r3, #0]
 8000250:	4619      	mov	r1, r3
 8000252:	f001 faaf 	bl	80017b4 <HAL_GPIO_ReadPin>
 8000256:	4603      	mov	r3, r0
 8000258:	4619      	mov	r1, r3
 800025a:	4a66      	ldr	r2, [pc, #408]	; (80003f4 <button_reading+0x1fc>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	4413      	add	r3, r2
 8000260:	460a      	mov	r2, r1
 8000262:	701a      	strb	r2, [r3, #0]
				buttons[index].physical.port, buttons[index].physical.pin);

		// Filter 3 most recent data
		if ((debounceBuffer[0][index] == debounceBuffer[1][index])
 8000264:	4a63      	ldr	r2, [pc, #396]	; (80003f4 <button_reading+0x1fc>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4413      	add	r3, r2
 800026a:	781a      	ldrb	r2, [r3, #0]
 800026c:	4961      	ldr	r1, [pc, #388]	; (80003f4 <button_reading+0x1fc>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	440b      	add	r3, r1
 8000272:	3303      	adds	r3, #3
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	429a      	cmp	r2, r3
 8000278:	f040 80af 	bne.w	80003da <button_reading+0x1e2>
				&& (debounceBuffer[0][index] == debounceBuffer[2][index])) {
 800027c:	4a5d      	ldr	r2, [pc, #372]	; (80003f4 <button_reading+0x1fc>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4413      	add	r3, r2
 8000282:	781a      	ldrb	r2, [r3, #0]
 8000284:	495b      	ldr	r1, [pc, #364]	; (80003f4 <button_reading+0x1fc>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	440b      	add	r3, r1
 800028a:	3306      	adds	r3, #6
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	429a      	cmp	r2, r3
 8000290:	f040 80a3 	bne.w	80003da <button_reading+0x1e2>

			// Detect a press/release
			if(buttons[index].state != debounceBuffer[0][index]){
 8000294:	4958      	ldr	r1, [pc, #352]	; (80003f8 <button_reading+0x200>)
 8000296:	687a      	ldr	r2, [r7, #4]
 8000298:	4613      	mov	r3, r2
 800029a:	005b      	lsls	r3, r3, #1
 800029c:	4413      	add	r3, r2
 800029e:	00db      	lsls	r3, r3, #3
 80002a0:	440b      	add	r3, r1
 80002a2:	3308      	adds	r3, #8
 80002a4:	781a      	ldrb	r2, [r3, #0]
 80002a6:	4953      	ldr	r1, [pc, #332]	; (80003f4 <button_reading+0x1fc>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	440b      	add	r3, r1
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d04c      	beq.n	800034c <button_reading+0x154>
				buttons[index].state = debounceBuffer[0][index];
 80002b2:	4a50      	ldr	r2, [pc, #320]	; (80003f4 <button_reading+0x1fc>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4413      	add	r3, r2
 80002b8:	7818      	ldrb	r0, [r3, #0]
 80002ba:	494f      	ldr	r1, [pc, #316]	; (80003f8 <button_reading+0x200>)
 80002bc:	687a      	ldr	r2, [r7, #4]
 80002be:	4613      	mov	r3, r2
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	4413      	add	r3, r2
 80002c4:	00db      	lsls	r3, r3, #3
 80002c6:	440b      	add	r3, r1
 80002c8:	3308      	adds	r3, #8
 80002ca:	4602      	mov	r2, r0
 80002cc:	701a      	strb	r2, [r3, #0]

				// Detect press: Delay & Response first time
				if(buttons[index].state == BUTTON_IS_PRESSED){
 80002ce:	494a      	ldr	r1, [pc, #296]	; (80003f8 <button_reading+0x200>)
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	4613      	mov	r3, r2
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	4413      	add	r3, r2
 80002d8:	00db      	lsls	r3, r3, #3
 80002da:	440b      	add	r3, r1
 80002dc:	3308      	adds	r3, #8
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d113      	bne.n	800030c <button_reading+0x114>
					// Count down for delay before long press
					buttons[index].counterForLongPress
					= DELAY_BEFORE_LONG_PRESS_MS / INTERRUPT_DURATION_MS;
 80002e4:	4944      	ldr	r1, [pc, #272]	; (80003f8 <button_reading+0x200>)
 80002e6:	687a      	ldr	r2, [r7, #4]
 80002e8:	4613      	mov	r3, r2
 80002ea:	005b      	lsls	r3, r3, #1
 80002ec:	4413      	add	r3, r2
 80002ee:	00db      	lsls	r3, r3, #3
 80002f0:	440b      	add	r3, r1
 80002f2:	3310      	adds	r3, #16
 80002f4:	2232      	movs	r2, #50	; 0x32
 80002f6:	601a      	str	r2, [r3, #0]
					buttons[index].flagToResponse = TURN_ON;
 80002f8:	493f      	ldr	r1, [pc, #252]	; (80003f8 <button_reading+0x200>)
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	4613      	mov	r3, r2
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	4413      	add	r3, r2
 8000302:	00db      	lsls	r3, r3, #3
 8000304:	440b      	add	r3, r1
 8000306:	3314      	adds	r3, #20
 8000308:	2200      	movs	r2, #0
 800030a:	701a      	strb	r2, [r3, #0]
				}

				// Detect release: Reset state
				if(buttons[index].state == BUTTON_IS_RELEASED){
 800030c:	493a      	ldr	r1, [pc, #232]	; (80003f8 <button_reading+0x200>)
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	4613      	mov	r3, r2
 8000312:	005b      	lsls	r3, r3, #1
 8000314:	4413      	add	r3, r2
 8000316:	00db      	lsls	r3, r3, #3
 8000318:	440b      	add	r3, r1
 800031a:	3308      	adds	r3, #8
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d15b      	bne.n	80003da <button_reading+0x1e2>
					buttons[index].counterForLongPress = 0;
 8000322:	4935      	ldr	r1, [pc, #212]	; (80003f8 <button_reading+0x200>)
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	4613      	mov	r3, r2
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	4413      	add	r3, r2
 800032c:	00db      	lsls	r3, r3, #3
 800032e:	440b      	add	r3, r1
 8000330:	3310      	adds	r3, #16
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
					buttons[index].flagForLongPress = TURN_OFF;
 8000336:	4930      	ldr	r1, [pc, #192]	; (80003f8 <button_reading+0x200>)
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	4613      	mov	r3, r2
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	4413      	add	r3, r2
 8000340:	00db      	lsls	r3, r3, #3
 8000342:	440b      	add	r3, r1
 8000344:	3315      	adds	r3, #21
 8000346:	2201      	movs	r2, #1
 8000348:	701a      	strb	r2, [r3, #0]
 800034a:	e046      	b.n	80003da <button_reading+0x1e2>
				}
			}
			else{
				if(buttons[index].state == BUTTON_IS_PRESSED){
 800034c:	492a      	ldr	r1, [pc, #168]	; (80003f8 <button_reading+0x200>)
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	4613      	mov	r3, r2
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	4413      	add	r3, r2
 8000356:	00db      	lsls	r3, r3, #3
 8000358:	440b      	add	r3, r1
 800035a:	3308      	adds	r3, #8
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d13b      	bne.n	80003da <button_reading+0x1e2>
					buttons[index].counterForLongPress--;
 8000362:	4925      	ldr	r1, [pc, #148]	; (80003f8 <button_reading+0x200>)
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	4613      	mov	r3, r2
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	4413      	add	r3, r2
 800036c:	00db      	lsls	r3, r3, #3
 800036e:	440b      	add	r3, r1
 8000370:	3310      	adds	r3, #16
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	1e59      	subs	r1, r3, #1
 8000376:	4820      	ldr	r0, [pc, #128]	; (80003f8 <button_reading+0x200>)
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	4613      	mov	r3, r2
 800037c:	005b      	lsls	r3, r3, #1
 800037e:	4413      	add	r3, r2
 8000380:	00db      	lsls	r3, r3, #3
 8000382:	4403      	add	r3, r0
 8000384:	3310      	adds	r3, #16
 8000386:	6019      	str	r1, [r3, #0]
					//Start auto-increase at certain rate
					if(buttons[index].counterForLongPress <= 0){
 8000388:	491b      	ldr	r1, [pc, #108]	; (80003f8 <button_reading+0x200>)
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	4613      	mov	r3, r2
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	4413      	add	r3, r2
 8000392:	00db      	lsls	r3, r3, #3
 8000394:	440b      	add	r3, r1
 8000396:	3310      	adds	r3, #16
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	dc1d      	bgt.n	80003da <button_reading+0x1e2>
						buttons[index].flagForLongPress = TURN_ON;
 800039e:	4916      	ldr	r1, [pc, #88]	; (80003f8 <button_reading+0x200>)
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	4613      	mov	r3, r2
 80003a4:	005b      	lsls	r3, r3, #1
 80003a6:	4413      	add	r3, r2
 80003a8:	00db      	lsls	r3, r3, #3
 80003aa:	440b      	add	r3, r1
 80003ac:	3315      	adds	r3, #21
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]
						buttons[index].flagToResponse = TURN_ON;
 80003b2:	4911      	ldr	r1, [pc, #68]	; (80003f8 <button_reading+0x200>)
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	4613      	mov	r3, r2
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	4413      	add	r3, r2
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	440b      	add	r3, r1
 80003c0:	3314      	adds	r3, #20
 80003c2:	2200      	movs	r2, #0
 80003c4:	701a      	strb	r2, [r3, #0]
						buttons[index].counterForLongPress
						= DURATION_FOR_AUTO_INCREASE_MS / INTERRUPT_DURATION_MS;
 80003c6:	490c      	ldr	r1, [pc, #48]	; (80003f8 <button_reading+0x200>)
 80003c8:	687a      	ldr	r2, [r7, #4]
 80003ca:	4613      	mov	r3, r2
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	4413      	add	r3, r2
 80003d0:	00db      	lsls	r3, r3, #3
 80003d2:	440b      	add	r3, r1
 80003d4:	3310      	adds	r3, #16
 80003d6:	2203      	movs	r2, #3
 80003d8:	601a      	str	r2, [r3, #0]
	for(int index = 0; index < NUM_BUTTON; index++){
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	3301      	adds	r3, #1
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2b02      	cmp	r3, #2
 80003e4:	f77f af0e 	ble.w	8000204 <button_reading+0xc>
					}
				}
			}
		}
	}
}
 80003e8:	bf00      	nop
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000058 	.word	0x20000058
 80003f8:	2000009c 	.word	0x2000009c

080003fc <is_button_long_pressed>:
unsigned char is_button_pressed(uint16_t index){
	if(index >= NUM_BUTTON) return 0;
	return (buttons[index].state == BUTTON_IS_PRESSED);
}

unsigned char is_button_long_pressed(uint16_t index){
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	80fb      	strh	r3, [r7, #6]
	if(index >= NUM_BUTTON) return 0;
 8000406:	88fb      	ldrh	r3, [r7, #6]
 8000408:	2b02      	cmp	r3, #2
 800040a:	d901      	bls.n	8000410 <is_button_long_pressed+0x14>
 800040c:	2300      	movs	r3, #0
 800040e:	e00d      	b.n	800042c <is_button_long_pressed+0x30>
	return (buttons[index].flagForLongPress == TURN_ON);
 8000410:	88fa      	ldrh	r2, [r7, #6]
 8000412:	4909      	ldr	r1, [pc, #36]	; (8000438 <is_button_long_pressed+0x3c>)
 8000414:	4613      	mov	r3, r2
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	4413      	add	r3, r2
 800041a:	00db      	lsls	r3, r3, #3
 800041c:	440b      	add	r3, r1
 800041e:	3315      	adds	r3, #21
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b00      	cmp	r3, #0
 8000424:	bf0c      	ite	eq
 8000426:	2301      	moveq	r3, #1
 8000428:	2300      	movne	r3, #0
 800042a:	b2db      	uxtb	r3, r3
}
 800042c:	4618      	mov	r0, r3
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	2000009c 	.word	0x2000009c

0800043c <is_button_response_needed>:

unsigned char is_button_response_needed(uint16_t index){
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	80fb      	strh	r3, [r7, #6]
	if(index >= NUM_BUTTON) return 0;
 8000446:	88fb      	ldrh	r3, [r7, #6]
 8000448:	2b02      	cmp	r3, #2
 800044a:	d901      	bls.n	8000450 <is_button_response_needed+0x14>
 800044c:	2300      	movs	r3, #0
 800044e:	e00d      	b.n	800046c <is_button_response_needed+0x30>
	return (buttons[index].flagToResponse == TURN_ON);
 8000450:	88fa      	ldrh	r2, [r7, #6]
 8000452:	4909      	ldr	r1, [pc, #36]	; (8000478 <is_button_response_needed+0x3c>)
 8000454:	4613      	mov	r3, r2
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	4413      	add	r3, r2
 800045a:	00db      	lsls	r3, r3, #3
 800045c:	440b      	add	r3, r1
 800045e:	3314      	adds	r3, #20
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b00      	cmp	r3, #0
 8000464:	bf0c      	ite	eq
 8000466:	2301      	moveq	r3, #1
 8000468:	2300      	movne	r3, #0
 800046a:	b2db      	uxtb	r3, r3
}
 800046c:	4618      	mov	r0, r3
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	2000009c 	.word	0x2000009c

0800047c <finish_to_respond>:

void finish_to_respond(uint16_t index){
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	80fb      	strh	r3, [r7, #6]
	buttons[index].flagToResponse = TURN_OFF;
 8000486:	88fa      	ldrh	r2, [r7, #6]
 8000488:	4906      	ldr	r1, [pc, #24]	; (80004a4 <finish_to_respond+0x28>)
 800048a:	4613      	mov	r3, r2
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	4413      	add	r3, r2
 8000490:	00db      	lsls	r3, r3, #3
 8000492:	440b      	add	r3, r1
 8000494:	3314      	adds	r3, #20
 8000496:	2201      	movs	r2, #1
 8000498:	701a      	strb	r2, [r3, #0]
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	2000009c 	.word	0x2000009c

080004a8 <turn_all_led_indicator_off>:
/* Private variables declaration */
GPIO_config ledIndicatorPhysical[NUM_SIDE][NUM_COLOR];
uint8_t toggleState = TURN_OFF;

/* Private function  */
void turn_all_led_indicator_off(){
 80004a8:	b590      	push	{r4, r7, lr}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
	for(uint16_t side = 0; side < NUM_SIDE; side++){
 80004ae:	2300      	movs	r3, #0
 80004b0:	80fb      	strh	r3, [r7, #6]
 80004b2:	e022      	b.n	80004fa <turn_all_led_indicator_off+0x52>
		for(uint16_t color = 0; color < NUM_COLOR; color++){
 80004b4:	2300      	movs	r3, #0
 80004b6:	80bb      	strh	r3, [r7, #4]
 80004b8:	e019      	b.n	80004ee <turn_all_led_indicator_off+0x46>
			HAL_GPIO_WritePin(ledIndicatorPhysical[side][color].port, ledIndicatorPhysical[side][color].pin, TURN_OFF);
 80004ba:	88fa      	ldrh	r2, [r7, #6]
 80004bc:	88b9      	ldrh	r1, [r7, #4]
 80004be:	4813      	ldr	r0, [pc, #76]	; (800050c <turn_all_led_indicator_off+0x64>)
 80004c0:	4613      	mov	r3, r2
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	4413      	add	r3, r2
 80004c6:	440b      	add	r3, r1
 80004c8:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 80004cc:	88fa      	ldrh	r2, [r7, #6]
 80004ce:	88b9      	ldrh	r1, [r7, #4]
 80004d0:	4c0e      	ldr	r4, [pc, #56]	; (800050c <turn_all_led_indicator_off+0x64>)
 80004d2:	4613      	mov	r3, r2
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	4413      	add	r3, r2
 80004d8:	440b      	add	r3, r1
 80004da:	00db      	lsls	r3, r3, #3
 80004dc:	4423      	add	r3, r4
 80004de:	889b      	ldrh	r3, [r3, #4]
 80004e0:	2201      	movs	r2, #1
 80004e2:	4619      	mov	r1, r3
 80004e4:	f001 f97d 	bl	80017e2 <HAL_GPIO_WritePin>
		for(uint16_t color = 0; color < NUM_COLOR; color++){
 80004e8:	88bb      	ldrh	r3, [r7, #4]
 80004ea:	3301      	adds	r3, #1
 80004ec:	80bb      	strh	r3, [r7, #4]
 80004ee:	88bb      	ldrh	r3, [r7, #4]
 80004f0:	2b02      	cmp	r3, #2
 80004f2:	d9e2      	bls.n	80004ba <turn_all_led_indicator_off+0x12>
	for(uint16_t side = 0; side < NUM_SIDE; side++){
 80004f4:	88fb      	ldrh	r3, [r7, #6]
 80004f6:	3301      	adds	r3, #1
 80004f8:	80fb      	strh	r3, [r7, #6]
 80004fa:	88fb      	ldrh	r3, [r7, #6]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d9d9      	bls.n	80004b4 <turn_all_led_indicator_off+0xc>
		}
	}
}
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bd90      	pop	{r4, r7, pc}
 800050a:	bf00      	nop
 800050c:	200000e4 	.word	0x200000e4

08000510 <turn_all_led_indicator_on>:
void turn_all_led_indicator_on(){
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
	for(uint16_t side = 0; side < NUM_SIDE; side++){
 8000516:	2300      	movs	r3, #0
 8000518:	80fb      	strh	r3, [r7, #6]
 800051a:	e022      	b.n	8000562 <turn_all_led_indicator_on+0x52>
		for(uint16_t color = 0; color < NUM_COLOR; color++){
 800051c:	2300      	movs	r3, #0
 800051e:	80bb      	strh	r3, [r7, #4]
 8000520:	e019      	b.n	8000556 <turn_all_led_indicator_on+0x46>
			HAL_GPIO_WritePin(ledIndicatorPhysical[side][color].port, ledIndicatorPhysical[side][color].pin, TURN_ON);
 8000522:	88fa      	ldrh	r2, [r7, #6]
 8000524:	88b9      	ldrh	r1, [r7, #4]
 8000526:	4813      	ldr	r0, [pc, #76]	; (8000574 <turn_all_led_indicator_on+0x64>)
 8000528:	4613      	mov	r3, r2
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	4413      	add	r3, r2
 800052e:	440b      	add	r3, r1
 8000530:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 8000534:	88fa      	ldrh	r2, [r7, #6]
 8000536:	88b9      	ldrh	r1, [r7, #4]
 8000538:	4c0e      	ldr	r4, [pc, #56]	; (8000574 <turn_all_led_indicator_on+0x64>)
 800053a:	4613      	mov	r3, r2
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	4413      	add	r3, r2
 8000540:	440b      	add	r3, r1
 8000542:	00db      	lsls	r3, r3, #3
 8000544:	4423      	add	r3, r4
 8000546:	889b      	ldrh	r3, [r3, #4]
 8000548:	2200      	movs	r2, #0
 800054a:	4619      	mov	r1, r3
 800054c:	f001 f949 	bl	80017e2 <HAL_GPIO_WritePin>
		for(uint16_t color = 0; color < NUM_COLOR; color++){
 8000550:	88bb      	ldrh	r3, [r7, #4]
 8000552:	3301      	adds	r3, #1
 8000554:	80bb      	strh	r3, [r7, #4]
 8000556:	88bb      	ldrh	r3, [r7, #4]
 8000558:	2b02      	cmp	r3, #2
 800055a:	d9e2      	bls.n	8000522 <turn_all_led_indicator_on+0x12>
	for(uint16_t side = 0; side < NUM_SIDE; side++){
 800055c:	88fb      	ldrh	r3, [r7, #6]
 800055e:	3301      	adds	r3, #1
 8000560:	80fb      	strh	r3, [r7, #6]
 8000562:	88fb      	ldrh	r3, [r7, #6]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d9d9      	bls.n	800051c <turn_all_led_indicator_on+0xc>
		}
	}
}
 8000568:	bf00      	nop
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bd90      	pop	{r4, r7, pc}
 8000572:	bf00      	nop
 8000574:	200000e4 	.word	0x200000e4

08000578 <init_led_indicator>:

/* Public function  */
void init_led_indicator(){
 8000578:	b580      	push	{r7, lr}
 800057a:	b08c      	sub	sp, #48	; 0x30
 800057c:	af00      	add	r7, sp, #0
	ledIndicatorPhysical[SIDE_A][RED] = (GPIO_config){RED_0_GPIO_Port, RED_0_Pin};
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <init_led_indicator+0x64>)
 8000580:	4a17      	ldr	r2, [pc, #92]	; (80005e0 <init_led_indicator+0x68>)
 8000582:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000586:	e883 0003 	stmia.w	r3, {r0, r1}
	ledIndicatorPhysical[SIDE_A][GREEN] = (GPIO_config){GREEN_0_GPIO_Port, GREEN_0_Pin};
 800058a:	4b14      	ldr	r3, [pc, #80]	; (80005dc <init_led_indicator+0x64>)
 800058c:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <init_led_indicator+0x6c>)
 800058e:	3310      	adds	r3, #16
 8000590:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000594:	e883 0003 	stmia.w	r3, {r0, r1}
	ledIndicatorPhysical[SIDE_A][AMBER] = (GPIO_config){AMBER_0_GPIO_Port, AMBER_0_Pin};
 8000598:	4b10      	ldr	r3, [pc, #64]	; (80005dc <init_led_indicator+0x64>)
 800059a:	4a13      	ldr	r2, [pc, #76]	; (80005e8 <init_led_indicator+0x70>)
 800059c:	3308      	adds	r3, #8
 800059e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a2:	e883 0003 	stmia.w	r3, {r0, r1}

	ledIndicatorPhysical[SIDE_B][RED] = (GPIO_config){RED_1_GPIO_Port, RED_1_Pin};
 80005a6:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <init_led_indicator+0x64>)
 80005a8:	4a10      	ldr	r2, [pc, #64]	; (80005ec <init_led_indicator+0x74>)
 80005aa:	3318      	adds	r3, #24
 80005ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005b0:	e883 0003 	stmia.w	r3, {r0, r1}
	ledIndicatorPhysical[SIDE_B][GREEN] = (GPIO_config){GREEN_1_GPIO_Port, GREEN_1_Pin};
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <init_led_indicator+0x64>)
 80005b6:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <init_led_indicator+0x78>)
 80005b8:	3328      	adds	r3, #40	; 0x28
 80005ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005be:	e883 0003 	stmia.w	r3, {r0, r1}
	ledIndicatorPhysical[SIDE_B][AMBER] = (GPIO_config){AMBER_1_GPIO_Port, AMBER_1_Pin};
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <init_led_indicator+0x64>)
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <init_led_indicator+0x7c>)
 80005c6:	3320      	adds	r3, #32
 80005c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005cc:	e883 0003 	stmia.w	r3, {r0, r1}

	turn_all_led_indicator_off();
 80005d0:	f7ff ff6a 	bl	80004a8 <turn_all_led_indicator_off>
}
 80005d4:	bf00      	nop
 80005d6:	3730      	adds	r7, #48	; 0x30
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200000e4 	.word	0x200000e4
 80005e0:	08002824 	.word	0x08002824
 80005e4:	0800282c 	.word	0x0800282c
 80005e8:	08002834 	.word	0x08002834
 80005ec:	0800283c 	.word	0x0800283c
 80005f0:	08002844 	.word	0x08002844
 80005f4:	0800284c 	.word	0x0800284c

080005f8 <display_led_indicator>:
void display_led_indicator(TRAFFIC_LIGHT_SIDE trafficSide, TRAFFIC_LIGHT_COLOR trafficColor){
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	460a      	mov	r2, r1
 8000602:	71fb      	strb	r3, [r7, #7]
 8000604:	4613      	mov	r3, r2
 8000606:	71bb      	strb	r3, [r7, #6]
	/* At any time and at each side, only a single led can be ON.*/
	for(uint16_t color = 0; color < NUM_COLOR; color++){
 8000608:	2300      	movs	r3, #0
 800060a:	81fb      	strh	r3, [r7, #14]
 800060c:	e036      	b.n	800067c <display_led_indicator+0x84>
		if(color == trafficColor){
 800060e:	79bb      	ldrb	r3, [r7, #6]
 8000610:	b29b      	uxth	r3, r3
 8000612:	89fa      	ldrh	r2, [r7, #14]
 8000614:	429a      	cmp	r2, r3
 8000616:	d117      	bne.n	8000648 <display_led_indicator+0x50>
			HAL_GPIO_WritePin(ledIndicatorPhysical[trafficSide][color].port, ledIndicatorPhysical[trafficSide][color].pin, TURN_ON);
 8000618:	79fa      	ldrb	r2, [r7, #7]
 800061a:	89f9      	ldrh	r1, [r7, #14]
 800061c:	481b      	ldr	r0, [pc, #108]	; (800068c <display_led_indicator+0x94>)
 800061e:	4613      	mov	r3, r2
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	4413      	add	r3, r2
 8000624:	440b      	add	r3, r1
 8000626:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 800062a:	79fa      	ldrb	r2, [r7, #7]
 800062c:	89f9      	ldrh	r1, [r7, #14]
 800062e:	4c17      	ldr	r4, [pc, #92]	; (800068c <display_led_indicator+0x94>)
 8000630:	4613      	mov	r3, r2
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	4413      	add	r3, r2
 8000636:	440b      	add	r3, r1
 8000638:	00db      	lsls	r3, r3, #3
 800063a:	4423      	add	r3, r4
 800063c:	889b      	ldrh	r3, [r3, #4]
 800063e:	2200      	movs	r2, #0
 8000640:	4619      	mov	r1, r3
 8000642:	f001 f8ce 	bl	80017e2 <HAL_GPIO_WritePin>
			continue;
 8000646:	e016      	b.n	8000676 <display_led_indicator+0x7e>
		}
		HAL_GPIO_WritePin(ledIndicatorPhysical[trafficSide][color].port, ledIndicatorPhysical[trafficSide][color].pin, TURN_OFF);
 8000648:	79fa      	ldrb	r2, [r7, #7]
 800064a:	89f9      	ldrh	r1, [r7, #14]
 800064c:	480f      	ldr	r0, [pc, #60]	; (800068c <display_led_indicator+0x94>)
 800064e:	4613      	mov	r3, r2
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	4413      	add	r3, r2
 8000654:	440b      	add	r3, r1
 8000656:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 800065a:	79fa      	ldrb	r2, [r7, #7]
 800065c:	89f9      	ldrh	r1, [r7, #14]
 800065e:	4c0b      	ldr	r4, [pc, #44]	; (800068c <display_led_indicator+0x94>)
 8000660:	4613      	mov	r3, r2
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4413      	add	r3, r2
 8000666:	440b      	add	r3, r1
 8000668:	00db      	lsls	r3, r3, #3
 800066a:	4423      	add	r3, r4
 800066c:	889b      	ldrh	r3, [r3, #4]
 800066e:	2201      	movs	r2, #1
 8000670:	4619      	mov	r1, r3
 8000672:	f001 f8b6 	bl	80017e2 <HAL_GPIO_WritePin>
	for(uint16_t color = 0; color < NUM_COLOR; color++){
 8000676:	89fb      	ldrh	r3, [r7, #14]
 8000678:	3301      	adds	r3, #1
 800067a:	81fb      	strh	r3, [r7, #14]
 800067c:	89fb      	ldrh	r3, [r7, #14]
 800067e:	2b02      	cmp	r3, #2
 8000680:	d9c5      	bls.n	800060e <display_led_indicator+0x16>
	}
}
 8000682:	bf00      	nop
 8000684:	bf00      	nop
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bd90      	pop	{r4, r7, pc}
 800068c:	200000e4 	.word	0x200000e4

08000690 <blink_all_led>:
void blink_all_led(){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	if(toggleState == TURN_OFF){
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <blink_all_led+0x28>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d105      	bne.n	80006a8 <blink_all_led+0x18>
		turn_all_led_indicator_off();
 800069c:	f7ff ff04 	bl	80004a8 <turn_all_led_indicator_off>
		toggleState = TURN_ON;
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <blink_all_led+0x28>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}
	else{
		turn_all_led_indicator_on();
		toggleState = TURN_OFF;
	}
}
 80006a6:	e004      	b.n	80006b2 <blink_all_led+0x22>
		turn_all_led_indicator_on();
 80006a8:	f7ff ff32 	bl	8000510 <turn_all_led_indicator_on>
		toggleState = TURN_OFF;
 80006ac:	4b02      	ldr	r3, [pc, #8]	; (80006b8 <blink_all_led+0x28>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000000 	.word	0x20000000

080006bc <init_led_segment>:
static int enabledLedSegmentSide = SIDE_A;
static int enabledLedSegmentDigit = LEFT;
ledSegment ledSegments[NUM_SIDE][NUM_DIGIT];

/* Public function  */
void init_led_segment(){
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b08b      	sub	sp, #44	; 0x2c
 80006c0:	af00      	add	r7, sp, #0
	ledSegments[SIDE_A][LEFT].ledSegmentPhysical = (GPIO_config){EN0_LEFT_GPIO_Port, EN0_LEFT_Pin};
 80006c2:	4b33      	ldr	r3, [pc, #204]	; (8000790 <init_led_segment+0xd4>)
 80006c4:	4a33      	ldr	r2, [pc, #204]	; (8000794 <init_led_segment+0xd8>)
 80006c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ca:	e883 0003 	stmia.w	r3, {r0, r1}
	ledSegments[SIDE_A][RIGHT].ledSegmentPhysical = (GPIO_config){EN0_RIGHT_GPIO_Port, EN0_RIGHT_Pin};
 80006ce:	4b30      	ldr	r3, [pc, #192]	; (8000790 <init_led_segment+0xd4>)
 80006d0:	4a31      	ldr	r2, [pc, #196]	; (8000798 <init_led_segment+0xdc>)
 80006d2:	330c      	adds	r3, #12
 80006d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d8:	e883 0003 	stmia.w	r3, {r0, r1}
	ledSegments[SIDE_B][LEFT].ledSegmentPhysical = (GPIO_config){EN1_LEFT_GPIO_Port, EN1_LEFT_Pin};
 80006dc:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <init_led_segment+0xd4>)
 80006de:	4a2f      	ldr	r2, [pc, #188]	; (800079c <init_led_segment+0xe0>)
 80006e0:	3318      	adds	r3, #24
 80006e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e6:	e883 0003 	stmia.w	r3, {r0, r1}
	ledSegments[SIDE_B][RIGHT].ledSegmentPhysical = (GPIO_config){EN1_RIGHT_GPIO_Port, EN1_RIGHT_Pin};
 80006ea:	4b29      	ldr	r3, [pc, #164]	; (8000790 <init_led_segment+0xd4>)
 80006ec:	4a2c      	ldr	r2, [pc, #176]	; (80007a0 <init_led_segment+0xe4>)
 80006ee:	3324      	adds	r3, #36	; 0x24
 80006f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006f4:	e883 0003 	stmia.w	r3, {r0, r1}

	for(uint16_t side = 0; side < NUM_SIDE; side++){
 80006f8:	2300      	movs	r3, #0
 80006fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80006fc:	e03f      	b.n	800077e <init_led_segment+0xc2>
		for(uint16_t digit = 0; digit < NUM_DIGIT; digit++){
 80006fe:	2300      	movs	r3, #0
 8000700:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000702:	e036      	b.n	8000772 <init_led_segment+0xb6>
			HAL_GPIO_WritePin((ledSegments[side][digit].ledSegmentPhysical).port, (ledSegments[side][digit].ledSegmentPhysical).pin, TURN_OFF);
 8000704:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8000706:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000708:	4821      	ldr	r0, [pc, #132]	; (8000790 <init_led_segment+0xd4>)
 800070a:	461a      	mov	r2, r3
 800070c:	0052      	lsls	r2, r2, #1
 800070e:	441a      	add	r2, r3
 8000710:	0093      	lsls	r3, r2, #2
 8000712:	461a      	mov	r2, r3
 8000714:	460b      	mov	r3, r1
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	440b      	add	r3, r1
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	4413      	add	r3, r2
 800071e:	4403      	add	r3, r0
 8000720:	6818      	ldr	r0, [r3, #0]
 8000722:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8000724:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000726:	4c1a      	ldr	r4, [pc, #104]	; (8000790 <init_led_segment+0xd4>)
 8000728:	461a      	mov	r2, r3
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	441a      	add	r2, r3
 800072e:	0093      	lsls	r3, r2, #2
 8000730:	461a      	mov	r2, r3
 8000732:	460b      	mov	r3, r1
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	440b      	add	r3, r1
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	4413      	add	r3, r2
 800073c:	4423      	add	r3, r4
 800073e:	3304      	adds	r3, #4
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	2201      	movs	r2, #1
 8000744:	4619      	mov	r1, r3
 8000746:	f001 f84c 	bl	80017e2 <HAL_GPIO_WritePin>
			ledSegments[side][digit].numberToDisplay = 0;
 800074a:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800074c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800074e:	4810      	ldr	r0, [pc, #64]	; (8000790 <init_led_segment+0xd4>)
 8000750:	461a      	mov	r2, r3
 8000752:	0052      	lsls	r2, r2, #1
 8000754:	441a      	add	r2, r3
 8000756:	0093      	lsls	r3, r2, #2
 8000758:	461a      	mov	r2, r3
 800075a:	460b      	mov	r3, r1
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	440b      	add	r3, r1
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	4413      	add	r3, r2
 8000764:	4403      	add	r3, r0
 8000766:	3308      	adds	r3, #8
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
		for(uint16_t digit = 0; digit < NUM_DIGIT; digit++){
 800076c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800076e:	3301      	adds	r3, #1
 8000770:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000774:	2b01      	cmp	r3, #1
 8000776:	d9c5      	bls.n	8000704 <init_led_segment+0x48>
	for(uint16_t side = 0; side < NUM_SIDE; side++){
 8000778:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800077a:	3301      	adds	r3, #1
 800077c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800077e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000780:	2b01      	cmp	r3, #1
 8000782:	d9bc      	bls.n	80006fe <init_led_segment+0x42>
		}
	}

}
 8000784:	bf00      	nop
 8000786:	bf00      	nop
 8000788:	372c      	adds	r7, #44	; 0x2c
 800078a:	46bd      	mov	sp, r7
 800078c:	bd90      	pop	{r4, r7, pc}
 800078e:	bf00      	nop
 8000790:	20000114 	.word	0x20000114
 8000794:	08002854 	.word	0x08002854
 8000798:	0800285c 	.word	0x0800285c
 800079c:	08002864 	.word	0x08002864
 80007a0:	0800286c 	.word	0x0800286c

080007a4 <modify_led_segment_buffer>:

void modify_led_segment_buffer(TRAFFIC_LIGHT_SIDE trafficSide, uint16_t number){
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	460a      	mov	r2, r1
 80007ae:	71fb      	strb	r3, [r7, #7]
 80007b0:	4613      	mov	r3, r2
 80007b2:	80bb      	strh	r3, [r7, #4]
	ledSegments[trafficSide][LEFT].numberToDisplay = number / 10;
 80007b4:	88bb      	ldrh	r3, [r7, #4]
 80007b6:	4a14      	ldr	r2, [pc, #80]	; (8000808 <modify_led_segment_buffer+0x64>)
 80007b8:	fba2 2303 	umull	r2, r3, r2, r3
 80007bc:	08db      	lsrs	r3, r3, #3
 80007be:	b29b      	uxth	r3, r3
 80007c0:	79fa      	ldrb	r2, [r7, #7]
 80007c2:	4618      	mov	r0, r3
 80007c4:	4911      	ldr	r1, [pc, #68]	; (800080c <modify_led_segment_buffer+0x68>)
 80007c6:	4613      	mov	r3, r2
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	4413      	add	r3, r2
 80007cc:	00db      	lsls	r3, r3, #3
 80007ce:	440b      	add	r3, r1
 80007d0:	3308      	adds	r3, #8
 80007d2:	6018      	str	r0, [r3, #0]
	ledSegments[trafficSide][RIGHT].numberToDisplay = number % 10;
 80007d4:	88ba      	ldrh	r2, [r7, #4]
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <modify_led_segment_buffer+0x64>)
 80007d8:	fba3 1302 	umull	r1, r3, r3, r2
 80007dc:	08d9      	lsrs	r1, r3, #3
 80007de:	460b      	mov	r3, r1
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	440b      	add	r3, r1
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	1ad3      	subs	r3, r2, r3
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	79fa      	ldrb	r2, [r7, #7]
 80007ec:	4618      	mov	r0, r3
 80007ee:	4907      	ldr	r1, [pc, #28]	; (800080c <modify_led_segment_buffer+0x68>)
 80007f0:	4613      	mov	r3, r2
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	4413      	add	r3, r2
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	440b      	add	r3, r1
 80007fa:	3314      	adds	r3, #20
 80007fc:	6018      	str	r0, [r3, #0]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	cccccccd 	.word	0xcccccccd
 800080c:	20000114 	.word	0x20000114

08000810 <display_led_segment>:

void display_led_segment(){
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
	if(timers[TIMER_LED_SEGMENT].flag == TURN_ON){
 8000816:	4b51      	ldr	r3, [pc, #324]	; (800095c <display_led_segment+0x14c>)
 8000818:	6a1b      	ldr	r3, [r3, #32]
 800081a:	2b00      	cmp	r3, #0
 800081c:	f040 809a 	bne.w	8000954 <display_led_segment+0x144>
		// Write data to LED segment
		GPIOB->ODR = (GPIOB->ODR & (0xFF << 8))
 8000820:	4b4f      	ldr	r3, [pc, #316]	; (8000960 <display_led_segment+0x150>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
				| (SEGMENT_HEX[ledSegments[enabledLedSegmentSide][enabledLedSegmentDigit].numberToDisplay]);
 8000828:	4b4e      	ldr	r3, [pc, #312]	; (8000964 <display_led_segment+0x154>)
 800082a:	6819      	ldr	r1, [r3, #0]
 800082c:	4b4e      	ldr	r3, [pc, #312]	; (8000968 <display_led_segment+0x158>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4c4e      	ldr	r4, [pc, #312]	; (800096c <display_led_segment+0x15c>)
 8000832:	461a      	mov	r2, r3
 8000834:	0052      	lsls	r2, r2, #1
 8000836:	441a      	add	r2, r3
 8000838:	0093      	lsls	r3, r2, #2
 800083a:	461a      	mov	r2, r3
 800083c:	460b      	mov	r3, r1
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	440b      	add	r3, r1
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	4413      	add	r3, r2
 8000846:	4423      	add	r3, r4
 8000848:	3308      	adds	r3, #8
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a48      	ldr	r2, [pc, #288]	; (8000970 <display_led_segment+0x160>)
 800084e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		GPIOB->ODR = (GPIOB->ODR & (0xFF << 8))
 8000852:	4a43      	ldr	r2, [pc, #268]	; (8000960 <display_led_segment+0x150>)
				| (SEGMENT_HEX[ledSegments[enabledLedSegmentSide][enabledLedSegmentDigit].numberToDisplay]);
 8000854:	4303      	orrs	r3, r0
		GPIOB->ODR = (GPIOB->ODR & (0xFF << 8))
 8000856:	60d3      	str	r3, [r2, #12]

		// Enable correct LED segment
		for(uint16_t side = 0; side < NUM_SIDE; side++){
 8000858:	2300      	movs	r3, #0
 800085a:	80fb      	strh	r3, [r7, #6]
 800085c:	e05c      	b.n	8000918 <display_led_segment+0x108>
			for(uint16_t digit = 0; digit < NUM_DIGIT; digit++){
 800085e:	2300      	movs	r3, #0
 8000860:	80bb      	strh	r3, [r7, #4]
 8000862:	e053      	b.n	800090c <display_led_segment+0xfc>
				if(side == enabledLedSegmentSide && digit == enabledLedSegmentDigit)
 8000864:	88fa      	ldrh	r2, [r7, #6]
 8000866:	4b3f      	ldr	r3, [pc, #252]	; (8000964 <display_led_segment+0x154>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	429a      	cmp	r2, r3
 800086c:	d128      	bne.n	80008c0 <display_led_segment+0xb0>
 800086e:	88ba      	ldrh	r2, [r7, #4]
 8000870:	4b3d      	ldr	r3, [pc, #244]	; (8000968 <display_led_segment+0x158>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	429a      	cmp	r2, r3
 8000876:	d123      	bne.n	80008c0 <display_led_segment+0xb0>
					HAL_GPIO_WritePin((ledSegments[side][digit].ledSegmentPhysical).port, (ledSegments[side][digit].ledSegmentPhysical).pin, TURN_ON);
 8000878:	88f9      	ldrh	r1, [r7, #6]
 800087a:	88bb      	ldrh	r3, [r7, #4]
 800087c:	483b      	ldr	r0, [pc, #236]	; (800096c <display_led_segment+0x15c>)
 800087e:	461a      	mov	r2, r3
 8000880:	0052      	lsls	r2, r2, #1
 8000882:	441a      	add	r2, r3
 8000884:	0093      	lsls	r3, r2, #2
 8000886:	461a      	mov	r2, r3
 8000888:	460b      	mov	r3, r1
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	440b      	add	r3, r1
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	4413      	add	r3, r2
 8000892:	4403      	add	r3, r0
 8000894:	6818      	ldr	r0, [r3, #0]
 8000896:	88f9      	ldrh	r1, [r7, #6]
 8000898:	88bb      	ldrh	r3, [r7, #4]
 800089a:	4c34      	ldr	r4, [pc, #208]	; (800096c <display_led_segment+0x15c>)
 800089c:	461a      	mov	r2, r3
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	441a      	add	r2, r3
 80008a2:	0093      	lsls	r3, r2, #2
 80008a4:	461a      	mov	r2, r3
 80008a6:	460b      	mov	r3, r1
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	440b      	add	r3, r1
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	4413      	add	r3, r2
 80008b0:	4423      	add	r3, r4
 80008b2:	3304      	adds	r3, #4
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	2200      	movs	r2, #0
 80008b8:	4619      	mov	r1, r3
 80008ba:	f000 ff92 	bl	80017e2 <HAL_GPIO_WritePin>
 80008be:	e022      	b.n	8000906 <display_led_segment+0xf6>
				else HAL_GPIO_WritePin((ledSegments[side][digit].ledSegmentPhysical).port, (ledSegments[side][digit].ledSegmentPhysical).pin, TURN_OFF);
 80008c0:	88f9      	ldrh	r1, [r7, #6]
 80008c2:	88bb      	ldrh	r3, [r7, #4]
 80008c4:	4829      	ldr	r0, [pc, #164]	; (800096c <display_led_segment+0x15c>)
 80008c6:	461a      	mov	r2, r3
 80008c8:	0052      	lsls	r2, r2, #1
 80008ca:	441a      	add	r2, r3
 80008cc:	0093      	lsls	r3, r2, #2
 80008ce:	461a      	mov	r2, r3
 80008d0:	460b      	mov	r3, r1
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	440b      	add	r3, r1
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	4413      	add	r3, r2
 80008da:	4403      	add	r3, r0
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	88f9      	ldrh	r1, [r7, #6]
 80008e0:	88bb      	ldrh	r3, [r7, #4]
 80008e2:	4c22      	ldr	r4, [pc, #136]	; (800096c <display_led_segment+0x15c>)
 80008e4:	461a      	mov	r2, r3
 80008e6:	0052      	lsls	r2, r2, #1
 80008e8:	441a      	add	r2, r3
 80008ea:	0093      	lsls	r3, r2, #2
 80008ec:	461a      	mov	r2, r3
 80008ee:	460b      	mov	r3, r1
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	440b      	add	r3, r1
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	4413      	add	r3, r2
 80008f8:	4423      	add	r3, r4
 80008fa:	3304      	adds	r3, #4
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	2201      	movs	r2, #1
 8000900:	4619      	mov	r1, r3
 8000902:	f000 ff6e 	bl	80017e2 <HAL_GPIO_WritePin>
			for(uint16_t digit = 0; digit < NUM_DIGIT; digit++){
 8000906:	88bb      	ldrh	r3, [r7, #4]
 8000908:	3301      	adds	r3, #1
 800090a:	80bb      	strh	r3, [r7, #4]
 800090c:	88bb      	ldrh	r3, [r7, #4]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d9a8      	bls.n	8000864 <display_led_segment+0x54>
		for(uint16_t side = 0; side < NUM_SIDE; side++){
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	3301      	adds	r3, #1
 8000916:	80fb      	strh	r3, [r7, #6]
 8000918:	88fb      	ldrh	r3, [r7, #6]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d99f      	bls.n	800085e <display_led_segment+0x4e>
			}
		}

		// Toggle to another LEDs
		if(enabledLedSegmentDigit == RIGHT)
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <display_led_segment+0x158>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d109      	bne.n	800093a <display_led_segment+0x12a>
			enabledLedSegmentSide = (enabledLedSegmentSide + 1) % NUM_SIDE;
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <display_led_segment+0x154>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	3301      	adds	r3, #1
 800092c:	2b00      	cmp	r3, #0
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	bfb8      	it	lt
 8000934:	425b      	neglt	r3, r3
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <display_led_segment+0x154>)
 8000938:	6013      	str	r3, [r2, #0]
		enabledLedSegmentDigit = (enabledLedSegmentDigit + 1) % NUM_DIGIT;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <display_led_segment+0x158>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	3301      	adds	r3, #1
 8000940:	2b00      	cmp	r3, #0
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	bfb8      	it	lt
 8000948:	425b      	neglt	r3, r3
 800094a:	4a07      	ldr	r2, [pc, #28]	; (8000968 <display_led_segment+0x158>)
 800094c:	6013      	str	r3, [r2, #0]
		timers[TIMER_LED_SEGMENT].flag = TURN_OFF;
 800094e:	4b03      	ldr	r3, [pc, #12]	; (800095c <display_led_segment+0x14c>)
 8000950:	2201      	movs	r2, #1
 8000952:	621a      	str	r2, [r3, #32]
	}
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bd90      	pop	{r4, r7, pc}
 800095c:	2000006c 	.word	0x2000006c
 8000960:	40010c00 	.word	0x40010c00
 8000964:	20000064 	.word	0x20000064
 8000968:	20000068 	.word	0x20000068
 800096c:	20000114 	.word	0x20000114
 8000970:	20000004 	.word	0x20000004

08000974 <init_timer>:
/* Private variables declaration */

/* Private function  */

/* Public function  */
void init_timer(){
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
	// Set counter limit to raise a flag
	timers[TIMER_BUTTON].limit = BUTTON_DURATION_MIN / INTERRUPT_DURATION_MS;
 800097a:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <init_timer+0x74>)
 800097c:	2201      	movs	r2, #1
 800097e:	601a      	str	r2, [r3, #0]
	timers[TIMER_LED_INDICATOR].limit = LED_INDICATOR_DURATION_MS / INTERRUPT_DURATION_MS;
 8000980:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <init_timer+0x74>)
 8000982:	2219      	movs	r2, #25
 8000984:	60da      	str	r2, [r3, #12]
	timers[TIMER_LED_SEGMENT].limit = LED_SEGMENT_DURATION_MS / INTERRUPT_DURATION_MS;
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <init_timer+0x74>)
 8000988:	2205      	movs	r2, #5
 800098a:	619a      	str	r2, [r3, #24]
	timers[TIMER_SECOND].limit = SECOND_DURATION_MS / INTERRUPT_DURATION_MS;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <init_timer+0x74>)
 800098e:	2264      	movs	r2, #100	; 0x64
 8000990:	625a      	str	r2, [r3, #36]	; 0x24

	// Reset counter and flag to default value
	for(uint16_t timer = 0; timer < NUM_TIMER; timer++){
 8000992:	2300      	movs	r3, #0
 8000994:	80fb      	strh	r3, [r7, #6]
 8000996:	e01d      	b.n	80009d4 <init_timer+0x60>
		timers[timer].counter = timers[timer].limit;
 8000998:	88f9      	ldrh	r1, [r7, #6]
 800099a:	88fa      	ldrh	r2, [r7, #6]
 800099c:	4812      	ldr	r0, [pc, #72]	; (80009e8 <init_timer+0x74>)
 800099e:	460b      	mov	r3, r1
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	440b      	add	r3, r1
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4403      	add	r3, r0
 80009a8:	6819      	ldr	r1, [r3, #0]
 80009aa:	480f      	ldr	r0, [pc, #60]	; (80009e8 <init_timer+0x74>)
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	4403      	add	r3, r0
 80009b6:	3304      	adds	r3, #4
 80009b8:	6019      	str	r1, [r3, #0]
		timers[timer].flag = 0;
 80009ba:	88fa      	ldrh	r2, [r7, #6]
 80009bc:	490a      	ldr	r1, [pc, #40]	; (80009e8 <init_timer+0x74>)
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	440b      	add	r3, r1
 80009c8:	3308      	adds	r3, #8
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
	for(uint16_t timer = 0; timer < NUM_TIMER; timer++){
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	3301      	adds	r3, #1
 80009d2:	80fb      	strh	r3, [r7, #6]
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	d9de      	bls.n	8000998 <init_timer+0x24>
	}
}
 80009da:	bf00      	nop
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	2000006c 	.word	0x2000006c

080009ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	for(uint16_t timer = 0; timer < NUM_TIMER; timer++){
 80009f4:	2300      	movs	r3, #0
 80009f6:	81fb      	strh	r3, [r7, #14]
 80009f8:	e03a      	b.n	8000a70 <HAL_TIM_PeriodElapsedCallback+0x84>
		timers[timer].counter--;
 80009fa:	89fa      	ldrh	r2, [r7, #14]
 80009fc:	4921      	ldr	r1, [pc, #132]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80009fe:	4613      	mov	r3, r2
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4413      	add	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	440b      	add	r3, r1
 8000a08:	3304      	adds	r3, #4
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	1e59      	subs	r1, r3, #1
 8000a0e:	481d      	ldr	r0, [pc, #116]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000a10:	4613      	mov	r3, r2
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	4413      	add	r3, r2
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4403      	add	r3, r0
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	6019      	str	r1, [r3, #0]
		if(timers[timer].counter <= 0){
 8000a1e:	89fa      	ldrh	r2, [r7, #14]
 8000a20:	4918      	ldr	r1, [pc, #96]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000a22:	4613      	mov	r3, r2
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	4413      	add	r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	dc1a      	bgt.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x7e>
			timers[timer].flag = TURN_ON; 	// Raise the flag
 8000a34:	89fa      	ldrh	r2, [r7, #14]
 8000a36:	4913      	ldr	r1, [pc, #76]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000a38:	4613      	mov	r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	440b      	add	r3, r1
 8000a42:	3308      	adds	r3, #8
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
			timers[timer].counter = timers[timer].limit;	// Reset counter
 8000a48:	89f9      	ldrh	r1, [r7, #14]
 8000a4a:	89fa      	ldrh	r2, [r7, #14]
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000a4e:	460b      	mov	r3, r1
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	440b      	add	r3, r1
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4403      	add	r3, r0
 8000a58:	6819      	ldr	r1, [r3, #0]
 8000a5a:	480a      	ldr	r0, [pc, #40]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	4413      	add	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	4403      	add	r3, r0
 8000a66:	3304      	adds	r3, #4
 8000a68:	6019      	str	r1, [r3, #0]
	for(uint16_t timer = 0; timer < NUM_TIMER; timer++){
 8000a6a:	89fb      	ldrh	r3, [r7, #14]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	81fb      	strh	r3, [r7, #14]
 8000a70:	89fb      	ldrh	r3, [r7, #14]
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	d9c1      	bls.n	80009fa <HAL_TIM_PeriodElapsedCallback+0xe>
		}
	}
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	2000006c 	.word	0x2000006c

08000a88 <fsm_led_indicator>:
#define DEFAULT_MODIFY_VALUE 100
BUTTON_PURPOSE button_to_response = NONE;
uint16_t modifyValue = DEFAULT_MODIFY_VALUE;

/* Private function  */
void fsm_led_indicator(){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
	if(system.mode == NORMAL){
 8000a8e:	4b31      	ldr	r3, [pc, #196]	; (8000b54 <fsm_led_indicator+0xcc>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d151      	bne.n	8000b3a <fsm_led_indicator+0xb2>
		// Display traffic color as normal
		display_led_indicator(SIDE_A, system.colors[SIDE_A]);
 8000a96:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <fsm_led_indicator+0xcc>)
 8000a98:	7b1b      	ldrb	r3, [r3, #12]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff fdab 	bl	80005f8 <display_led_indicator>
		display_led_indicator(SIDE_B, system.colors[SIDE_B]);
 8000aa2:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <fsm_led_indicator+0xcc>)
 8000aa4:	7b5b      	ldrb	r3, [r3, #13]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff fda5 	bl	80005f8 <display_led_indicator>

		// Change color state each side
		for(uint8_t side = 0; side < NUM_SIDE; side++){
 8000aae:	2300      	movs	r3, #0
 8000ab0:	71fb      	strb	r3, [r7, #7]
 8000ab2:	e03e      	b.n	8000b32 <fsm_led_indicator+0xaa>
			if(system.countDownTimer[side] <= 0){
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4a27      	ldr	r2, [pc, #156]	; (8000b54 <fsm_led_indicator+0xcc>)
 8000ab8:	3304      	adds	r3, #4
 8000aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d133      	bne.n	8000b2a <fsm_led_indicator+0xa2>
				switch(system.colors[side]){
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	4a23      	ldr	r2, [pc, #140]	; (8000b54 <fsm_led_indicator+0xcc>)
 8000ac6:	4413      	add	r3, r2
 8000ac8:	7b1b      	ldrb	r3, [r3, #12]
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d020      	beq.n	8000b10 <fsm_led_indicator+0x88>
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	dc2c      	bgt.n	8000b2c <fsm_led_indicator+0xa4>
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d002      	beq.n	8000adc <fsm_led_indicator+0x54>
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d00d      	beq.n	8000af6 <fsm_led_indicator+0x6e>
 8000ada:	e027      	b.n	8000b2c <fsm_led_indicator+0xa4>
				case RED:
					system.colors[side] = GREEN;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4a1d      	ldr	r2, [pc, #116]	; (8000b54 <fsm_led_indicator+0xcc>)
 8000ae0:	4413      	add	r3, r2
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	731a      	strb	r2, [r3, #12]
					system.countDownTimer[side] = system.countDownLimit[GREEN];
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	4a1a      	ldr	r2, [pc, #104]	; (8000b54 <fsm_led_indicator+0xcc>)
 8000aea:	88d1      	ldrh	r1, [r2, #6]
 8000aec:	4a19      	ldr	r2, [pc, #100]	; (8000b54 <fsm_led_indicator+0xcc>)
 8000aee:	3304      	adds	r3, #4
 8000af0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					break;
 8000af4:	e01a      	b.n	8000b2c <fsm_led_indicator+0xa4>
				case AMBER:
					system.colors[side] = RED;
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	4a16      	ldr	r2, [pc, #88]	; (8000b54 <fsm_led_indicator+0xcc>)
 8000afa:	4413      	add	r3, r2
 8000afc:	2200      	movs	r2, #0
 8000afe:	731a      	strb	r2, [r3, #12]
					system.countDownTimer[side] = system.countDownLimit[RED];
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <fsm_led_indicator+0xcc>)
 8000b04:	8851      	ldrh	r1, [r2, #2]
 8000b06:	4a13      	ldr	r2, [pc, #76]	; (8000b54 <fsm_led_indicator+0xcc>)
 8000b08:	3304      	adds	r3, #4
 8000b0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					break;
 8000b0e:	e00d      	b.n	8000b2c <fsm_led_indicator+0xa4>
				case GREEN:
					system.colors[side] = AMBER;
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	4a10      	ldr	r2, [pc, #64]	; (8000b54 <fsm_led_indicator+0xcc>)
 8000b14:	4413      	add	r3, r2
 8000b16:	2201      	movs	r2, #1
 8000b18:	731a      	strb	r2, [r3, #12]
					system.countDownTimer[side] = system.countDownLimit[AMBER];
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <fsm_led_indicator+0xcc>)
 8000b1e:	8891      	ldrh	r1, [r2, #4]
 8000b20:	4a0c      	ldr	r2, [pc, #48]	; (8000b54 <fsm_led_indicator+0xcc>)
 8000b22:	3304      	adds	r3, #4
 8000b24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000b28:	e000      	b.n	8000b2c <fsm_led_indicator+0xa4>
				}
			}
 8000b2a:	bf00      	nop
		for(uint8_t side = 0; side < NUM_SIDE; side++){
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	71fb      	strb	r3, [r7, #7]
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d9bd      	bls.n	8000ab4 <fsm_led_indicator+0x2c>
		if(timers[TIMER_LED_INDICATOR].flag == TURN_ON){
			blink_all_led();
			timers[TIMER_LED_INDICATOR].flag = TURN_OFF;
		}
	}
}
 8000b38:	e008      	b.n	8000b4c <fsm_led_indicator+0xc4>
		if(timers[TIMER_LED_INDICATOR].flag == TURN_ON){
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <fsm_led_indicator+0xd0>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d104      	bne.n	8000b4c <fsm_led_indicator+0xc4>
			blink_all_led();
 8000b42:	f7ff fda5 	bl	8000690 <blink_all_led>
			timers[TIMER_LED_INDICATOR].flag = TURN_OFF;
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <fsm_led_indicator+0xd0>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	615a      	str	r2, [r3, #20]
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000144 	.word	0x20000144
 8000b58:	2000006c 	.word	0x2000006c

08000b5c <fsm_led_segment>:

void fsm_led_segment(){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	display_led_segment();
 8000b60:	f7ff fe56 	bl	8000810 <display_led_segment>
	switch(system.mode){
 8000b64:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <fsm_led_segment+0xc4>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	d853      	bhi.n	8000c14 <fsm_led_segment+0xb8>
 8000b6c:	a201      	add	r2, pc, #4	; (adr r2, 8000b74 <fsm_led_segment+0x18>)
 8000b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b72:	bf00      	nop
 8000b74:	08000b85 	.word	0x08000b85
 8000b78:	08000bbf 	.word	0x08000bbf
 8000b7c:	08000bdb 	.word	0x08000bdb
 8000b80:	08000bf7 	.word	0x08000bf7
	// Traffic light running normally
	case NORMAL:
		if(timers[TIMER_SECOND].flag == TURN_ON){
 8000b84:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <fsm_led_segment+0xc8>)
 8000b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d142      	bne.n	8000c12 <fsm_led_segment+0xb6>
			// Count down each second
			system.countDownTimer[SIDE_A]--;
 8000b8c:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <fsm_led_segment+0xc4>)
 8000b8e:	891b      	ldrh	r3, [r3, #8]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <fsm_led_segment+0xc4>)
 8000b96:	811a      	strh	r2, [r3, #8]
			system.countDownTimer[SIDE_B]--;
 8000b98:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <fsm_led_segment+0xc4>)
 8000b9a:	895b      	ldrh	r3, [r3, #10]
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <fsm_led_segment+0xc4>)
 8000ba2:	815a      	strh	r2, [r3, #10]
			// Display the count down number
			modify_led_segment_buffer(SIDE_A, system.countDownTimer[SIDE_A]);
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <fsm_led_segment+0xc4>)
 8000ba6:	891b      	ldrh	r3, [r3, #8]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	2000      	movs	r0, #0
 8000bac:	f7ff fdfa 	bl	80007a4 <modify_led_segment_buffer>
			modify_led_segment_buffer(SIDE_B, system.countDownTimer[SIDE_B]);
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <fsm_led_segment+0xc4>)
 8000bb2:	895b      	ldrh	r3, [r3, #10]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f7ff fdf4 	bl	80007a4 <modify_led_segment_buffer>
		}
		break;
 8000bbc:	e029      	b.n	8000c12 <fsm_led_segment+0xb6>
	// Other cases: Modify mode
	case MODIFY_RED:
		modify_led_segment_buffer(SIDE_A, system.mode);
 8000bbe:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <fsm_led_segment+0xc4>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f7ff fdec 	bl	80007a4 <modify_led_segment_buffer>
		modify_led_segment_buffer(SIDE_B, system.countDownLimit[RED]);
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <fsm_led_segment+0xc4>)
 8000bce:	885b      	ldrh	r3, [r3, #2]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f7ff fde6 	bl	80007a4 <modify_led_segment_buffer>
		break;
 8000bd8:	e01c      	b.n	8000c14 <fsm_led_segment+0xb8>
	case MODIFY_AMBER:
		modify_led_segment_buffer(SIDE_A, system.mode);
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <fsm_led_segment+0xc4>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	4619      	mov	r1, r3
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff fdde 	bl	80007a4 <modify_led_segment_buffer>
		modify_led_segment_buffer(SIDE_B, system.countDownLimit[AMBER]);
 8000be8:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <fsm_led_segment+0xc4>)
 8000bea:	889b      	ldrh	r3, [r3, #4]
 8000bec:	4619      	mov	r1, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f7ff fdd8 	bl	80007a4 <modify_led_segment_buffer>
		break;
 8000bf4:	e00e      	b.n	8000c14 <fsm_led_segment+0xb8>
	case MODIFY_GREEN:
		modify_led_segment_buffer(SIDE_A, system.mode);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <fsm_led_segment+0xc4>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f7ff fdd0 	bl	80007a4 <modify_led_segment_buffer>
		modify_led_segment_buffer(SIDE_B, system.countDownLimit[GREEN]);
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <fsm_led_segment+0xc4>)
 8000c06:	88db      	ldrh	r3, [r3, #6]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f7ff fdca 	bl	80007a4 <modify_led_segment_buffer>
		break;
 8000c10:	e000      	b.n	8000c14 <fsm_led_segment+0xb8>
		break;
 8000c12:	bf00      	nop
	}
	// Reset timer flag of second tracker
	timers[TIMER_SECOND].flag = TURN_OFF;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <fsm_led_segment+0xc8>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000144 	.word	0x20000144
 8000c24:	2000006c 	.word	0x2000006c

08000c28 <respond_to_button>:

uint8_t respond_to_button(BUTTON_PURPOSE buttonIndex){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
	uint8_t result = NO_RESPONSE_NEEDED;
 8000c32:	2300      	movs	r3, #0
 8000c34:	73fb      	strb	r3, [r7, #15]
	// Response to certain actions
	if(is_button_response_needed(buttonIndex)){
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fbfe 	bl	800043c <is_button_response_needed>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d01c      	beq.n	8000c80 <respond_to_button+0x58>
		 finish_to_respond(buttonIndex); // Reset after responds
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fc16 	bl	800047c <finish_to_respond>
		 switch(buttonIndex){
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d006      	beq.n	8000c64 <respond_to_button+0x3c>
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	dc14      	bgt.n	8000c84 <respond_to_button+0x5c>
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d002      	beq.n	8000c64 <respond_to_button+0x3c>
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d00b      	beq.n	8000c7a <respond_to_button+0x52>
				 break;
			 // Response to: Single/Long press
			 case MODIFY_VALUE:
				 result = RESPONSE_NEEDED;
				 break;
			 default: break;
 8000c62:	e00f      	b.n	8000c84 <respond_to_button+0x5c>
				 if(!is_button_long_pressed(buttonIndex))
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fbc7 	bl	80003fc <is_button_long_pressed>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d109      	bne.n	8000c88 <respond_to_button+0x60>
					 result = RESPONSE_NEEDED;
 8000c74:	2301      	movs	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
				 break;
 8000c78:	e006      	b.n	8000c88 <respond_to_button+0x60>
				 result = RESPONSE_NEEDED;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	73fb      	strb	r3, [r7, #15]
				 break;
 8000c7e:	e004      	b.n	8000c8a <respond_to_button+0x62>
		 }
	 }
 8000c80:	bf00      	nop
 8000c82:	e002      	b.n	8000c8a <respond_to_button+0x62>
			 default: break;
 8000c84:	bf00      	nop
 8000c86:	e000      	b.n	8000c8a <respond_to_button+0x62>
				 break;
 8000c88:	bf00      	nop
	 return result;
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <fsm_button>:

void fsm_button(){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
	/* Read & Process buttons*/
	if(timers[TIMER_BUTTON].flag == TURN_ON){
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <fsm_button+0x4c>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d104      	bne.n	8000cac <fsm_button+0x18>
		button_reading();
 8000ca2:	f7ff faa9 	bl	80001f8 <button_reading>
		timers[TIMER_BUTTON].flag = TURN_OFF;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <fsm_button+0x4c>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	609a      	str	r2, [r3, #8]
	}

	// Catch button trigger: Prioritized (BTN1 > BTN2 > BTN3)
	for(int index = NUM_BUTTON - 1; index >= 0; index--){
 8000cac:	2302      	movs	r3, #2
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	e00e      	b.n	8000cd0 <fsm_button+0x3c>
		if(respond_to_button(index) == RESPONSE_NEEDED){
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ffb6 	bl	8000c28 <respond_to_button>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d103      	bne.n	8000cca <fsm_button+0x36>
			button_to_response = index;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <fsm_button+0x50>)
 8000cc8:	701a      	strb	r2, [r3, #0]
	for(int index = NUM_BUTTON - 1; index >= 0; index--){
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	daed      	bge.n	8000cb2 <fsm_button+0x1e>
		}
	}

}
 8000cd6:	bf00      	nop
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2000006c 	.word	0x2000006c
 8000ce4:	2000002c 	.word	0x2000002c

08000ce8 <init_fsm_traffic_light_system>:

/* Public function  */
void init_fsm_traffic_light_system(){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
	// Initiate sub-modules
	init_timer();
 8000cee:	f7ff fe41 	bl	8000974 <init_timer>
	init_led_indicator();
 8000cf2:	f7ff fc41 	bl	8000578 <init_led_indicator>
	init_led_segment();
 8000cf6:	f7ff fce1 	bl	80006bc <init_led_segment>
	init_button();
 8000cfa:	f7ff fa27 	bl	800014c <init_button>

	// Set initial values for traffic light
	system.mode = NORMAL;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <init_fsm_traffic_light_system+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
	system.colors[SIDE_A] = RED;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <init_fsm_traffic_light_system+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	731a      	strb	r2, [r3, #12]
	system.colors[SIDE_B] = GREEN;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <init_fsm_traffic_light_system+0x74>)
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	735a      	strb	r2, [r3, #13]
	system.countDownLimit[RED] = 5;
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <init_fsm_traffic_light_system+0x74>)
 8000d12:	2205      	movs	r2, #5
 8000d14:	805a      	strh	r2, [r3, #2]
	system.countDownLimit[AMBER] = 2;
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <init_fsm_traffic_light_system+0x74>)
 8000d18:	2202      	movs	r2, #2
 8000d1a:	809a      	strh	r2, [r3, #4]
	system.countDownLimit[GREEN] = 3;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <init_fsm_traffic_light_system+0x74>)
 8000d1e:	2203      	movs	r2, #3
 8000d20:	80da      	strh	r2, [r3, #6]
	for(uint8_t side = 0; side < NUM_SIDE; side++){
 8000d22:	2300      	movs	r3, #0
 8000d24:	71fb      	strb	r3, [r7, #7]
 8000d26:	e010      	b.n	8000d4a <init_fsm_traffic_light_system+0x62>
		system.countDownTimer[side] = system.countDownLimit[system.colors[side]];
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	4a0c      	ldr	r2, [pc, #48]	; (8000d5c <init_fsm_traffic_light_system+0x74>)
 8000d2c:	4413      	add	r3, r2
 8000d2e:	7b1b      	ldrb	r3, [r3, #12]
 8000d30:	79fa      	ldrb	r2, [r7, #7]
 8000d32:	490a      	ldr	r1, [pc, #40]	; (8000d5c <init_fsm_traffic_light_system+0x74>)
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	440b      	add	r3, r1
 8000d38:	8858      	ldrh	r0, [r3, #2]
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <init_fsm_traffic_light_system+0x74>)
 8000d3c:	1d13      	adds	r3, r2, #4
 8000d3e:	4602      	mov	r2, r0
 8000d40:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(uint8_t side = 0; side < NUM_SIDE; side++){
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	3301      	adds	r3, #1
 8000d48:	71fb      	strb	r3, [r7, #7]
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d9eb      	bls.n	8000d28 <init_fsm_traffic_light_system+0x40>
	}
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000144 	.word	0x20000144

08000d60 <fsm_traffic_light_system>:

void fsm_traffic_light_system(){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	/* Output display: led indicator, led segment*/
	fsm_led_indicator();
 8000d64:	f7ff fe90 	bl	8000a88 <fsm_led_indicator>
	fsm_led_segment();
 8000d68:	f7ff fef8 	bl	8000b5c <fsm_led_segment>
	fsm_button();
 8000d6c:	f7ff ff92 	bl	8000c94 <fsm_button>

	/* Finite state machine: Button to mode */
	switch(button_to_response){
 8000d70:	4b3b      	ldr	r3, [pc, #236]	; (8000e60 <fsm_traffic_light_system+0x100>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d059      	beq.n	8000e2c <fsm_traffic_light_system+0xcc>
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	dc66      	bgt.n	8000e4a <fsm_traffic_light_system+0xea>
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d002      	beq.n	8000d86 <fsm_traffic_light_system+0x26>
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d038      	beq.n	8000df6 <fsm_traffic_light_system+0x96>
		if(system.mode != NORMAL){
			// Save modified value
			system.countDownLimit[system.mode - 1] = modifyValue;
		}
		break;
	default: break;
 8000d84:	e061      	b.n	8000e4a <fsm_traffic_light_system+0xea>
		system.mode = (system.mode + 1) % NUM_MODE;
 8000d86:	4b37      	ldr	r3, [pc, #220]	; (8000e64 <fsm_traffic_light_system+0x104>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	425a      	negs	r2, r3
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	f002 0203 	and.w	r2, r2, #3
 8000d96:	bf58      	it	pl
 8000d98:	4253      	negpl	r3, r2
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <fsm_traffic_light_system+0x104>)
 8000d9e:	701a      	strb	r2, [r3, #0]
		modifyValue = DEFAULT_MODIFY_VALUE;
 8000da0:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <fsm_traffic_light_system+0x108>)
 8000da2:	2264      	movs	r2, #100	; 0x64
 8000da4:	801a      	strh	r2, [r3, #0]
		if(system.mode == NORMAL){
 8000da6:	4b2f      	ldr	r3, [pc, #188]	; (8000e64 <fsm_traffic_light_system+0x104>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10c      	bne.n	8000dc8 <fsm_traffic_light_system+0x68>
			modify_led_segment_buffer(SIDE_A, system.countDownTimer[SIDE_A]);
 8000dae:	4b2d      	ldr	r3, [pc, #180]	; (8000e64 <fsm_traffic_light_system+0x104>)
 8000db0:	891b      	ldrh	r3, [r3, #8]
 8000db2:	4619      	mov	r1, r3
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff fcf5 	bl	80007a4 <modify_led_segment_buffer>
			modify_led_segment_buffer(SIDE_B, system.countDownTimer[SIDE_B]);
 8000dba:	4b2a      	ldr	r3, [pc, #168]	; (8000e64 <fsm_traffic_light_system+0x104>)
 8000dbc:	895b      	ldrh	r3, [r3, #10]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f7ff fcef 	bl	80007a4 <modify_led_segment_buffer>
		break;
 8000dc6:	e045      	b.n	8000e54 <fsm_traffic_light_system+0xf4>
			modifyValue = system.countDownLimit[system.mode - 1];
 8000dc8:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <fsm_traffic_light_system+0x104>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	4a25      	ldr	r2, [pc, #148]	; (8000e64 <fsm_traffic_light_system+0x104>)
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	885a      	ldrh	r2, [r3, #2]
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <fsm_traffic_light_system+0x108>)
 8000dd8:	801a      	strh	r2, [r3, #0]
			modify_led_segment_buffer(SIDE_A, system.mode);
 8000dda:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <fsm_traffic_light_system+0x104>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	4619      	mov	r1, r3
 8000de2:	2000      	movs	r0, #0
 8000de4:	f7ff fcde 	bl	80007a4 <modify_led_segment_buffer>
			modify_led_segment_buffer(SIDE_B, modifyValue);
 8000de8:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <fsm_traffic_light_system+0x108>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	f7ff fcd8 	bl	80007a4 <modify_led_segment_buffer>
		break;
 8000df4:	e02e      	b.n	8000e54 <fsm_traffic_light_system+0xf4>
		if(system.mode != NORMAL){
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <fsm_traffic_light_system+0x104>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d027      	beq.n	8000e4e <fsm_traffic_light_system+0xee>
			modifyValue = (modifyValue + 1) % DEFAULT_MODIFY_VALUE;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <fsm_traffic_light_system+0x108>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <fsm_traffic_light_system+0x10c>)
 8000e06:	fb82 1203 	smull	r1, r2, r2, r3
 8000e0a:	1151      	asrs	r1, r2, #5
 8000e0c:	17da      	asrs	r2, r3, #31
 8000e0e:	1a8a      	subs	r2, r1, r2
 8000e10:	2164      	movs	r1, #100	; 0x64
 8000e12:	fb01 f202 	mul.w	r2, r1, r2
 8000e16:	1a9a      	subs	r2, r3, r2
 8000e18:	b292      	uxth	r2, r2
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <fsm_traffic_light_system+0x108>)
 8000e1c:	801a      	strh	r2, [r3, #0]
			modify_led_segment_buffer(SIDE_B, modifyValue);
 8000e1e:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <fsm_traffic_light_system+0x108>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	4619      	mov	r1, r3
 8000e24:	2001      	movs	r0, #1
 8000e26:	f7ff fcbd 	bl	80007a4 <modify_led_segment_buffer>
		break;
 8000e2a:	e010      	b.n	8000e4e <fsm_traffic_light_system+0xee>
		if(system.mode != NORMAL){
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <fsm_traffic_light_system+0x104>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d00e      	beq.n	8000e52 <fsm_traffic_light_system+0xf2>
			system.countDownLimit[system.mode - 1] = modifyValue;
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <fsm_traffic_light_system+0x104>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <fsm_traffic_light_system+0x108>)
 8000e3c:	8811      	ldrh	r1, [r2, #0]
 8000e3e:	4a09      	ldr	r2, [pc, #36]	; (8000e64 <fsm_traffic_light_system+0x104>)
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4413      	add	r3, r2
 8000e44:	460a      	mov	r2, r1
 8000e46:	805a      	strh	r2, [r3, #2]
		break;
 8000e48:	e003      	b.n	8000e52 <fsm_traffic_light_system+0xf2>
	default: break;
 8000e4a:	bf00      	nop
 8000e4c:	e002      	b.n	8000e54 <fsm_traffic_light_system+0xf4>
		break;
 8000e4e:	bf00      	nop
 8000e50:	e000      	b.n	8000e54 <fsm_traffic_light_system+0xf4>
		break;
 8000e52:	bf00      	nop
	}
	button_to_response = NONE;// Reset response trigger
 8000e54:	4b02      	ldr	r3, [pc, #8]	; (8000e60 <fsm_traffic_light_system+0x100>)
 8000e56:	2203      	movs	r2, #3
 8000e58:	701a      	strb	r2, [r3, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2000002c 	.word	0x2000002c
 8000e64:	20000144 	.word	0x20000144
 8000e68:	2000002e 	.word	0x2000002e
 8000e6c:	51eb851f 	.word	0x51eb851f

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e74:	f000 f9b4 	bl	80011e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e78:	f000 f80e 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7c:	f000 f894 	bl	8000fa8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e80:	f000 f846 	bl	8000f10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e84:	4803      	ldr	r0, [pc, #12]	; (8000e94 <main+0x24>)
 8000e86:	f001 f8f1 	bl	800206c <HAL_TIM_Base_Start_IT>
  init_fsm_traffic_light_system();
 8000e8a:	f7ff ff2d 	bl	8000ce8 <init_fsm_traffic_light_system>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_traffic_light_system();
 8000e8e:	f7ff ff67 	bl	8000d60 <fsm_traffic_light_system>
 8000e92:	e7fc      	b.n	8000e8e <main+0x1e>
 8000e94:	20000154 	.word	0x20000154

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b090      	sub	sp, #64	; 0x40
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 0318 	add.w	r3, r7, #24
 8000ea2:	2228      	movs	r2, #40	; 0x28
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f001 fc9c 	bl	80027e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec2:	2310      	movs	r3, #16
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eca:	f107 0318 	add.w	r3, r7, #24
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fca0 	bl	8001814 <HAL_RCC_OscConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000eda:	f000 f8c7 	bl	800106c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ede:	230f      	movs	r3, #15
 8000ee0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 ff0c 	bl	8001d14 <HAL_RCC_ClockConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f02:	f000 f8b3 	bl	800106c <Error_Handler>
  }
}
 8000f06:	bf00      	nop
 8000f08:	3740      	adds	r7, #64	; 0x40
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f16:	f107 0308 	add.w	r3, r7, #8
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f24:	463b      	mov	r3, r7
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_TIM2_Init+0x94>)
 8000f2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <MX_TIM2_Init+0x94>)
 8000f36:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <MX_TIM2_Init+0x94>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <MX_TIM2_Init+0x94>)
 8000f44:	2209      	movs	r2, #9
 8000f46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <MX_TIM2_Init+0x94>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <MX_TIM2_Init+0x94>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f54:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <MX_TIM2_Init+0x94>)
 8000f56:	f001 f839 	bl	8001fcc <HAL_TIM_Base_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f60:	f000 f884 	bl	800106c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <MX_TIM2_Init+0x94>)
 8000f72:	f001 f9cf 	bl	8002314 <HAL_TIM_ConfigClockSource>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f7c:	f000 f876 	bl	800106c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f80:	2300      	movs	r3, #0
 8000f82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_TIM2_Init+0x94>)
 8000f8e:	f001 fb9b 	bl	80026c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f98:	f000 f868 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000154 	.word	0x20000154

08000fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	4b28      	ldr	r3, [pc, #160]	; (8001060 <MX_GPIO_Init+0xb8>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a27      	ldr	r2, [pc, #156]	; (8001060 <MX_GPIO_Init+0xb8>)
 8000fc2:	f043 0304 	orr.w	r3, r3, #4
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b25      	ldr	r3, [pc, #148]	; (8001060 <MX_GPIO_Init+0xb8>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <MX_GPIO_Init+0xb8>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a21      	ldr	r2, [pc, #132]	; (8001060 <MX_GPIO_Init+0xb8>)
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <MX_GPIO_Init+0xb8>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_0_Pin|GREEN_0_Pin|AMBER_0_Pin|RED_1_Pin
 8000fec:	2200      	movs	r2, #0
 8000fee:	217e      	movs	r1, #126	; 0x7e
 8000ff0:	481c      	ldr	r0, [pc, #112]	; (8001064 <MX_GPIO_Init+0xbc>)
 8000ff2:	f000 fbf6 	bl	80017e2 <HAL_GPIO_WritePin>
                          |GREEN_1_Pin|AMBER_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|EN1_RIGHT_Pin
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000ffc:	481a      	ldr	r0, [pc, #104]	; (8001068 <MX_GPIO_Init+0xc0>)
 8000ffe:	f000 fbf0 	bl	80017e2 <HAL_GPIO_WritePin>
                          |SEG_D_Pin|SEG_E_Pin|SEG_F_Pin|SEG_G_Pin
                          |EN0_LEFT_Pin|EN0_RIGHT_Pin|EN1_LEFT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_0_Pin GREEN_0_Pin AMBER_0_Pin RED_1_Pin
                           GREEN_1_Pin AMBER_1_Pin */
  GPIO_InitStruct.Pin = RED_0_Pin|GREEN_0_Pin|AMBER_0_Pin|RED_1_Pin
 8001002:	237e      	movs	r3, #126	; 0x7e
 8001004:	60bb      	str	r3, [r7, #8]
                          |GREEN_1_Pin|AMBER_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2302      	movs	r3, #2
 8001010:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	4619      	mov	r1, r3
 8001018:	4812      	ldr	r0, [pc, #72]	; (8001064 <MX_GPIO_Init+0xbc>)
 800101a:	f000 fa51 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin EN1_RIGHT_Pin
                           SEG_D_Pin SEG_E_Pin SEG_F_Pin SEG_G_Pin
                           EN0_LEFT_Pin EN0_RIGHT_Pin EN1_LEFT_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|EN1_RIGHT_Pin
 800101e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001022:	60bb      	str	r3, [r7, #8]
                          |SEG_D_Pin|SEG_E_Pin|SEG_F_Pin|SEG_G_Pin
                          |EN0_LEFT_Pin|EN0_RIGHT_Pin|EN1_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2302      	movs	r3, #2
 800102e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	4619      	mov	r1, r3
 8001036:	480c      	ldr	r0, [pc, #48]	; (8001068 <MX_GPIO_Init+0xc0>)
 8001038:	f000 fa42 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 800103c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001040:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001046:	2301      	movs	r3, #1
 8001048:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_GPIO_Init+0xc0>)
 8001052:	f000 fa35 	bl	80014c0 <HAL_GPIO_Init>

}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000
 8001064:	40010800 	.word	0x40010800
 8001068:	40010c00 	.word	0x40010c00

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001074:	e7fe      	b.n	8001074 <Error_Handler+0x8>
	...

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_MspInit+0x5c>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <HAL_MspInit+0x5c>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6193      	str	r3, [r2, #24]
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_MspInit+0x5c>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <HAL_MspInit+0x5c>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <HAL_MspInit+0x5c>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	61d3      	str	r3, [r2, #28]
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_MspInit+0x5c>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_MspInit+0x60>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_MspInit+0x60>)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010000 	.word	0x40010000

080010dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010ec:	d113      	bne.n	8001116 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <HAL_TIM_Base_MspInit+0x44>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <HAL_TIM_Base_MspInit+0x44>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	61d3      	str	r3, [r2, #28]
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_TIM_Base_MspInit+0x44>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	201c      	movs	r0, #28
 800110c:	f000 f9a1 	bl	8001452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001110:	201c      	movs	r0, #28
 8001112:	f000 f9ba 	bl	800148a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000

08001124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <NMI_Handler+0x4>

0800112a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <MemManage_Handler+0x4>

08001136 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <BusFault_Handler+0x4>

0800113c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <UsageFault_Handler+0x4>

08001142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr

0800114e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr

08001166 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116a:	f000 f87f 	bl	800126c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <TIM2_IRQHandler+0x10>)
 800117a:	f000 ffc3 	bl	8002104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000154 	.word	0x20000154

08001188 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001194:	f7ff fff8 	bl	8001188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001198:	480b      	ldr	r0, [pc, #44]	; (80011c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800119a:	490c      	ldr	r1, [pc, #48]	; (80011cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800119c:	4a0c      	ldr	r2, [pc, #48]	; (80011d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a0:	e002      	b.n	80011a8 <LoopCopyDataInit>

080011a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a6:	3304      	adds	r3, #4

080011a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ac:	d3f9      	bcc.n	80011a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ae:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011b0:	4c09      	ldr	r4, [pc, #36]	; (80011d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b4:	e001      	b.n	80011ba <LoopFillZerobss>

080011b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b8:	3204      	adds	r2, #4

080011ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011bc:	d3fb      	bcc.n	80011b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011be:	f001 faed 	bl	800279c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011c2:	f7ff fe55 	bl	8000e70 <main>
  bx lr
 80011c6:	4770      	bx	lr
  ldr r0, =_sdata
 80011c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011cc:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80011d0:	080028a0 	.word	0x080028a0
  ldr r2, =_sbss
 80011d4:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80011d8:	200001a0 	.word	0x200001a0

080011dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <ADC1_2_IRQHandler>
	...

080011e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_Init+0x28>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <HAL_Init+0x28>)
 80011ea:	f043 0310 	orr.w	r3, r3, #16
 80011ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f0:	2003      	movs	r0, #3
 80011f2:	f000 f923 	bl	800143c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f6:	200f      	movs	r0, #15
 80011f8:	f000 f808 	bl	800120c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011fc:	f7ff ff3c 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40022000 	.word	0x40022000

0800120c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x54>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_InitTick+0x58>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001222:	fbb3 f3f1 	udiv	r3, r3, r1
 8001226:	fbb2 f3f3 	udiv	r3, r2, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f93b 	bl	80014a6 <HAL_SYSTICK_Config>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e00e      	b.n	8001258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b0f      	cmp	r3, #15
 800123e:	d80a      	bhi.n	8001256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001240:	2200      	movs	r2, #0
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f000 f903 	bl	8001452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800124c:	4a06      	ldr	r2, [pc, #24]	; (8001268 <HAL_InitTick+0x5c>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	e000      	b.n	8001258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000030 	.word	0x20000030
 8001264:	20000038 	.word	0x20000038
 8001268:	20000034 	.word	0x20000034

0800126c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_IncTick+0x1c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_IncTick+0x20>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a03      	ldr	r2, [pc, #12]	; (800128c <HAL_IncTick+0x20>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	20000038 	.word	0x20000038
 800128c:	2000019c 	.word	0x2000019c

08001290 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b02      	ldr	r3, [pc, #8]	; (80012a0 <HAL_GetTick+0x10>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	2000019c 	.word	0x2000019c

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	2b00      	cmp	r3, #0
 8001318:	db0b      	blt.n	8001332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 021f 	and.w	r2, r3, #31
 8001320:	4906      	ldr	r1, [pc, #24]	; (800133c <__NVIC_EnableIRQ+0x34>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	2001      	movs	r0, #1
 800132a:	fa00 f202 	lsl.w	r2, r0, r2
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	; (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	; (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	bf28      	it	cs
 80013b2:	2304      	movcs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d902      	bls.n	80013c4 <NVIC_EncodePriority+0x30>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3b03      	subs	r3, #3
 80013c2:	e000      	b.n	80013c6 <NVIC_EncodePriority+0x32>
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	4313      	orrs	r3, r2
         );
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3724      	adds	r7, #36	; 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001408:	d301      	bcc.n	800140e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140a:	2301      	movs	r3, #1
 800140c:	e00f      	b.n	800142e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <SysTick_Config+0x40>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001416:	210f      	movs	r1, #15
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f7ff ff90 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <SysTick_Config+0x40>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <SysTick_Config+0x40>)
 8001428:	2207      	movs	r2, #7
 800142a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000e010 	.word	0xe000e010

0800143c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff2d 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001464:	f7ff ff42 	bl	80012ec <__NVIC_GetPriorityGrouping>
 8001468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff ff90 	bl	8001394 <NVIC_EncodePriority>
 8001474:	4602      	mov	r2, r0
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff5f 	bl	8001340 <__NVIC_SetPriority>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff35 	bl	8001308 <__NVIC_EnableIRQ>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ffa2 	bl	80013f8 <SysTick_Config>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b08b      	sub	sp, #44	; 0x2c
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d2:	e148      	b.n	8001766 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014d4:	2201      	movs	r2, #1
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	69fa      	ldr	r2, [r7, #28]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	f040 8137 	bne.w	8001760 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4aa3      	ldr	r2, [pc, #652]	; (8001784 <HAL_GPIO_Init+0x2c4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d05e      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
 80014fc:	4aa1      	ldr	r2, [pc, #644]	; (8001784 <HAL_GPIO_Init+0x2c4>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d875      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 8001502:	4aa1      	ldr	r2, [pc, #644]	; (8001788 <HAL_GPIO_Init+0x2c8>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d058      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
 8001508:	4a9f      	ldr	r2, [pc, #636]	; (8001788 <HAL_GPIO_Init+0x2c8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d86f      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 800150e:	4a9f      	ldr	r2, [pc, #636]	; (800178c <HAL_GPIO_Init+0x2cc>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d052      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
 8001514:	4a9d      	ldr	r2, [pc, #628]	; (800178c <HAL_GPIO_Init+0x2cc>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d869      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 800151a:	4a9d      	ldr	r2, [pc, #628]	; (8001790 <HAL_GPIO_Init+0x2d0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d04c      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
 8001520:	4a9b      	ldr	r2, [pc, #620]	; (8001790 <HAL_GPIO_Init+0x2d0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d863      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 8001526:	4a9b      	ldr	r2, [pc, #620]	; (8001794 <HAL_GPIO_Init+0x2d4>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d046      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
 800152c:	4a99      	ldr	r2, [pc, #612]	; (8001794 <HAL_GPIO_Init+0x2d4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d85d      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 8001532:	2b12      	cmp	r3, #18
 8001534:	d82a      	bhi.n	800158c <HAL_GPIO_Init+0xcc>
 8001536:	2b12      	cmp	r3, #18
 8001538:	d859      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 800153a:	a201      	add	r2, pc, #4	; (adr r2, 8001540 <HAL_GPIO_Init+0x80>)
 800153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001540:	080015bb 	.word	0x080015bb
 8001544:	08001595 	.word	0x08001595
 8001548:	080015a7 	.word	0x080015a7
 800154c:	080015e9 	.word	0x080015e9
 8001550:	080015ef 	.word	0x080015ef
 8001554:	080015ef 	.word	0x080015ef
 8001558:	080015ef 	.word	0x080015ef
 800155c:	080015ef 	.word	0x080015ef
 8001560:	080015ef 	.word	0x080015ef
 8001564:	080015ef 	.word	0x080015ef
 8001568:	080015ef 	.word	0x080015ef
 800156c:	080015ef 	.word	0x080015ef
 8001570:	080015ef 	.word	0x080015ef
 8001574:	080015ef 	.word	0x080015ef
 8001578:	080015ef 	.word	0x080015ef
 800157c:	080015ef 	.word	0x080015ef
 8001580:	080015ef 	.word	0x080015ef
 8001584:	0800159d 	.word	0x0800159d
 8001588:	080015b1 	.word	0x080015b1
 800158c:	4a82      	ldr	r2, [pc, #520]	; (8001798 <HAL_GPIO_Init+0x2d8>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d013      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001592:	e02c      	b.n	80015ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	623b      	str	r3, [r7, #32]
          break;
 800159a:	e029      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	3304      	adds	r3, #4
 80015a2:	623b      	str	r3, [r7, #32]
          break;
 80015a4:	e024      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	3308      	adds	r3, #8
 80015ac:	623b      	str	r3, [r7, #32]
          break;
 80015ae:	e01f      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	330c      	adds	r3, #12
 80015b6:	623b      	str	r3, [r7, #32]
          break;
 80015b8:	e01a      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d102      	bne.n	80015c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015c2:	2304      	movs	r3, #4
 80015c4:	623b      	str	r3, [r7, #32]
          break;
 80015c6:	e013      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d105      	bne.n	80015dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d0:	2308      	movs	r3, #8
 80015d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	611a      	str	r2, [r3, #16]
          break;
 80015da:	e009      	b.n	80015f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015dc:	2308      	movs	r3, #8
 80015de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	615a      	str	r2, [r3, #20]
          break;
 80015e6:	e003      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
          break;
 80015ec:	e000      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          break;
 80015ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2bff      	cmp	r3, #255	; 0xff
 80015f4:	d801      	bhi.n	80015fa <HAL_GPIO_Init+0x13a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	e001      	b.n	80015fe <HAL_GPIO_Init+0x13e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3304      	adds	r3, #4
 80015fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2bff      	cmp	r3, #255	; 0xff
 8001604:	d802      	bhi.n	800160c <HAL_GPIO_Init+0x14c>
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	e002      	b.n	8001612 <HAL_GPIO_Init+0x152>
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	3b08      	subs	r3, #8
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	210f      	movs	r1, #15
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	fa01 f303 	lsl.w	r3, r1, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	401a      	ands	r2, r3
 8001624:	6a39      	ldr	r1, [r7, #32]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	431a      	orrs	r2, r3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 8090 	beq.w	8001760 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001640:	4b56      	ldr	r3, [pc, #344]	; (800179c <HAL_GPIO_Init+0x2dc>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a55      	ldr	r2, [pc, #340]	; (800179c <HAL_GPIO_Init+0x2dc>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b53      	ldr	r3, [pc, #332]	; (800179c <HAL_GPIO_Init+0x2dc>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001658:	4a51      	ldr	r2, [pc, #324]	; (80017a0 <HAL_GPIO_Init+0x2e0>)
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001664:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	220f      	movs	r2, #15
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4013      	ands	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a49      	ldr	r2, [pc, #292]	; (80017a4 <HAL_GPIO_Init+0x2e4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d00d      	beq.n	80016a0 <HAL_GPIO_Init+0x1e0>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a48      	ldr	r2, [pc, #288]	; (80017a8 <HAL_GPIO_Init+0x2e8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d007      	beq.n	800169c <HAL_GPIO_Init+0x1dc>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a47      	ldr	r2, [pc, #284]	; (80017ac <HAL_GPIO_Init+0x2ec>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d101      	bne.n	8001698 <HAL_GPIO_Init+0x1d8>
 8001694:	2302      	movs	r3, #2
 8001696:	e004      	b.n	80016a2 <HAL_GPIO_Init+0x1e2>
 8001698:	2303      	movs	r3, #3
 800169a:	e002      	b.n	80016a2 <HAL_GPIO_Init+0x1e2>
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <HAL_GPIO_Init+0x1e2>
 80016a0:	2300      	movs	r3, #0
 80016a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a4:	f002 0203 	and.w	r2, r2, #3
 80016a8:	0092      	lsls	r2, r2, #2
 80016aa:	4093      	lsls	r3, r2
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016b2:	493b      	ldr	r1, [pc, #236]	; (80017a0 <HAL_GPIO_Init+0x2e0>)
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	3302      	adds	r3, #2
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d006      	beq.n	80016da <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016cc:	4b38      	ldr	r3, [pc, #224]	; (80017b0 <HAL_GPIO_Init+0x2f0>)
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	4937      	ldr	r1, [pc, #220]	; (80017b0 <HAL_GPIO_Init+0x2f0>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	608b      	str	r3, [r1, #8]
 80016d8:	e006      	b.n	80016e8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016da:	4b35      	ldr	r3, [pc, #212]	; (80017b0 <HAL_GPIO_Init+0x2f0>)
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	4933      	ldr	r1, [pc, #204]	; (80017b0 <HAL_GPIO_Init+0x2f0>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d006      	beq.n	8001702 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016f4:	4b2e      	ldr	r3, [pc, #184]	; (80017b0 <HAL_GPIO_Init+0x2f0>)
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	492d      	ldr	r1, [pc, #180]	; (80017b0 <HAL_GPIO_Init+0x2f0>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	60cb      	str	r3, [r1, #12]
 8001700:	e006      	b.n	8001710 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001702:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <HAL_GPIO_Init+0x2f0>)
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	43db      	mvns	r3, r3
 800170a:	4929      	ldr	r1, [pc, #164]	; (80017b0 <HAL_GPIO_Init+0x2f0>)
 800170c:	4013      	ands	r3, r2
 800170e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d006      	beq.n	800172a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800171c:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <HAL_GPIO_Init+0x2f0>)
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	4923      	ldr	r1, [pc, #140]	; (80017b0 <HAL_GPIO_Init+0x2f0>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
 8001728:	e006      	b.n	8001738 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <HAL_GPIO_Init+0x2f0>)
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	43db      	mvns	r3, r3
 8001732:	491f      	ldr	r1, [pc, #124]	; (80017b0 <HAL_GPIO_Init+0x2f0>)
 8001734:	4013      	ands	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d006      	beq.n	8001752 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001744:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <HAL_GPIO_Init+0x2f0>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4919      	ldr	r1, [pc, #100]	; (80017b0 <HAL_GPIO_Init+0x2f0>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	600b      	str	r3, [r1, #0]
 8001750:	e006      	b.n	8001760 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <HAL_GPIO_Init+0x2f0>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	43db      	mvns	r3, r3
 800175a:	4915      	ldr	r1, [pc, #84]	; (80017b0 <HAL_GPIO_Init+0x2f0>)
 800175c:	4013      	ands	r3, r2
 800175e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	3301      	adds	r3, #1
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	fa22 f303 	lsr.w	r3, r2, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	f47f aeaf 	bne.w	80014d4 <HAL_GPIO_Init+0x14>
  }
}
 8001776:	bf00      	nop
 8001778:	bf00      	nop
 800177a:	372c      	adds	r7, #44	; 0x2c
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	10320000 	.word	0x10320000
 8001788:	10310000 	.word	0x10310000
 800178c:	10220000 	.word	0x10220000
 8001790:	10210000 	.word	0x10210000
 8001794:	10120000 	.word	0x10120000
 8001798:	10110000 	.word	0x10110000
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010000 	.word	0x40010000
 80017a4:	40010800 	.word	0x40010800
 80017a8:	40010c00 	.word	0x40010c00
 80017ac:	40011000 	.word	0x40011000
 80017b0:	40010400 	.word	0x40010400

080017b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	887b      	ldrh	r3, [r7, #2]
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d002      	beq.n	80017d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
 80017d0:	e001      	b.n	80017d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr

080017e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	460b      	mov	r3, r1
 80017ec:	807b      	strh	r3, [r7, #2]
 80017ee:	4613      	mov	r3, r2
 80017f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017f2:	787b      	ldrb	r3, [r7, #1]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f8:	887a      	ldrh	r2, [r7, #2]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017fe:	e003      	b.n	8001808 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001800:	887b      	ldrh	r3, [r7, #2]
 8001802:	041a      	lsls	r2, r3, #16
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	611a      	str	r2, [r3, #16]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
	...

08001814 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e26c      	b.n	8001d00 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8087 	beq.w	8001942 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001834:	4b92      	ldr	r3, [pc, #584]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 030c 	and.w	r3, r3, #12
 800183c:	2b04      	cmp	r3, #4
 800183e:	d00c      	beq.n	800185a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001840:	4b8f      	ldr	r3, [pc, #572]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 030c 	and.w	r3, r3, #12
 8001848:	2b08      	cmp	r3, #8
 800184a:	d112      	bne.n	8001872 <HAL_RCC_OscConfig+0x5e>
 800184c:	4b8c      	ldr	r3, [pc, #560]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001858:	d10b      	bne.n	8001872 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185a:	4b89      	ldr	r3, [pc, #548]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d06c      	beq.n	8001940 <HAL_RCC_OscConfig+0x12c>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d168      	bne.n	8001940 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e246      	b.n	8001d00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800187a:	d106      	bne.n	800188a <HAL_RCC_OscConfig+0x76>
 800187c:	4b80      	ldr	r3, [pc, #512]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a7f      	ldr	r2, [pc, #508]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e02e      	b.n	80018e8 <HAL_RCC_OscConfig+0xd4>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10c      	bne.n	80018ac <HAL_RCC_OscConfig+0x98>
 8001892:	4b7b      	ldr	r3, [pc, #492]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a7a      	ldr	r2, [pc, #488]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b78      	ldr	r3, [pc, #480]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a77      	ldr	r2, [pc, #476]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e01d      	b.n	80018e8 <HAL_RCC_OscConfig+0xd4>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b4:	d10c      	bne.n	80018d0 <HAL_RCC_OscConfig+0xbc>
 80018b6:	4b72      	ldr	r3, [pc, #456]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a71      	ldr	r2, [pc, #452]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	4b6f      	ldr	r3, [pc, #444]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a6e      	ldr	r2, [pc, #440]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	e00b      	b.n	80018e8 <HAL_RCC_OscConfig+0xd4>
 80018d0:	4b6b      	ldr	r3, [pc, #428]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a6a      	ldr	r2, [pc, #424]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	4b68      	ldr	r3, [pc, #416]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a67      	ldr	r2, [pc, #412]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d013      	beq.n	8001918 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fcce 	bl	8001290 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f8:	f7ff fcca 	bl	8001290 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	; 0x64
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e1fa      	b.n	8001d00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	4b5d      	ldr	r3, [pc, #372]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0xe4>
 8001916:	e014      	b.n	8001942 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff fcba 	bl	8001290 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001920:	f7ff fcb6 	bl	8001290 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b64      	cmp	r3, #100	; 0x64
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e1e6      	b.n	8001d00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001932:	4b53      	ldr	r3, [pc, #332]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x10c>
 800193e:	e000      	b.n	8001942 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d063      	beq.n	8001a16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800194e:	4b4c      	ldr	r3, [pc, #304]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 030c 	and.w	r3, r3, #12
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00b      	beq.n	8001972 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800195a:	4b49      	ldr	r3, [pc, #292]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b08      	cmp	r3, #8
 8001964:	d11c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x18c>
 8001966:	4b46      	ldr	r3, [pc, #280]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d116      	bne.n	80019a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001972:	4b43      	ldr	r3, [pc, #268]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d005      	beq.n	800198a <HAL_RCC_OscConfig+0x176>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d001      	beq.n	800198a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e1ba      	b.n	8001d00 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198a:	4b3d      	ldr	r3, [pc, #244]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4939      	ldr	r1, [pc, #228]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199e:	e03a      	b.n	8001a16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d020      	beq.n	80019ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a8:	4b36      	ldr	r3, [pc, #216]	; (8001a84 <HAL_RCC_OscConfig+0x270>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ae:	f7ff fc6f 	bl	8001290 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b6:	f7ff fc6b 	bl	8001290 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e19b      	b.n	8001d00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c8:	4b2d      	ldr	r3, [pc, #180]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d4:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4927      	ldr	r1, [pc, #156]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	600b      	str	r3, [r1, #0]
 80019e8:	e015      	b.n	8001a16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ea:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <HAL_RCC_OscConfig+0x270>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fc4e 	bl	8001290 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f8:	f7ff fc4a 	bl	8001290 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e17a      	b.n	8001d00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d03a      	beq.n	8001a98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d019      	beq.n	8001a5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2a:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <HAL_RCC_OscConfig+0x274>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a30:	f7ff fc2e 	bl	8001290 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a38:	f7ff fc2a 	bl	8001290 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e15a      	b.n	8001d00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a56:	2001      	movs	r0, #1
 8001a58:	f000 fa9a 	bl	8001f90 <RCC_Delay>
 8001a5c:	e01c      	b.n	8001a98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_RCC_OscConfig+0x274>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a64:	f7ff fc14 	bl	8001290 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a6a:	e00f      	b.n	8001a8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6c:	f7ff fc10 	bl	8001290 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d908      	bls.n	8001a8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e140      	b.n	8001d00 <HAL_RCC_OscConfig+0x4ec>
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000
 8001a84:	42420000 	.word	0x42420000
 8001a88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8c:	4b9e      	ldr	r3, [pc, #632]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1e9      	bne.n	8001a6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 80a6 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aaa:	4b97      	ldr	r3, [pc, #604]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10d      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b94      	ldr	r3, [pc, #592]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a93      	ldr	r2, [pc, #588]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	61d3      	str	r3, [r2, #28]
 8001ac2:	4b91      	ldr	r3, [pc, #580]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad2:	4b8e      	ldr	r3, [pc, #568]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d118      	bne.n	8001b10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ade:	4b8b      	ldr	r3, [pc, #556]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a8a      	ldr	r2, [pc, #552]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aea:	f7ff fbd1 	bl	8001290 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af2:	f7ff fbcd 	bl	8001290 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b64      	cmp	r3, #100	; 0x64
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e0fd      	b.n	8001d00 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	4b81      	ldr	r3, [pc, #516]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x312>
 8001b18:	4b7b      	ldr	r3, [pc, #492]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	4a7a      	ldr	r2, [pc, #488]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6213      	str	r3, [r2, #32]
 8001b24:	e02d      	b.n	8001b82 <HAL_RCC_OscConfig+0x36e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x334>
 8001b2e:	4b76      	ldr	r3, [pc, #472]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	4a75      	ldr	r2, [pc, #468]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	f023 0301 	bic.w	r3, r3, #1
 8001b38:	6213      	str	r3, [r2, #32]
 8001b3a:	4b73      	ldr	r3, [pc, #460]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	4a72      	ldr	r2, [pc, #456]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	f023 0304 	bic.w	r3, r3, #4
 8001b44:	6213      	str	r3, [r2, #32]
 8001b46:	e01c      	b.n	8001b82 <HAL_RCC_OscConfig+0x36e>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d10c      	bne.n	8001b6a <HAL_RCC_OscConfig+0x356>
 8001b50:	4b6d      	ldr	r3, [pc, #436]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	4a6c      	ldr	r2, [pc, #432]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001b56:	f043 0304 	orr.w	r3, r3, #4
 8001b5a:	6213      	str	r3, [r2, #32]
 8001b5c:	4b6a      	ldr	r3, [pc, #424]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4a69      	ldr	r2, [pc, #420]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6213      	str	r3, [r2, #32]
 8001b68:	e00b      	b.n	8001b82 <HAL_RCC_OscConfig+0x36e>
 8001b6a:	4b67      	ldr	r3, [pc, #412]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	4a66      	ldr	r2, [pc, #408]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	f023 0301 	bic.w	r3, r3, #1
 8001b74:	6213      	str	r3, [r2, #32]
 8001b76:	4b64      	ldr	r3, [pc, #400]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	4a63      	ldr	r2, [pc, #396]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	f023 0304 	bic.w	r3, r3, #4
 8001b80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d015      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fb81 	bl	8001290 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b90:	e00a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b92:	f7ff fb7d 	bl	8001290 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e0ab      	b.n	8001d00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba8:	4b57      	ldr	r3, [pc, #348]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0ee      	beq.n	8001b92 <HAL_RCC_OscConfig+0x37e>
 8001bb4:	e014      	b.n	8001be0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff fb6b 	bl	8001290 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbc:	e00a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbe:	f7ff fb67 	bl	8001290 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e095      	b.n	8001d00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd4:	4b4c      	ldr	r3, [pc, #304]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1ee      	bne.n	8001bbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001be0:	7dfb      	ldrb	r3, [r7, #23]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d105      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be6:	4b48      	ldr	r3, [pc, #288]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	4a47      	ldr	r2, [pc, #284]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 8081 	beq.w	8001cfe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bfc:	4b42      	ldr	r3, [pc, #264]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d061      	beq.n	8001ccc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d146      	bne.n	8001c9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c10:	4b3f      	ldr	r3, [pc, #252]	; (8001d10 <HAL_RCC_OscConfig+0x4fc>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c16:	f7ff fb3b 	bl	8001290 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1e:	f7ff fb37 	bl	8001290 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e067      	b.n	8001d00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c30:	4b35      	ldr	r3, [pc, #212]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f0      	bne.n	8001c1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c44:	d108      	bne.n	8001c58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c46:	4b30      	ldr	r3, [pc, #192]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	492d      	ldr	r1, [pc, #180]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c58:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a19      	ldr	r1, [r3, #32]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	430b      	orrs	r3, r1
 8001c6a:	4927      	ldr	r1, [pc, #156]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c70:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <HAL_RCC_OscConfig+0x4fc>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff fb0b 	bl	8001290 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff fb07 	bl	8001290 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e037      	b.n	8001d00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c90:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x46a>
 8001c9c:	e02f      	b.n	8001cfe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <HAL_RCC_OscConfig+0x4fc>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff faf4 	bl	8001290 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cac:	f7ff faf0 	bl	8001290 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e020      	b.n	8001d00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbe:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x498>
 8001cca:	e018      	b.n	8001cfe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e013      	b.n	8001d00 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_RCC_OscConfig+0x4f4>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d106      	bne.n	8001cfa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d001      	beq.n	8001cfe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40007000 	.word	0x40007000
 8001d10:	42420060 	.word	0x42420060

08001d14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e0d0      	b.n	8001eca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d28:	4b6a      	ldr	r3, [pc, #424]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d910      	bls.n	8001d58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d36:	4b67      	ldr	r3, [pc, #412]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 0207 	bic.w	r2, r3, #7
 8001d3e:	4965      	ldr	r1, [pc, #404]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d46:	4b63      	ldr	r3, [pc, #396]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0b8      	b.n	8001eca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d020      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d70:	4b59      	ldr	r3, [pc, #356]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	4a58      	ldr	r2, [pc, #352]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d88:	4b53      	ldr	r3, [pc, #332]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	4a52      	ldr	r2, [pc, #328]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d94:	4b50      	ldr	r3, [pc, #320]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	494d      	ldr	r1, [pc, #308]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d040      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d107      	bne.n	8001dca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dba:	4b47      	ldr	r3, [pc, #284]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d115      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e07f      	b.n	8001eca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d107      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd2:	4b41      	ldr	r3, [pc, #260]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d109      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e073      	b.n	8001eca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de2:	4b3d      	ldr	r3, [pc, #244]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e06b      	b.n	8001eca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001df2:	4b39      	ldr	r3, [pc, #228]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f023 0203 	bic.w	r2, r3, #3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	4936      	ldr	r1, [pc, #216]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e04:	f7ff fa44 	bl	8001290 <HAL_GetTick>
 8001e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0a:	e00a      	b.n	8001e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e0c:	f7ff fa40 	bl	8001290 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e053      	b.n	8001eca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e22:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 020c 	and.w	r2, r3, #12
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d1eb      	bne.n	8001e0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e34:	4b27      	ldr	r3, [pc, #156]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d210      	bcs.n	8001e64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e42:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 0207 	bic.w	r2, r3, #7
 8001e4a:	4922      	ldr	r1, [pc, #136]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d001      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e032      	b.n	8001eca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e70:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4916      	ldr	r1, [pc, #88]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d009      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e8e:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	490e      	ldr	r1, [pc, #56]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ea2:	f000 f821 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	490a      	ldr	r1, [pc, #40]	; (8001edc <HAL_RCC_ClockConfig+0x1c8>)
 8001eb4:	5ccb      	ldrb	r3, [r1, r3]
 8001eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eba:	4a09      	ldr	r2, [pc, #36]	; (8001ee0 <HAL_RCC_ClockConfig+0x1cc>)
 8001ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f9a2 	bl	800120c <HAL_InitTick>

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40022000 	.word	0x40022000
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	08002874 	.word	0x08002874
 8001ee0:	20000030 	.word	0x20000030
 8001ee4:	20000034 	.word	0x20000034

08001ee8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	2300      	movs	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f02:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d002      	beq.n	8001f18 <HAL_RCC_GetSysClockFreq+0x30>
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d003      	beq.n	8001f1e <HAL_RCC_GetSysClockFreq+0x36>
 8001f16:	e027      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f18:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f1a:	613b      	str	r3, [r7, #16]
      break;
 8001f1c:	e027      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	0c9b      	lsrs	r3, r3, #18
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	4a17      	ldr	r2, [pc, #92]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f28:	5cd3      	ldrb	r3, [r2, r3]
 8001f2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d010      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	0c5b      	lsrs	r3, r3, #17
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	4a11      	ldr	r2, [pc, #68]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f42:	5cd3      	ldrb	r3, [r2, r3]
 8001f44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a0d      	ldr	r2, [pc, #52]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f4a:	fb02 f203 	mul.w	r2, r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	e004      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f5c:	fb02 f303 	mul.w	r3, r2, r3
 8001f60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	613b      	str	r3, [r7, #16]
      break;
 8001f66:	e002      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f6a:	613b      	str	r3, [r7, #16]
      break;
 8001f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6e:	693b      	ldr	r3, [r7, #16]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	371c      	adds	r7, #28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	007a1200 	.word	0x007a1200
 8001f84:	08002884 	.word	0x08002884
 8001f88:	08002894 	.word	0x08002894
 8001f8c:	003d0900 	.word	0x003d0900

08001f90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <RCC_Delay+0x34>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <RCC_Delay+0x38>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	0a5b      	lsrs	r3, r3, #9
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fac:	bf00      	nop
  }
  while (Delay --);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1e5a      	subs	r2, r3, #1
 8001fb2:	60fa      	str	r2, [r7, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f9      	bne.n	8001fac <RCC_Delay+0x1c>
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	20000030 	.word	0x20000030
 8001fc8:	10624dd3 	.word	0x10624dd3

08001fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e041      	b.n	8002062 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d106      	bne.n	8001ff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff f872 	bl	80010dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3304      	adds	r3, #4
 8002008:	4619      	mov	r1, r3
 800200a:	4610      	mov	r0, r2
 800200c:	f000 fa6e 	bl	80024ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b01      	cmp	r3, #1
 800207e:	d001      	beq.n	8002084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e035      	b.n	80020f0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2202      	movs	r2, #2
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a16      	ldr	r2, [pc, #88]	; (80020fc <HAL_TIM_Base_Start_IT+0x90>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d009      	beq.n	80020ba <HAL_TIM_Base_Start_IT+0x4e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ae:	d004      	beq.n	80020ba <HAL_TIM_Base_Start_IT+0x4e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a12      	ldr	r2, [pc, #72]	; (8002100 <HAL_TIM_Base_Start_IT+0x94>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d111      	bne.n	80020de <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b06      	cmp	r3, #6
 80020ca:	d010      	beq.n	80020ee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020dc:	e007      	b.n	80020ee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0201 	orr.w	r2, r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40012c00 	.word	0x40012c00
 8002100:	40000400 	.word	0x40000400

08002104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b02      	cmp	r3, #2
 8002118:	d122      	bne.n	8002160 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b02      	cmp	r3, #2
 8002126:	d11b      	bne.n	8002160 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0202 	mvn.w	r2, #2
 8002130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f9b4 	bl	80024b4 <HAL_TIM_IC_CaptureCallback>
 800214c:	e005      	b.n	800215a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f9a7 	bl	80024a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f9b6 	bl	80024c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b04      	cmp	r3, #4
 800216c:	d122      	bne.n	80021b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b04      	cmp	r3, #4
 800217a:	d11b      	bne.n	80021b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0204 	mvn.w	r2, #4
 8002184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2202      	movs	r2, #2
 800218a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f98a 	bl	80024b4 <HAL_TIM_IC_CaptureCallback>
 80021a0:	e005      	b.n	80021ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f97d 	bl	80024a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f98c 	bl	80024c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d122      	bne.n	8002208 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d11b      	bne.n	8002208 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0208 	mvn.w	r2, #8
 80021d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2204      	movs	r2, #4
 80021de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f960 	bl	80024b4 <HAL_TIM_IC_CaptureCallback>
 80021f4:	e005      	b.n	8002202 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f953 	bl	80024a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f962 	bl	80024c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2b10      	cmp	r3, #16
 8002214:	d122      	bne.n	800225c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	2b10      	cmp	r3, #16
 8002222:	d11b      	bne.n	800225c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0210 	mvn.w	r2, #16
 800222c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2208      	movs	r2, #8
 8002232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f936 	bl	80024b4 <HAL_TIM_IC_CaptureCallback>
 8002248:	e005      	b.n	8002256 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f929 	bl	80024a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f938 	bl	80024c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d10e      	bne.n	8002288 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d107      	bne.n	8002288 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0201 	mvn.w	r2, #1
 8002280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe fbb2 	bl	80009ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002292:	2b80      	cmp	r3, #128	; 0x80
 8002294:	d10e      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a0:	2b80      	cmp	r3, #128	; 0x80
 80022a2:	d107      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fa6b 	bl	800278a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022be:	2b40      	cmp	r3, #64	; 0x40
 80022c0:	d10e      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022cc:	2b40      	cmp	r3, #64	; 0x40
 80022ce:	d107      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f8fc 	bl	80024d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d10e      	bne.n	800230c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b20      	cmp	r3, #32
 80022fa:	d107      	bne.n	800230c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0220 	mvn.w	r2, #32
 8002304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fa36 	bl	8002778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_TIM_ConfigClockSource+0x1c>
 800232c:	2302      	movs	r3, #2
 800232e:	e0b4      	b.n	800249a <HAL_TIM_ConfigClockSource+0x186>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800234e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002356:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002368:	d03e      	beq.n	80023e8 <HAL_TIM_ConfigClockSource+0xd4>
 800236a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800236e:	f200 8087 	bhi.w	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 8002372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002376:	f000 8086 	beq.w	8002486 <HAL_TIM_ConfigClockSource+0x172>
 800237a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237e:	d87f      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 8002380:	2b70      	cmp	r3, #112	; 0x70
 8002382:	d01a      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0xa6>
 8002384:	2b70      	cmp	r3, #112	; 0x70
 8002386:	d87b      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 8002388:	2b60      	cmp	r3, #96	; 0x60
 800238a:	d050      	beq.n	800242e <HAL_TIM_ConfigClockSource+0x11a>
 800238c:	2b60      	cmp	r3, #96	; 0x60
 800238e:	d877      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 8002390:	2b50      	cmp	r3, #80	; 0x50
 8002392:	d03c      	beq.n	800240e <HAL_TIM_ConfigClockSource+0xfa>
 8002394:	2b50      	cmp	r3, #80	; 0x50
 8002396:	d873      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 8002398:	2b40      	cmp	r3, #64	; 0x40
 800239a:	d058      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x13a>
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	d86f      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 80023a0:	2b30      	cmp	r3, #48	; 0x30
 80023a2:	d064      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x15a>
 80023a4:	2b30      	cmp	r3, #48	; 0x30
 80023a6:	d86b      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d060      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x15a>
 80023ac:	2b20      	cmp	r3, #32
 80023ae:	d867      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d05c      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x15a>
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d05a      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x15a>
 80023b8:	e062      	b.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6899      	ldr	r1, [r3, #8]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f000 f95e 	bl	800268a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	609a      	str	r2, [r3, #8]
      break;
 80023e6:	e04f      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6899      	ldr	r1, [r3, #8]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f000 f947 	bl	800268a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800240a:	609a      	str	r2, [r3, #8]
      break;
 800240c:	e03c      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	461a      	mov	r2, r3
 800241c:	f000 f8be 	bl	800259c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2150      	movs	r1, #80	; 0x50
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f915 	bl	8002656 <TIM_ITRx_SetConfig>
      break;
 800242c:	e02c      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	6859      	ldr	r1, [r3, #4]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	461a      	mov	r2, r3
 800243c:	f000 f8dc 	bl	80025f8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2160      	movs	r1, #96	; 0x60
 8002446:	4618      	mov	r0, r3
 8002448:	f000 f905 	bl	8002656 <TIM_ITRx_SetConfig>
      break;
 800244c:	e01c      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6859      	ldr	r1, [r3, #4]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	461a      	mov	r2, r3
 800245c:	f000 f89e 	bl	800259c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2140      	movs	r1, #64	; 0x40
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f8f5 	bl	8002656 <TIM_ITRx_SetConfig>
      break;
 800246c:	e00c      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4619      	mov	r1, r3
 8002478:	4610      	mov	r0, r2
 800247a:	f000 f8ec 	bl	8002656 <TIM_ITRx_SetConfig>
      break;
 800247e:	e003      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
      break;
 8002484:	e000      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002486:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002498:	7bfb      	ldrb	r3, [r7, #15]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr

080024b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr

080024c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
	...

080024ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a25      	ldr	r2, [pc, #148]	; (8002594 <TIM_Base_SetConfig+0xa8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d007      	beq.n	8002514 <TIM_Base_SetConfig+0x28>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250a:	d003      	beq.n	8002514 <TIM_Base_SetConfig+0x28>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a22      	ldr	r2, [pc, #136]	; (8002598 <TIM_Base_SetConfig+0xac>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d108      	bne.n	8002526 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a1a      	ldr	r2, [pc, #104]	; (8002594 <TIM_Base_SetConfig+0xa8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d007      	beq.n	800253e <TIM_Base_SetConfig+0x52>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002534:	d003      	beq.n	800253e <TIM_Base_SetConfig+0x52>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a17      	ldr	r2, [pc, #92]	; (8002598 <TIM_Base_SetConfig+0xac>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d108      	bne.n	8002550 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4313      	orrs	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a07      	ldr	r2, [pc, #28]	; (8002594 <TIM_Base_SetConfig+0xa8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d103      	bne.n	8002584 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	615a      	str	r2, [r3, #20]
}
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	40012c00 	.word	0x40012c00
 8002598:	40000400 	.word	0x40000400

0800259c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800259c:	b480      	push	{r7}
 800259e:	b087      	sub	sp, #28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	f023 0201 	bic.w	r2, r3, #1
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f023 030a 	bic.w	r3, r3, #10
 80025d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4313      	orrs	r3, r2
 80025e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	621a      	str	r2, [r3, #32]
}
 80025ee:	bf00      	nop
 80025f0:	371c      	adds	r7, #28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	f023 0210 	bic.w	r2, r3, #16
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	031b      	lsls	r3, r3, #12
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002634:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4313      	orrs	r3, r2
 800263e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	621a      	str	r2, [r3, #32]
}
 800264c:	bf00      	nop
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002656:	b480      	push	{r7}
 8002658:	b085      	sub	sp, #20
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	f043 0307 	orr.w	r3, r3, #7
 8002678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	609a      	str	r2, [r3, #8]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800268a:	b480      	push	{r7}
 800268c:	b087      	sub	sp, #28
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	021a      	lsls	r2, r3, #8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	609a      	str	r2, [r3, #8]
}
 80026be:	bf00      	nop
 80026c0:	371c      	adds	r7, #28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026dc:	2302      	movs	r3, #2
 80026de:	e041      	b.n	8002764 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002706:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a14      	ldr	r2, [pc, #80]	; (8002770 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d009      	beq.n	8002738 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272c:	d004      	beq.n	8002738 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a10      	ldr	r2, [pc, #64]	; (8002774 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d10c      	bne.n	8002752 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800273e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	4313      	orrs	r3, r2
 8002748:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40012c00 	.word	0x40012c00
 8002774:	40000400 	.word	0x40000400

08002778 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr

0800278a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <__libc_init_array>:
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	2600      	movs	r6, #0
 80027a0:	4d0c      	ldr	r5, [pc, #48]	; (80027d4 <__libc_init_array+0x38>)
 80027a2:	4c0d      	ldr	r4, [pc, #52]	; (80027d8 <__libc_init_array+0x3c>)
 80027a4:	1b64      	subs	r4, r4, r5
 80027a6:	10a4      	asrs	r4, r4, #2
 80027a8:	42a6      	cmp	r6, r4
 80027aa:	d109      	bne.n	80027c0 <__libc_init_array+0x24>
 80027ac:	f000 f822 	bl	80027f4 <_init>
 80027b0:	2600      	movs	r6, #0
 80027b2:	4d0a      	ldr	r5, [pc, #40]	; (80027dc <__libc_init_array+0x40>)
 80027b4:	4c0a      	ldr	r4, [pc, #40]	; (80027e0 <__libc_init_array+0x44>)
 80027b6:	1b64      	subs	r4, r4, r5
 80027b8:	10a4      	asrs	r4, r4, #2
 80027ba:	42a6      	cmp	r6, r4
 80027bc:	d105      	bne.n	80027ca <__libc_init_array+0x2e>
 80027be:	bd70      	pop	{r4, r5, r6, pc}
 80027c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c4:	4798      	blx	r3
 80027c6:	3601      	adds	r6, #1
 80027c8:	e7ee      	b.n	80027a8 <__libc_init_array+0xc>
 80027ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ce:	4798      	blx	r3
 80027d0:	3601      	adds	r6, #1
 80027d2:	e7f2      	b.n	80027ba <__libc_init_array+0x1e>
 80027d4:	08002898 	.word	0x08002898
 80027d8:	08002898 	.word	0x08002898
 80027dc:	08002898 	.word	0x08002898
 80027e0:	0800289c 	.word	0x0800289c

080027e4 <memset>:
 80027e4:	4603      	mov	r3, r0
 80027e6:	4402      	add	r2, r0
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d100      	bne.n	80027ee <memset+0xa>
 80027ec:	4770      	bx	lr
 80027ee:	f803 1b01 	strb.w	r1, [r3], #1
 80027f2:	e7f9      	b.n	80027e8 <memset+0x4>

080027f4 <_init>:
 80027f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f6:	bf00      	nop
 80027f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027fa:	bc08      	pop	{r3}
 80027fc:	469e      	mov	lr, r3
 80027fe:	4770      	bx	lr

08002800 <_fini>:
 8002800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002802:	bf00      	nop
 8002804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002806:	bc08      	pop	{r3}
 8002808:	469e      	mov	lr, r3
 800280a:	4770      	bx	lr
