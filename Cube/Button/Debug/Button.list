
Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000239c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080024a8  080024a8  000124a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800251c  0800251c  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  0800251c  0800251c  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800251c  0800251c  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800251c  0800251c  0001251c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002520  08002520  00012520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08002524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000040  08002564  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08002564  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f4e  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d84  00000000  00000000  00029fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002bd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002c7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d31  00000000  00000000  0002d108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d190  00000000  00000000  00043e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008279c  00000000  00000000  00050fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3765  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002964  00000000  00000000  000d37b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08002490 	.word	0x08002490

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08002490 	.word	0x08002490

0800014c <calculate_button_sample_limit>:
static int currentSampleIndex = 0;
// Button class
button buttons[NUM_BUTTON];

/* Private function */
int calculate_button_sample_limit(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(INTERRUPT_DURATION_MS >= 50)
		return 0;

	// Interrupt duration is: >= 10ms and < 50ms
	if(INTERRUPT_DURATION_MS >= BUTTON_DURATION_MIN && INTERRUPT_DURATION_MS < BUTTON_DURATION_MAX)
		return BUTTON_DURATION_MAX / INTERRUPT_DURATION_MS;
 8000150:	2305      	movs	r3, #5
	int sampleLimit = (BUTTON_DURATION_MIN / INTERRUPT_DURATION_MS) + 1;

	while(sampleLimit * INTERRUPT_DURATION_MS < BUTTON_DURATION_MAX)
		sampleLimit += timers[TIMER_BUTTON].limit;
	return sampleLimit / timers[TIMER_BUTTON].limit;
}
 8000152:	4618      	mov	r0, r3
 8000154:	46bd      	mov	sp, r7
 8000156:	bc80      	pop	{r7}
 8000158:	4770      	bx	lr
	...

0800015c <init_button>:

/* Public function  */
void init_button(){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
	// Calculate value for button sampling, auto increase
	buttonSampleLimit = calculate_button_sample_limit();
 8000162:	f7ff fff3 	bl	800014c <calculate_button_sample_limit>
 8000166:	4603      	mov	r3, r0
 8000168:	4a2c      	ldr	r2, [pc, #176]	; (800021c <init_button+0xc0>)
 800016a:	6013      	str	r3, [r2, #0]

	// Set physical port and pin
	buttons[0].physical = (GPIO_config*){BUTTON_1_GPIO_Port, BUTTON_1_Pin};
 800016c:	4b2c      	ldr	r3, [pc, #176]	; (8000220 <init_button+0xc4>)
 800016e:	4a2d      	ldr	r2, [pc, #180]	; (8000224 <init_button+0xc8>)
 8000170:	601a      	str	r2, [r3, #0]
	buttons[1].physical = (GPIO_config*){BUTTON_2_GPIO_Port, BUTTON_2_Pin};
 8000172:	4b2b      	ldr	r3, [pc, #172]	; (8000220 <init_button+0xc4>)
 8000174:	4a2b      	ldr	r2, [pc, #172]	; (8000224 <init_button+0xc8>)
 8000176:	671a      	str	r2, [r3, #112]	; 0x70
	buttons[2].physical = (GPIO_config*){BUTTON_3_GPIO_Port, BUTTON_3_Pin};
 8000178:	4b29      	ldr	r3, [pc, #164]	; (8000220 <init_button+0xc4>)
 800017a:	4a2a      	ldr	r2, [pc, #168]	; (8000224 <init_button+0xc8>)
 800017c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	// Set button initial state
	for(uint16_t index = 0; index < NUM_BUTTON; index++){
 8000180:	2300      	movs	r3, #0
 8000182:	80fb      	strh	r3, [r7, #6]
 8000184:	e041      	b.n	800020a <init_button+0xae>
		buttons[index].state = BUTTON_IS_RELEASED;
 8000186:	88fa      	ldrh	r2, [r7, #6]
 8000188:	4925      	ldr	r1, [pc, #148]	; (8000220 <init_button+0xc4>)
 800018a:	4613      	mov	r3, r2
 800018c:	00db      	lsls	r3, r3, #3
 800018e:	1a9b      	subs	r3, r3, r2
 8000190:	011b      	lsls	r3, r3, #4
 8000192:	440b      	add	r3, r1
 8000194:	3368      	adds	r3, #104	; 0x68
 8000196:	2201      	movs	r2, #1
 8000198:	701a      	strb	r2, [r3, #0]
		buttons[index].counterForLongPress = 0;
 800019a:	88fa      	ldrh	r2, [r7, #6]
 800019c:	4920      	ldr	r1, [pc, #128]	; (8000220 <init_button+0xc4>)
 800019e:	4613      	mov	r3, r2
 80001a0:	00db      	lsls	r3, r3, #3
 80001a2:	1a9b      	subs	r3, r3, r2
 80001a4:	011b      	lsls	r3, r3, #4
 80001a6:	440b      	add	r3, r1
 80001a8:	336a      	adds	r3, #106	; 0x6a
 80001aa:	2200      	movs	r2, #0
 80001ac:	801a      	strh	r2, [r3, #0]
		buttons[index].flagForLongPress = TURN_OFF;
 80001ae:	88fa      	ldrh	r2, [r7, #6]
 80001b0:	491b      	ldr	r1, [pc, #108]	; (8000220 <init_button+0xc4>)
 80001b2:	4613      	mov	r3, r2
 80001b4:	00db      	lsls	r3, r3, #3
 80001b6:	1a9b      	subs	r3, r3, r2
 80001b8:	011b      	lsls	r3, r3, #4
 80001ba:	440b      	add	r3, r1
 80001bc:	336e      	adds	r3, #110	; 0x6e
 80001be:	2201      	movs	r2, #1
 80001c0:	801a      	strh	r2, [r3, #0]
		buttons[index].flagToIncrease = TURN_OFF;
 80001c2:	88fa      	ldrh	r2, [r7, #6]
 80001c4:	4916      	ldr	r1, [pc, #88]	; (8000220 <init_button+0xc4>)
 80001c6:	4613      	mov	r3, r2
 80001c8:	00db      	lsls	r3, r3, #3
 80001ca:	1a9b      	subs	r3, r3, r2
 80001cc:	011b      	lsls	r3, r3, #4
 80001ce:	440b      	add	r3, r1
 80001d0:	336c      	adds	r3, #108	; 0x6c
 80001d2:	2201      	movs	r2, #1
 80001d4:	801a      	strh	r2, [r3, #0]
		// Reset sample buffer
		for(uint16_t sample = 0; sample < buttonSampleLimit; sample++){
 80001d6:	2300      	movs	r3, #0
 80001d8:	80bb      	strh	r3, [r7, #4]
 80001da:	e00e      	b.n	80001fa <init_button+0x9e>
			buttons[index].sampleBuffer[sample] = TURN_OFF;
 80001dc:	88fa      	ldrh	r2, [r7, #6]
 80001de:	88b9      	ldrh	r1, [r7, #4]
 80001e0:	480f      	ldr	r0, [pc, #60]	; (8000220 <init_button+0xc4>)
 80001e2:	4613      	mov	r3, r2
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	1a9b      	subs	r3, r3, r2
 80001e8:	011b      	lsls	r3, r3, #4
 80001ea:	4403      	add	r3, r0
 80001ec:	440b      	add	r3, r1
 80001ee:	3304      	adds	r3, #4
 80001f0:	2201      	movs	r2, #1
 80001f2:	701a      	strb	r2, [r3, #0]
		for(uint16_t sample = 0; sample < buttonSampleLimit; sample++){
 80001f4:	88bb      	ldrh	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	80bb      	strh	r3, [r7, #4]
 80001fa:	88ba      	ldrh	r2, [r7, #4]
 80001fc:	4b07      	ldr	r3, [pc, #28]	; (800021c <init_button+0xc0>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	429a      	cmp	r2, r3
 8000202:	dbeb      	blt.n	80001dc <init_button+0x80>
	for(uint16_t index = 0; index < NUM_BUTTON; index++){
 8000204:	88fb      	ldrh	r3, [r7, #6]
 8000206:	3301      	adds	r3, #1
 8000208:	80fb      	strh	r3, [r7, #6]
 800020a:	88fb      	ldrh	r3, [r7, #6]
 800020c:	2b02      	cmp	r3, #2
 800020e:	d9ba      	bls.n	8000186 <init_button+0x2a>
		}
	}
}
 8000210:	bf00      	nop
 8000212:	bf00      	nop
 8000214:	3708      	adds	r7, #8
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20000000 	.word	0x20000000
 8000220:	20000094 	.word	0x20000094
 8000224:	40010c00 	.word	0x40010c00

08000228 <turn_all_led_indicator_off>:
/* Private variables declaration */
GPIO_config ledIndicatorPhysical[NUM_SIDE][NUM_COLOR];
uint8_t toggleState = TURN_OFF;

/* Private function  */
void turn_all_led_indicator_off(){
 8000228:	b590      	push	{r4, r7, lr}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
	for(uint16_t side = 0; side < NUM_SIDE; side++){
 800022e:	2300      	movs	r3, #0
 8000230:	80fb      	strh	r3, [r7, #6]
 8000232:	e022      	b.n	800027a <turn_all_led_indicator_off+0x52>
		for(uint16_t color = 0; color < NUM_COLOR; color++){
 8000234:	2300      	movs	r3, #0
 8000236:	80bb      	strh	r3, [r7, #4]
 8000238:	e019      	b.n	800026e <turn_all_led_indicator_off+0x46>
			HAL_GPIO_WritePin(ledIndicatorPhysical[side][color].port, ledIndicatorPhysical[side][color].pin, TURN_OFF);
 800023a:	88fa      	ldrh	r2, [r7, #6]
 800023c:	88b9      	ldrh	r1, [r7, #4]
 800023e:	4813      	ldr	r0, [pc, #76]	; (800028c <turn_all_led_indicator_off+0x64>)
 8000240:	4613      	mov	r3, r2
 8000242:	005b      	lsls	r3, r3, #1
 8000244:	4413      	add	r3, r2
 8000246:	440b      	add	r3, r1
 8000248:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 800024c:	88fa      	ldrh	r2, [r7, #6]
 800024e:	88b9      	ldrh	r1, [r7, #4]
 8000250:	4c0e      	ldr	r4, [pc, #56]	; (800028c <turn_all_led_indicator_off+0x64>)
 8000252:	4613      	mov	r3, r2
 8000254:	005b      	lsls	r3, r3, #1
 8000256:	4413      	add	r3, r2
 8000258:	440b      	add	r3, r1
 800025a:	00db      	lsls	r3, r3, #3
 800025c:	4423      	add	r3, r4
 800025e:	889b      	ldrh	r3, [r3, #4]
 8000260:	2201      	movs	r2, #1
 8000262:	4619      	mov	r1, r3
 8000264:	f001 f90c 	bl	8001480 <HAL_GPIO_WritePin>
		for(uint16_t color = 0; color < NUM_COLOR; color++){
 8000268:	88bb      	ldrh	r3, [r7, #4]
 800026a:	3301      	adds	r3, #1
 800026c:	80bb      	strh	r3, [r7, #4]
 800026e:	88bb      	ldrh	r3, [r7, #4]
 8000270:	2b02      	cmp	r3, #2
 8000272:	d9e2      	bls.n	800023a <turn_all_led_indicator_off+0x12>
	for(uint16_t side = 0; side < NUM_SIDE; side++){
 8000274:	88fb      	ldrh	r3, [r7, #6]
 8000276:	3301      	adds	r3, #1
 8000278:	80fb      	strh	r3, [r7, #6]
 800027a:	88fb      	ldrh	r3, [r7, #6]
 800027c:	2b01      	cmp	r3, #1
 800027e:	d9d9      	bls.n	8000234 <turn_all_led_indicator_off+0xc>
		}
	}
}
 8000280:	bf00      	nop
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	bd90      	pop	{r4, r7, pc}
 800028a:	bf00      	nop
 800028c:	200001e4 	.word	0x200001e4

08000290 <turn_all_led_indicator_on>:
void turn_all_led_indicator_on(){
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for(uint16_t side = 0; side < NUM_SIDE; side++){
 8000296:	2300      	movs	r3, #0
 8000298:	80fb      	strh	r3, [r7, #6]
 800029a:	e022      	b.n	80002e2 <turn_all_led_indicator_on+0x52>
		for(uint16_t color = 0; color < NUM_COLOR; color++){
 800029c:	2300      	movs	r3, #0
 800029e:	80bb      	strh	r3, [r7, #4]
 80002a0:	e019      	b.n	80002d6 <turn_all_led_indicator_on+0x46>
			HAL_GPIO_WritePin(ledIndicatorPhysical[side][color].port, ledIndicatorPhysical[side][color].pin, TURN_ON);
 80002a2:	88fa      	ldrh	r2, [r7, #6]
 80002a4:	88b9      	ldrh	r1, [r7, #4]
 80002a6:	4813      	ldr	r0, [pc, #76]	; (80002f4 <turn_all_led_indicator_on+0x64>)
 80002a8:	4613      	mov	r3, r2
 80002aa:	005b      	lsls	r3, r3, #1
 80002ac:	4413      	add	r3, r2
 80002ae:	440b      	add	r3, r1
 80002b0:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 80002b4:	88fa      	ldrh	r2, [r7, #6]
 80002b6:	88b9      	ldrh	r1, [r7, #4]
 80002b8:	4c0e      	ldr	r4, [pc, #56]	; (80002f4 <turn_all_led_indicator_on+0x64>)
 80002ba:	4613      	mov	r3, r2
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	4413      	add	r3, r2
 80002c0:	440b      	add	r3, r1
 80002c2:	00db      	lsls	r3, r3, #3
 80002c4:	4423      	add	r3, r4
 80002c6:	889b      	ldrh	r3, [r3, #4]
 80002c8:	2200      	movs	r2, #0
 80002ca:	4619      	mov	r1, r3
 80002cc:	f001 f8d8 	bl	8001480 <HAL_GPIO_WritePin>
		for(uint16_t color = 0; color < NUM_COLOR; color++){
 80002d0:	88bb      	ldrh	r3, [r7, #4]
 80002d2:	3301      	adds	r3, #1
 80002d4:	80bb      	strh	r3, [r7, #4]
 80002d6:	88bb      	ldrh	r3, [r7, #4]
 80002d8:	2b02      	cmp	r3, #2
 80002da:	d9e2      	bls.n	80002a2 <turn_all_led_indicator_on+0x12>
	for(uint16_t side = 0; side < NUM_SIDE; side++){
 80002dc:	88fb      	ldrh	r3, [r7, #6]
 80002de:	3301      	adds	r3, #1
 80002e0:	80fb      	strh	r3, [r7, #6]
 80002e2:	88fb      	ldrh	r3, [r7, #6]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d9d9      	bls.n	800029c <turn_all_led_indicator_on+0xc>
		}
	}
}
 80002e8:	bf00      	nop
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd90      	pop	{r4, r7, pc}
 80002f2:	bf00      	nop
 80002f4:	200001e4 	.word	0x200001e4

080002f8 <init_led_indicator>:

/* Public function  */
void init_led_indicator(){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b08c      	sub	sp, #48	; 0x30
 80002fc:	af00      	add	r7, sp, #0
	ledIndicatorPhysical[SIDE_A][RED] = (GPIO_config){RED_0_GPIO_Port, RED_0_Pin};
 80002fe:	4b17      	ldr	r3, [pc, #92]	; (800035c <init_led_indicator+0x64>)
 8000300:	4a17      	ldr	r2, [pc, #92]	; (8000360 <init_led_indicator+0x68>)
 8000302:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000306:	e883 0003 	stmia.w	r3, {r0, r1}
	ledIndicatorPhysical[SIDE_A][GREEN] = (GPIO_config){GREEN_0_GPIO_Port, GREEN_0_Pin};
 800030a:	4b14      	ldr	r3, [pc, #80]	; (800035c <init_led_indicator+0x64>)
 800030c:	4a15      	ldr	r2, [pc, #84]	; (8000364 <init_led_indicator+0x6c>)
 800030e:	3310      	adds	r3, #16
 8000310:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000314:	e883 0003 	stmia.w	r3, {r0, r1}
	ledIndicatorPhysical[SIDE_A][AMBER] = (GPIO_config){AMBER_0_GPIO_Port, AMBER_0_Pin};
 8000318:	4b10      	ldr	r3, [pc, #64]	; (800035c <init_led_indicator+0x64>)
 800031a:	4a13      	ldr	r2, [pc, #76]	; (8000368 <init_led_indicator+0x70>)
 800031c:	3308      	adds	r3, #8
 800031e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000322:	e883 0003 	stmia.w	r3, {r0, r1}

	ledIndicatorPhysical[SIDE_B][RED] = (GPIO_config){RED_1_GPIO_Port, RED_1_Pin};
 8000326:	4b0d      	ldr	r3, [pc, #52]	; (800035c <init_led_indicator+0x64>)
 8000328:	4a10      	ldr	r2, [pc, #64]	; (800036c <init_led_indicator+0x74>)
 800032a:	3318      	adds	r3, #24
 800032c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000330:	e883 0003 	stmia.w	r3, {r0, r1}
	ledIndicatorPhysical[SIDE_B][GREEN] = (GPIO_config){GREEN_1_GPIO_Port, GREEN_1_Pin};
 8000334:	4b09      	ldr	r3, [pc, #36]	; (800035c <init_led_indicator+0x64>)
 8000336:	4a0e      	ldr	r2, [pc, #56]	; (8000370 <init_led_indicator+0x78>)
 8000338:	3328      	adds	r3, #40	; 0x28
 800033a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800033e:	e883 0003 	stmia.w	r3, {r0, r1}
	ledIndicatorPhysical[SIDE_B][AMBER] = (GPIO_config){AMBER_1_GPIO_Port, AMBER_1_Pin};
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <init_led_indicator+0x64>)
 8000344:	4a0b      	ldr	r2, [pc, #44]	; (8000374 <init_led_indicator+0x7c>)
 8000346:	3320      	adds	r3, #32
 8000348:	e892 0003 	ldmia.w	r2, {r0, r1}
 800034c:	e883 0003 	stmia.w	r3, {r0, r1}

	turn_all_led_indicator_off();
 8000350:	f7ff ff6a 	bl	8000228 <turn_all_led_indicator_off>
}
 8000354:	bf00      	nop
 8000356:	3730      	adds	r7, #48	; 0x30
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	200001e4 	.word	0x200001e4
 8000360:	080024a8 	.word	0x080024a8
 8000364:	080024b0 	.word	0x080024b0
 8000368:	080024b8 	.word	0x080024b8
 800036c:	080024c0 	.word	0x080024c0
 8000370:	080024c8 	.word	0x080024c8
 8000374:	080024d0 	.word	0x080024d0

08000378 <display_led_indicator>:
void display_led_indicator(TRAFFIC_LIGHT_SIDE trafficSide, TRAFFIC_LIGHT_COLOR trafficColor){
 8000378:	b590      	push	{r4, r7, lr}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	460a      	mov	r2, r1
 8000382:	71fb      	strb	r3, [r7, #7]
 8000384:	4613      	mov	r3, r2
 8000386:	71bb      	strb	r3, [r7, #6]
	/* At any time and at each side, only a single led can be ON.*/
	for(uint16_t color = 0; color < NUM_COLOR; color++){
 8000388:	2300      	movs	r3, #0
 800038a:	81fb      	strh	r3, [r7, #14]
 800038c:	e036      	b.n	80003fc <display_led_indicator+0x84>
		if(color == trafficColor){
 800038e:	79bb      	ldrb	r3, [r7, #6]
 8000390:	b29b      	uxth	r3, r3
 8000392:	89fa      	ldrh	r2, [r7, #14]
 8000394:	429a      	cmp	r2, r3
 8000396:	d117      	bne.n	80003c8 <display_led_indicator+0x50>
			HAL_GPIO_WritePin(ledIndicatorPhysical[trafficSide][color].port, ledIndicatorPhysical[trafficSide][color].pin, TURN_ON);
 8000398:	79fa      	ldrb	r2, [r7, #7]
 800039a:	89f9      	ldrh	r1, [r7, #14]
 800039c:	481b      	ldr	r0, [pc, #108]	; (800040c <display_led_indicator+0x94>)
 800039e:	4613      	mov	r3, r2
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	4413      	add	r3, r2
 80003a4:	440b      	add	r3, r1
 80003a6:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 80003aa:	79fa      	ldrb	r2, [r7, #7]
 80003ac:	89f9      	ldrh	r1, [r7, #14]
 80003ae:	4c17      	ldr	r4, [pc, #92]	; (800040c <display_led_indicator+0x94>)
 80003b0:	4613      	mov	r3, r2
 80003b2:	005b      	lsls	r3, r3, #1
 80003b4:	4413      	add	r3, r2
 80003b6:	440b      	add	r3, r1
 80003b8:	00db      	lsls	r3, r3, #3
 80003ba:	4423      	add	r3, r4
 80003bc:	889b      	ldrh	r3, [r3, #4]
 80003be:	2200      	movs	r2, #0
 80003c0:	4619      	mov	r1, r3
 80003c2:	f001 f85d 	bl	8001480 <HAL_GPIO_WritePin>
			continue;
 80003c6:	e016      	b.n	80003f6 <display_led_indicator+0x7e>
		}
		HAL_GPIO_WritePin(ledIndicatorPhysical[trafficSide][color].port, ledIndicatorPhysical[trafficSide][color].pin, TURN_OFF);
 80003c8:	79fa      	ldrb	r2, [r7, #7]
 80003ca:	89f9      	ldrh	r1, [r7, #14]
 80003cc:	480f      	ldr	r0, [pc, #60]	; (800040c <display_led_indicator+0x94>)
 80003ce:	4613      	mov	r3, r2
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	4413      	add	r3, r2
 80003d4:	440b      	add	r3, r1
 80003d6:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	89f9      	ldrh	r1, [r7, #14]
 80003de:	4c0b      	ldr	r4, [pc, #44]	; (800040c <display_led_indicator+0x94>)
 80003e0:	4613      	mov	r3, r2
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	4413      	add	r3, r2
 80003e6:	440b      	add	r3, r1
 80003e8:	00db      	lsls	r3, r3, #3
 80003ea:	4423      	add	r3, r4
 80003ec:	889b      	ldrh	r3, [r3, #4]
 80003ee:	2201      	movs	r2, #1
 80003f0:	4619      	mov	r1, r3
 80003f2:	f001 f845 	bl	8001480 <HAL_GPIO_WritePin>
	for(uint16_t color = 0; color < NUM_COLOR; color++){
 80003f6:	89fb      	ldrh	r3, [r7, #14]
 80003f8:	3301      	adds	r3, #1
 80003fa:	81fb      	strh	r3, [r7, #14]
 80003fc:	89fb      	ldrh	r3, [r7, #14]
 80003fe:	2b02      	cmp	r3, #2
 8000400:	d9c5      	bls.n	800038e <display_led_indicator+0x16>
	}
}
 8000402:	bf00      	nop
 8000404:	bf00      	nop
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	bd90      	pop	{r4, r7, pc}
 800040c:	200001e4 	.word	0x200001e4

08000410 <blink_all_led>:
void blink_all_led(){
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	if(toggleState == TURN_OFF){
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <blink_all_led+0x28>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d105      	bne.n	8000428 <blink_all_led+0x18>
		turn_all_led_indicator_off();
 800041c:	f7ff ff04 	bl	8000228 <turn_all_led_indicator_off>
		toggleState = TURN_ON;
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <blink_all_led+0x28>)
 8000422:	2200      	movs	r2, #0
 8000424:	701a      	strb	r2, [r3, #0]
	}
	else{
		turn_all_led_indicator_on();
		toggleState = TURN_OFF;
	}
}
 8000426:	e004      	b.n	8000432 <blink_all_led+0x22>
		turn_all_led_indicator_on();
 8000428:	f7ff ff32 	bl	8000290 <turn_all_led_indicator_on>
		toggleState = TURN_OFF;
 800042c:	4b02      	ldr	r3, [pc, #8]	; (8000438 <blink_all_led+0x28>)
 800042e:	2201      	movs	r2, #1
 8000430:	701a      	strb	r2, [r3, #0]
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000004 	.word	0x20000004

0800043c <init_led_segment>:
static int enabledLedSegmentSide = SIDE_A;
static int enabledLedSegmentDigit = LEFT;
ledSegment ledSegments[NUM_SIDE][NUM_DIGIT];

/* Public function  */
void init_led_segment(){
 800043c:	b590      	push	{r4, r7, lr}
 800043e:	b08b      	sub	sp, #44	; 0x2c
 8000440:	af00      	add	r7, sp, #0
	ledSegments[SIDE_A][LEFT].ledSegmentPhysical = (GPIO_config){EN0_LEFT_GPIO_Port, EN0_LEFT_Pin};
 8000442:	4b33      	ldr	r3, [pc, #204]	; (8000510 <init_led_segment+0xd4>)
 8000444:	4a33      	ldr	r2, [pc, #204]	; (8000514 <init_led_segment+0xd8>)
 8000446:	e892 0003 	ldmia.w	r2, {r0, r1}
 800044a:	e883 0003 	stmia.w	r3, {r0, r1}
	ledSegments[SIDE_A][RIGHT].ledSegmentPhysical = (GPIO_config){EN0_RIGHT_GPIO_Port, EN0_RIGHT_Pin};
 800044e:	4b30      	ldr	r3, [pc, #192]	; (8000510 <init_led_segment+0xd4>)
 8000450:	4a31      	ldr	r2, [pc, #196]	; (8000518 <init_led_segment+0xdc>)
 8000452:	330c      	adds	r3, #12
 8000454:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000458:	e883 0003 	stmia.w	r3, {r0, r1}
	ledSegments[SIDE_B][LEFT].ledSegmentPhysical = (GPIO_config){EN1_LEFT_GPIO_Port, EN1_LEFT_Pin};
 800045c:	4b2c      	ldr	r3, [pc, #176]	; (8000510 <init_led_segment+0xd4>)
 800045e:	4a2f      	ldr	r2, [pc, #188]	; (800051c <init_led_segment+0xe0>)
 8000460:	3318      	adds	r3, #24
 8000462:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000466:	e883 0003 	stmia.w	r3, {r0, r1}
	ledSegments[SIDE_B][RIGHT].ledSegmentPhysical = (GPIO_config){EN1_RIGHT_GPIO_Port, EN1_RIGHT_Pin};
 800046a:	4b29      	ldr	r3, [pc, #164]	; (8000510 <init_led_segment+0xd4>)
 800046c:	4a2c      	ldr	r2, [pc, #176]	; (8000520 <init_led_segment+0xe4>)
 800046e:	3324      	adds	r3, #36	; 0x24
 8000470:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000474:	e883 0003 	stmia.w	r3, {r0, r1}

	for(uint16_t side = 0; side < NUM_SIDE; side++){
 8000478:	2300      	movs	r3, #0
 800047a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800047c:	e03f      	b.n	80004fe <init_led_segment+0xc2>
		for(uint16_t digit = 0; digit < NUM_DIGIT; digit++){
 800047e:	2300      	movs	r3, #0
 8000480:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000482:	e036      	b.n	80004f2 <init_led_segment+0xb6>
			HAL_GPIO_WritePin((ledSegments[side][digit].ledSegmentPhysical).port, (ledSegments[side][digit].ledSegmentPhysical).pin, TURN_OFF);
 8000484:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8000486:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000488:	4821      	ldr	r0, [pc, #132]	; (8000510 <init_led_segment+0xd4>)
 800048a:	461a      	mov	r2, r3
 800048c:	0052      	lsls	r2, r2, #1
 800048e:	441a      	add	r2, r3
 8000490:	0093      	lsls	r3, r2, #2
 8000492:	461a      	mov	r2, r3
 8000494:	460b      	mov	r3, r1
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	440b      	add	r3, r1
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	4413      	add	r3, r2
 800049e:	4403      	add	r3, r0
 80004a0:	6818      	ldr	r0, [r3, #0]
 80004a2:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80004a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80004a6:	4c1a      	ldr	r4, [pc, #104]	; (8000510 <init_led_segment+0xd4>)
 80004a8:	461a      	mov	r2, r3
 80004aa:	0052      	lsls	r2, r2, #1
 80004ac:	441a      	add	r2, r3
 80004ae:	0093      	lsls	r3, r2, #2
 80004b0:	461a      	mov	r2, r3
 80004b2:	460b      	mov	r3, r1
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	440b      	add	r3, r1
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	4413      	add	r3, r2
 80004bc:	4423      	add	r3, r4
 80004be:	3304      	adds	r3, #4
 80004c0:	881b      	ldrh	r3, [r3, #0]
 80004c2:	2201      	movs	r2, #1
 80004c4:	4619      	mov	r1, r3
 80004c6:	f000 ffdb 	bl	8001480 <HAL_GPIO_WritePin>
			ledSegments[side][digit].numberToDisplay = 0;
 80004ca:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80004cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80004ce:	4810      	ldr	r0, [pc, #64]	; (8000510 <init_led_segment+0xd4>)
 80004d0:	461a      	mov	r2, r3
 80004d2:	0052      	lsls	r2, r2, #1
 80004d4:	441a      	add	r2, r3
 80004d6:	0093      	lsls	r3, r2, #2
 80004d8:	461a      	mov	r2, r3
 80004da:	460b      	mov	r3, r1
 80004dc:	005b      	lsls	r3, r3, #1
 80004de:	440b      	add	r3, r1
 80004e0:	00db      	lsls	r3, r3, #3
 80004e2:	4413      	add	r3, r2
 80004e4:	4403      	add	r3, r0
 80004e6:	3308      	adds	r3, #8
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
		for(uint16_t digit = 0; digit < NUM_DIGIT; digit++){
 80004ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80004ee:	3301      	adds	r3, #1
 80004f0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80004f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d9c5      	bls.n	8000484 <init_led_segment+0x48>
	for(uint16_t side = 0; side < NUM_SIDE; side++){
 80004f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80004fa:	3301      	adds	r3, #1
 80004fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80004fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000500:	2b01      	cmp	r3, #1
 8000502:	d9bc      	bls.n	800047e <init_led_segment+0x42>
		}
	}

}
 8000504:	bf00      	nop
 8000506:	bf00      	nop
 8000508:	372c      	adds	r7, #44	; 0x2c
 800050a:	46bd      	mov	sp, r7
 800050c:	bd90      	pop	{r4, r7, pc}
 800050e:	bf00      	nop
 8000510:	20000214 	.word	0x20000214
 8000514:	080024d8 	.word	0x080024d8
 8000518:	080024e0 	.word	0x080024e0
 800051c:	080024e8 	.word	0x080024e8
 8000520:	080024f0 	.word	0x080024f0

08000524 <modify_led_segment_buffer>:

void modify_led_segment_buffer(TRAFFIC_LIGHT_SIDE trafficSide, uint16_t number){
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	460a      	mov	r2, r1
 800052e:	71fb      	strb	r3, [r7, #7]
 8000530:	4613      	mov	r3, r2
 8000532:	80bb      	strh	r3, [r7, #4]
	ledSegments[trafficSide][LEFT].numberToDisplay = number / 10;
 8000534:	88bb      	ldrh	r3, [r7, #4]
 8000536:	4a14      	ldr	r2, [pc, #80]	; (8000588 <modify_led_segment_buffer+0x64>)
 8000538:	fba2 2303 	umull	r2, r3, r2, r3
 800053c:	08db      	lsrs	r3, r3, #3
 800053e:	b29b      	uxth	r3, r3
 8000540:	79fa      	ldrb	r2, [r7, #7]
 8000542:	4618      	mov	r0, r3
 8000544:	4911      	ldr	r1, [pc, #68]	; (800058c <modify_led_segment_buffer+0x68>)
 8000546:	4613      	mov	r3, r2
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	4413      	add	r3, r2
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	440b      	add	r3, r1
 8000550:	3308      	adds	r3, #8
 8000552:	6018      	str	r0, [r3, #0]
	ledSegments[trafficSide][RIGHT].numberToDisplay = number % 10;
 8000554:	88ba      	ldrh	r2, [r7, #4]
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <modify_led_segment_buffer+0x64>)
 8000558:	fba3 1302 	umull	r1, r3, r3, r2
 800055c:	08d9      	lsrs	r1, r3, #3
 800055e:	460b      	mov	r3, r1
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	440b      	add	r3, r1
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	1ad3      	subs	r3, r2, r3
 8000568:	b29b      	uxth	r3, r3
 800056a:	79fa      	ldrb	r2, [r7, #7]
 800056c:	4618      	mov	r0, r3
 800056e:	4907      	ldr	r1, [pc, #28]	; (800058c <modify_led_segment_buffer+0x68>)
 8000570:	4613      	mov	r3, r2
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	4413      	add	r3, r2
 8000576:	00db      	lsls	r3, r3, #3
 8000578:	440b      	add	r3, r1
 800057a:	3314      	adds	r3, #20
 800057c:	6018      	str	r0, [r3, #0]
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	cccccccd 	.word	0xcccccccd
 800058c:	20000214 	.word	0x20000214

08000590 <display_led_segment>:

void display_led_segment(){
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
	if(timers[TIMER_LED_SEGMENT].flag == TURN_ON){
 8000596:	4b51      	ldr	r3, [pc, #324]	; (80006dc <display_led_segment+0x14c>)
 8000598:	6a1b      	ldr	r3, [r3, #32]
 800059a:	2b00      	cmp	r3, #0
 800059c:	f040 809a 	bne.w	80006d4 <display_led_segment+0x144>
		// Write data to LED segment
		GPIOB->ODR = (GPIOB->ODR & (0xFF << 8))
 80005a0:	4b4f      	ldr	r3, [pc, #316]	; (80006e0 <display_led_segment+0x150>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
				| (SEGMENT_HEX[ledSegments[enabledLedSegmentSide][enabledLedSegmentDigit].numberToDisplay]);
 80005a8:	4b4e      	ldr	r3, [pc, #312]	; (80006e4 <display_led_segment+0x154>)
 80005aa:	6819      	ldr	r1, [r3, #0]
 80005ac:	4b4e      	ldr	r3, [pc, #312]	; (80006e8 <display_led_segment+0x158>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4c4e      	ldr	r4, [pc, #312]	; (80006ec <display_led_segment+0x15c>)
 80005b2:	461a      	mov	r2, r3
 80005b4:	0052      	lsls	r2, r2, #1
 80005b6:	441a      	add	r2, r3
 80005b8:	0093      	lsls	r3, r2, #2
 80005ba:	461a      	mov	r2, r3
 80005bc:	460b      	mov	r3, r1
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	440b      	add	r3, r1
 80005c2:	00db      	lsls	r3, r3, #3
 80005c4:	4413      	add	r3, r2
 80005c6:	4423      	add	r3, r4
 80005c8:	3308      	adds	r3, #8
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a48      	ldr	r2, [pc, #288]	; (80006f0 <display_led_segment+0x160>)
 80005ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		GPIOB->ODR = (GPIOB->ODR & (0xFF << 8))
 80005d2:	4a43      	ldr	r2, [pc, #268]	; (80006e0 <display_led_segment+0x150>)
				| (SEGMENT_HEX[ledSegments[enabledLedSegmentSide][enabledLedSegmentDigit].numberToDisplay]);
 80005d4:	4303      	orrs	r3, r0
		GPIOB->ODR = (GPIOB->ODR & (0xFF << 8))
 80005d6:	60d3      	str	r3, [r2, #12]

		// Enable correct LED segment
		for(uint16_t side = 0; side < NUM_SIDE; side++){
 80005d8:	2300      	movs	r3, #0
 80005da:	80fb      	strh	r3, [r7, #6]
 80005dc:	e05c      	b.n	8000698 <display_led_segment+0x108>
			for(uint16_t digit = 0; digit < NUM_DIGIT; digit++){
 80005de:	2300      	movs	r3, #0
 80005e0:	80bb      	strh	r3, [r7, #4]
 80005e2:	e053      	b.n	800068c <display_led_segment+0xfc>
				if(side == enabledLedSegmentSide && digit == enabledLedSegmentDigit)
 80005e4:	88fa      	ldrh	r2, [r7, #6]
 80005e6:	4b3f      	ldr	r3, [pc, #252]	; (80006e4 <display_led_segment+0x154>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d128      	bne.n	8000640 <display_led_segment+0xb0>
 80005ee:	88ba      	ldrh	r2, [r7, #4]
 80005f0:	4b3d      	ldr	r3, [pc, #244]	; (80006e8 <display_led_segment+0x158>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d123      	bne.n	8000640 <display_led_segment+0xb0>
					HAL_GPIO_WritePin((ledSegments[side][digit].ledSegmentPhysical).port, (ledSegments[side][digit].ledSegmentPhysical).pin, TURN_ON);
 80005f8:	88f9      	ldrh	r1, [r7, #6]
 80005fa:	88bb      	ldrh	r3, [r7, #4]
 80005fc:	483b      	ldr	r0, [pc, #236]	; (80006ec <display_led_segment+0x15c>)
 80005fe:	461a      	mov	r2, r3
 8000600:	0052      	lsls	r2, r2, #1
 8000602:	441a      	add	r2, r3
 8000604:	0093      	lsls	r3, r2, #2
 8000606:	461a      	mov	r2, r3
 8000608:	460b      	mov	r3, r1
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	440b      	add	r3, r1
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	4413      	add	r3, r2
 8000612:	4403      	add	r3, r0
 8000614:	6818      	ldr	r0, [r3, #0]
 8000616:	88f9      	ldrh	r1, [r7, #6]
 8000618:	88bb      	ldrh	r3, [r7, #4]
 800061a:	4c34      	ldr	r4, [pc, #208]	; (80006ec <display_led_segment+0x15c>)
 800061c:	461a      	mov	r2, r3
 800061e:	0052      	lsls	r2, r2, #1
 8000620:	441a      	add	r2, r3
 8000622:	0093      	lsls	r3, r2, #2
 8000624:	461a      	mov	r2, r3
 8000626:	460b      	mov	r3, r1
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	440b      	add	r3, r1
 800062c:	00db      	lsls	r3, r3, #3
 800062e:	4413      	add	r3, r2
 8000630:	4423      	add	r3, r4
 8000632:	3304      	adds	r3, #4
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	2200      	movs	r2, #0
 8000638:	4619      	mov	r1, r3
 800063a:	f000 ff21 	bl	8001480 <HAL_GPIO_WritePin>
 800063e:	e022      	b.n	8000686 <display_led_segment+0xf6>
				else HAL_GPIO_WritePin((ledSegments[side][digit].ledSegmentPhysical).port, (ledSegments[side][digit].ledSegmentPhysical).pin, TURN_OFF);
 8000640:	88f9      	ldrh	r1, [r7, #6]
 8000642:	88bb      	ldrh	r3, [r7, #4]
 8000644:	4829      	ldr	r0, [pc, #164]	; (80006ec <display_led_segment+0x15c>)
 8000646:	461a      	mov	r2, r3
 8000648:	0052      	lsls	r2, r2, #1
 800064a:	441a      	add	r2, r3
 800064c:	0093      	lsls	r3, r2, #2
 800064e:	461a      	mov	r2, r3
 8000650:	460b      	mov	r3, r1
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	440b      	add	r3, r1
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	4413      	add	r3, r2
 800065a:	4403      	add	r3, r0
 800065c:	6818      	ldr	r0, [r3, #0]
 800065e:	88f9      	ldrh	r1, [r7, #6]
 8000660:	88bb      	ldrh	r3, [r7, #4]
 8000662:	4c22      	ldr	r4, [pc, #136]	; (80006ec <display_led_segment+0x15c>)
 8000664:	461a      	mov	r2, r3
 8000666:	0052      	lsls	r2, r2, #1
 8000668:	441a      	add	r2, r3
 800066a:	0093      	lsls	r3, r2, #2
 800066c:	461a      	mov	r2, r3
 800066e:	460b      	mov	r3, r1
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	440b      	add	r3, r1
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	4413      	add	r3, r2
 8000678:	4423      	add	r3, r4
 800067a:	3304      	adds	r3, #4
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	2201      	movs	r2, #1
 8000680:	4619      	mov	r1, r3
 8000682:	f000 fefd 	bl	8001480 <HAL_GPIO_WritePin>
			for(uint16_t digit = 0; digit < NUM_DIGIT; digit++){
 8000686:	88bb      	ldrh	r3, [r7, #4]
 8000688:	3301      	adds	r3, #1
 800068a:	80bb      	strh	r3, [r7, #4]
 800068c:	88bb      	ldrh	r3, [r7, #4]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d9a8      	bls.n	80005e4 <display_led_segment+0x54>
		for(uint16_t side = 0; side < NUM_SIDE; side++){
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	3301      	adds	r3, #1
 8000696:	80fb      	strh	r3, [r7, #6]
 8000698:	88fb      	ldrh	r3, [r7, #6]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d99f      	bls.n	80005de <display_led_segment+0x4e>
			}
		}

		// Toggle to another LEDs
		if(enabledLedSegmentDigit == RIGHT)
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <display_led_segment+0x158>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d109      	bne.n	80006ba <display_led_segment+0x12a>
			enabledLedSegmentSide = (enabledLedSegmentSide + 1) % NUM_SIDE;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <display_led_segment+0x154>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	3301      	adds	r3, #1
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	bfb8      	it	lt
 80006b4:	425b      	neglt	r3, r3
 80006b6:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <display_led_segment+0x154>)
 80006b8:	6013      	str	r3, [r2, #0]
		enabledLedSegmentDigit = (enabledLedSegmentDigit + 1) % NUM_DIGIT;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <display_led_segment+0x158>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	bfb8      	it	lt
 80006c8:	425b      	neglt	r3, r3
 80006ca:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <display_led_segment+0x158>)
 80006cc:	6013      	str	r3, [r2, #0]
		timers[TIMER_LED_SEGMENT].flag = TURN_OFF;
 80006ce:	4b03      	ldr	r3, [pc, #12]	; (80006dc <display_led_segment+0x14c>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	621a      	str	r2, [r3, #32]
	}
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd90      	pop	{r4, r7, pc}
 80006dc:	20000064 	.word	0x20000064
 80006e0:	40010c00 	.word	0x40010c00
 80006e4:	2000005c 	.word	0x2000005c
 80006e8:	20000060 	.word	0x20000060
 80006ec:	20000214 	.word	0x20000214
 80006f0:	20000008 	.word	0x20000008

080006f4 <calculate_button_sample_rate>:
/* Import library */
#include "UDF_timer.h"
/* Private variables declaration */

/* Private function  */
int calculate_button_sample_rate(){
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
	// Internal interrupt duration is: >= 10ms and <50ms
	if(INTERRUPT_DURATION_MS >= BUTTON_DURATION_MIN && INTERRUPT_DURATION_MS < BUTTON_DURATION_MAX)
		return 1;
 80006f8:	2301      	movs	r3, #1
	// Internal interrupt duration is: <10ms
	return (BUTTON_DURATION_MIN / INTERRUPT_DURATION_MS) + 1;
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
	...

08000704 <init_timer>:

/* Public function  */
void init_timer(){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
	// Set counter limit to raise a flag
	timers[TIMER_BUTTON].limit = calculate_button_sample_rate();
 800070a:	f7ff fff3 	bl	80006f4 <calculate_button_sample_rate>
 800070e:	4603      	mov	r3, r0
 8000710:	4a19      	ldr	r2, [pc, #100]	; (8000778 <init_timer+0x74>)
 8000712:	6013      	str	r3, [r2, #0]
	timers[TIMER_LED_INDICATOR].limit = LED_INDICATOR_DURATION_MS / INTERRUPT_DURATION_MS;
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <init_timer+0x74>)
 8000716:	2219      	movs	r2, #25
 8000718:	60da      	str	r2, [r3, #12]
	timers[TIMER_LED_SEGMENT].limit = LED_SEGMENT_DURATION_MS / INTERRUPT_DURATION_MS;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <init_timer+0x74>)
 800071c:	220a      	movs	r2, #10
 800071e:	619a      	str	r2, [r3, #24]
	timers[TIMER_SECOND].limit = SECOND_DURATION_MS / INTERRUPT_DURATION_MS;
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <init_timer+0x74>)
 8000722:	2264      	movs	r2, #100	; 0x64
 8000724:	625a      	str	r2, [r3, #36]	; 0x24

	// Reset counter and flag to default value
	for(uint16_t timer = 0; timer < NUM_TIMER; timer++){
 8000726:	2300      	movs	r3, #0
 8000728:	80fb      	strh	r3, [r7, #6]
 800072a:	e01d      	b.n	8000768 <init_timer+0x64>
		timers[timer].counter = timers[timer].limit;
 800072c:	88f9      	ldrh	r1, [r7, #6]
 800072e:	88fa      	ldrh	r2, [r7, #6]
 8000730:	4811      	ldr	r0, [pc, #68]	; (8000778 <init_timer+0x74>)
 8000732:	460b      	mov	r3, r1
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	440b      	add	r3, r1
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	4403      	add	r3, r0
 800073c:	6819      	ldr	r1, [r3, #0]
 800073e:	480e      	ldr	r0, [pc, #56]	; (8000778 <init_timer+0x74>)
 8000740:	4613      	mov	r3, r2
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	4413      	add	r3, r2
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	4403      	add	r3, r0
 800074a:	3304      	adds	r3, #4
 800074c:	6019      	str	r1, [r3, #0]
		timers[timer].flag = 0;
 800074e:	88fa      	ldrh	r2, [r7, #6]
 8000750:	4909      	ldr	r1, [pc, #36]	; (8000778 <init_timer+0x74>)
 8000752:	4613      	mov	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	4413      	add	r3, r2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	440b      	add	r3, r1
 800075c:	3308      	adds	r3, #8
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
	for(uint16_t timer = 0; timer < NUM_TIMER; timer++){
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	3301      	adds	r3, #1
 8000766:	80fb      	strh	r3, [r7, #6]
 8000768:	88fb      	ldrh	r3, [r7, #6]
 800076a:	2b03      	cmp	r3, #3
 800076c:	d9de      	bls.n	800072c <init_timer+0x28>
	}
}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000064 	.word	0x20000064

0800077c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	for(uint16_t timer = 0; timer < NUM_TIMER; timer++){
 8000784:	2300      	movs	r3, #0
 8000786:	81fb      	strh	r3, [r7, #14]
 8000788:	e03a      	b.n	8000800 <HAL_TIM_PeriodElapsedCallback+0x84>
		timers[timer].counter--;
 800078a:	89fa      	ldrh	r2, [r7, #14]
 800078c:	4921      	ldr	r1, [pc, #132]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800078e:	4613      	mov	r3, r2
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	4413      	add	r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	440b      	add	r3, r1
 8000798:	3304      	adds	r3, #4
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	1e59      	subs	r1, r3, #1
 800079e:	481d      	ldr	r0, [pc, #116]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80007a0:	4613      	mov	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4403      	add	r3, r0
 80007aa:	3304      	adds	r3, #4
 80007ac:	6019      	str	r1, [r3, #0]
		if(timers[timer].counter <= 0){
 80007ae:	89fa      	ldrh	r2, [r7, #14]
 80007b0:	4918      	ldr	r1, [pc, #96]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80007b2:	4613      	mov	r3, r2
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	4413      	add	r3, r2
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	440b      	add	r3, r1
 80007bc:	3304      	adds	r3, #4
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	dc1a      	bgt.n	80007fa <HAL_TIM_PeriodElapsedCallback+0x7e>
			timers[timer].flag = TURN_ON; 	// Raise the flag
 80007c4:	89fa      	ldrh	r2, [r7, #14]
 80007c6:	4913      	ldr	r1, [pc, #76]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80007c8:	4613      	mov	r3, r2
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	4413      	add	r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	440b      	add	r3, r1
 80007d2:	3308      	adds	r3, #8
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
			timers[timer].counter = timers[timer].limit;	// Reset counter
 80007d8:	89f9      	ldrh	r1, [r7, #14]
 80007da:	89fa      	ldrh	r2, [r7, #14]
 80007dc:	480d      	ldr	r0, [pc, #52]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80007de:	460b      	mov	r3, r1
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	440b      	add	r3, r1
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4403      	add	r3, r0
 80007e8:	6819      	ldr	r1, [r3, #0]
 80007ea:	480a      	ldr	r0, [pc, #40]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80007ec:	4613      	mov	r3, r2
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	4413      	add	r3, r2
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	4403      	add	r3, r0
 80007f6:	3304      	adds	r3, #4
 80007f8:	6019      	str	r1, [r3, #0]
	for(uint16_t timer = 0; timer < NUM_TIMER; timer++){
 80007fa:	89fb      	ldrh	r3, [r7, #14]
 80007fc:	3301      	adds	r3, #1
 80007fe:	81fb      	strh	r3, [r7, #14]
 8000800:	89fb      	ldrh	r3, [r7, #14]
 8000802:	2b03      	cmp	r3, #3
 8000804:	d9c1      	bls.n	800078a <HAL_TIM_PeriodElapsedCallback+0xe>
		}
	}
}
 8000806:	bf00      	nop
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000064 	.word	0x20000064

08000818 <fsm_led_indicator>:
#define DEFAULT_MODIFY_VALUE 100
BUTTON_PURPOSE button_to_response = NONE;
uint16_t modifyValue = DEFAULT_MODIFY_VALUE;

/* Private function  */
void fsm_led_indicator(){
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
	if(system.mode == NORMAL){
 800081e:	4b31      	ldr	r3, [pc, #196]	; (80008e4 <fsm_led_indicator+0xcc>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d151      	bne.n	80008ca <fsm_led_indicator+0xb2>
		// Display traffic color as normal
		display_led_indicator(SIDE_A, system.colors[SIDE_A]);
 8000826:	4b2f      	ldr	r3, [pc, #188]	; (80008e4 <fsm_led_indicator+0xcc>)
 8000828:	7b1b      	ldrb	r3, [r3, #12]
 800082a:	4619      	mov	r1, r3
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff fda3 	bl	8000378 <display_led_indicator>
		display_led_indicator(SIDE_B, system.colors[SIDE_B]);
 8000832:	4b2c      	ldr	r3, [pc, #176]	; (80008e4 <fsm_led_indicator+0xcc>)
 8000834:	7b5b      	ldrb	r3, [r3, #13]
 8000836:	4619      	mov	r1, r3
 8000838:	2001      	movs	r0, #1
 800083a:	f7ff fd9d 	bl	8000378 <display_led_indicator>

		// Change color state each side
		for(uint8_t side = 0; side < NUM_SIDE; side++){
 800083e:	2300      	movs	r3, #0
 8000840:	71fb      	strb	r3, [r7, #7]
 8000842:	e03e      	b.n	80008c2 <fsm_led_indicator+0xaa>
			if(system.countDownTimer[side] <= 0){
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	4a27      	ldr	r2, [pc, #156]	; (80008e4 <fsm_led_indicator+0xcc>)
 8000848:	3304      	adds	r3, #4
 800084a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d133      	bne.n	80008ba <fsm_led_indicator+0xa2>
				switch(system.colors[side]){
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	4a23      	ldr	r2, [pc, #140]	; (80008e4 <fsm_led_indicator+0xcc>)
 8000856:	4413      	add	r3, r2
 8000858:	7b1b      	ldrb	r3, [r3, #12]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d020      	beq.n	80008a0 <fsm_led_indicator+0x88>
 800085e:	2b02      	cmp	r3, #2
 8000860:	dc2c      	bgt.n	80008bc <fsm_led_indicator+0xa4>
 8000862:	2b00      	cmp	r3, #0
 8000864:	d002      	beq.n	800086c <fsm_led_indicator+0x54>
 8000866:	2b01      	cmp	r3, #1
 8000868:	d00d      	beq.n	8000886 <fsm_led_indicator+0x6e>
 800086a:	e027      	b.n	80008bc <fsm_led_indicator+0xa4>
				case RED:
					system.colors[side] = GREEN;
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	4a1d      	ldr	r2, [pc, #116]	; (80008e4 <fsm_led_indicator+0xcc>)
 8000870:	4413      	add	r3, r2
 8000872:	2202      	movs	r2, #2
 8000874:	731a      	strb	r2, [r3, #12]
					system.countDownTimer[side] = system.countDownLimit[GREEN];
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	4a1a      	ldr	r2, [pc, #104]	; (80008e4 <fsm_led_indicator+0xcc>)
 800087a:	88d1      	ldrh	r1, [r2, #6]
 800087c:	4a19      	ldr	r2, [pc, #100]	; (80008e4 <fsm_led_indicator+0xcc>)
 800087e:	3304      	adds	r3, #4
 8000880:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					break;
 8000884:	e01a      	b.n	80008bc <fsm_led_indicator+0xa4>
				case AMBER:
					system.colors[side] = RED;
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <fsm_led_indicator+0xcc>)
 800088a:	4413      	add	r3, r2
 800088c:	2200      	movs	r2, #0
 800088e:	731a      	strb	r2, [r3, #12]
					system.countDownTimer[side] = system.countDownLimit[RED];
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <fsm_led_indicator+0xcc>)
 8000894:	8851      	ldrh	r1, [r2, #2]
 8000896:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <fsm_led_indicator+0xcc>)
 8000898:	3304      	adds	r3, #4
 800089a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					break;
 800089e:	e00d      	b.n	80008bc <fsm_led_indicator+0xa4>
				case GREEN:
					system.colors[side] = AMBER;
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <fsm_led_indicator+0xcc>)
 80008a4:	4413      	add	r3, r2
 80008a6:	2201      	movs	r2, #1
 80008a8:	731a      	strb	r2, [r3, #12]
					system.countDownTimer[side] = system.countDownLimit[AMBER];
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <fsm_led_indicator+0xcc>)
 80008ae:	8891      	ldrh	r1, [r2, #4]
 80008b0:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <fsm_led_indicator+0xcc>)
 80008b2:	3304      	adds	r3, #4
 80008b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80008b8:	e000      	b.n	80008bc <fsm_led_indicator+0xa4>
				}
			}
 80008ba:	bf00      	nop
		for(uint8_t side = 0; side < NUM_SIDE; side++){
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	3301      	adds	r3, #1
 80008c0:	71fb      	strb	r3, [r7, #7]
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d9bd      	bls.n	8000844 <fsm_led_indicator+0x2c>
		if(timers[TIMER_LED_INDICATOR].flag == TURN_ON){
			blink_all_led();
			timers[TIMER_LED_INDICATOR].flag = TURN_OFF;
		}
	}
}
 80008c8:	e008      	b.n	80008dc <fsm_led_indicator+0xc4>
		if(timers[TIMER_LED_INDICATOR].flag == TURN_ON){
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <fsm_led_indicator+0xd0>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d104      	bne.n	80008dc <fsm_led_indicator+0xc4>
			blink_all_led();
 80008d2:	f7ff fd9d 	bl	8000410 <blink_all_led>
			timers[TIMER_LED_INDICATOR].flag = TURN_OFF;
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <fsm_led_indicator+0xd0>)
 80008d8:	2201      	movs	r2, #1
 80008da:	615a      	str	r2, [r3, #20]
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000244 	.word	0x20000244
 80008e8:	20000064 	.word	0x20000064

080008ec <fsm_led_segment>:

void fsm_led_segment(){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	display_led_segment();
 80008f0:	f7ff fe4e 	bl	8000590 <display_led_segment>
	switch(system.mode){
 80008f4:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <fsm_led_segment+0xc4>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d853      	bhi.n	80009a4 <fsm_led_segment+0xb8>
 80008fc:	a201      	add	r2, pc, #4	; (adr r2, 8000904 <fsm_led_segment+0x18>)
 80008fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000902:	bf00      	nop
 8000904:	08000915 	.word	0x08000915
 8000908:	0800094f 	.word	0x0800094f
 800090c:	0800096b 	.word	0x0800096b
 8000910:	08000987 	.word	0x08000987
	// Traffic light running normally
	case NORMAL:
		if(timers[TIMER_SECOND].flag == TURN_ON){
 8000914:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <fsm_led_segment+0xc8>)
 8000916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000918:	2b00      	cmp	r3, #0
 800091a:	d142      	bne.n	80009a2 <fsm_led_segment+0xb6>
			// Count down each second
			system.countDownTimer[SIDE_A]--;
 800091c:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <fsm_led_segment+0xc4>)
 800091e:	891b      	ldrh	r3, [r3, #8]
 8000920:	3b01      	subs	r3, #1
 8000922:	b29a      	uxth	r2, r3
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <fsm_led_segment+0xc4>)
 8000926:	811a      	strh	r2, [r3, #8]
			system.countDownTimer[SIDE_B]--;
 8000928:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <fsm_led_segment+0xc4>)
 800092a:	895b      	ldrh	r3, [r3, #10]
 800092c:	3b01      	subs	r3, #1
 800092e:	b29a      	uxth	r2, r3
 8000930:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <fsm_led_segment+0xc4>)
 8000932:	815a      	strh	r2, [r3, #10]
			// Display the count down number
			modify_led_segment_buffer(SIDE_A, system.countDownTimer[SIDE_A]);
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <fsm_led_segment+0xc4>)
 8000936:	891b      	ldrh	r3, [r3, #8]
 8000938:	4619      	mov	r1, r3
 800093a:	2000      	movs	r0, #0
 800093c:	f7ff fdf2 	bl	8000524 <modify_led_segment_buffer>
			modify_led_segment_buffer(SIDE_B, system.countDownTimer[SIDE_B]);
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <fsm_led_segment+0xc4>)
 8000942:	895b      	ldrh	r3, [r3, #10]
 8000944:	4619      	mov	r1, r3
 8000946:	2001      	movs	r0, #1
 8000948:	f7ff fdec 	bl	8000524 <modify_led_segment_buffer>
		}
		break;
 800094c:	e029      	b.n	80009a2 <fsm_led_segment+0xb6>
	// Other cases: Modify mode
	case MODIFY_RED:
		modify_led_segment_buffer(SIDE_A, system.mode);
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <fsm_led_segment+0xc4>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b29b      	uxth	r3, r3
 8000954:	4619      	mov	r1, r3
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff fde4 	bl	8000524 <modify_led_segment_buffer>
		modify_led_segment_buffer(SIDE_B, system.countDownLimit[RED]);
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <fsm_led_segment+0xc4>)
 800095e:	885b      	ldrh	r3, [r3, #2]
 8000960:	4619      	mov	r1, r3
 8000962:	2001      	movs	r0, #1
 8000964:	f7ff fdde 	bl	8000524 <modify_led_segment_buffer>
		break;
 8000968:	e01c      	b.n	80009a4 <fsm_led_segment+0xb8>
	case MODIFY_AMBER:
		modify_led_segment_buffer(SIDE_A, system.mode);
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <fsm_led_segment+0xc4>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	b29b      	uxth	r3, r3
 8000970:	4619      	mov	r1, r3
 8000972:	2000      	movs	r0, #0
 8000974:	f7ff fdd6 	bl	8000524 <modify_led_segment_buffer>
		modify_led_segment_buffer(SIDE_B, system.countDownLimit[AMBER]);
 8000978:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <fsm_led_segment+0xc4>)
 800097a:	889b      	ldrh	r3, [r3, #4]
 800097c:	4619      	mov	r1, r3
 800097e:	2001      	movs	r0, #1
 8000980:	f7ff fdd0 	bl	8000524 <modify_led_segment_buffer>
		break;
 8000984:	e00e      	b.n	80009a4 <fsm_led_segment+0xb8>
	case MODIFY_GREEN:
		modify_led_segment_buffer(SIDE_A, system.mode);
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <fsm_led_segment+0xc4>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b29b      	uxth	r3, r3
 800098c:	4619      	mov	r1, r3
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff fdc8 	bl	8000524 <modify_led_segment_buffer>
		modify_led_segment_buffer(SIDE_B, system.countDownLimit[GREEN]);
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <fsm_led_segment+0xc4>)
 8000996:	88db      	ldrh	r3, [r3, #6]
 8000998:	4619      	mov	r1, r3
 800099a:	2001      	movs	r0, #1
 800099c:	f7ff fdc2 	bl	8000524 <modify_led_segment_buffer>
		break;
 80009a0:	e000      	b.n	80009a4 <fsm_led_segment+0xb8>
		break;
 80009a2:	bf00      	nop
	}
	// Reset timer flag of second tracker
	timers[TIMER_SECOND].flag = TURN_OFF;
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <fsm_led_segment+0xc8>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000244 	.word	0x20000244
 80009b4:	20000064 	.word	0x20000064

080009b8 <init_fsm_traffic_light_system>:
			button_to_response = index;
	}
}

/* Public function  */
void init_fsm_traffic_light_system(){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
	// Initiate sub-modules
	init_timer();
 80009be:	f7ff fea1 	bl	8000704 <init_timer>
	init_led_indicator();
 80009c2:	f7ff fc99 	bl	80002f8 <init_led_indicator>
	init_led_segment();
 80009c6:	f7ff fd39 	bl	800043c <init_led_segment>
	init_button();
 80009ca:	f7ff fbc7 	bl	800015c <init_button>

	// Set initial values for traffic light
	system.mode = NORMAL;
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <init_fsm_traffic_light_system+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
	system.colors[SIDE_A] = RED;
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <init_fsm_traffic_light_system+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	731a      	strb	r2, [r3, #12]
	system.colors[SIDE_B] = GREEN;
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <init_fsm_traffic_light_system+0x74>)
 80009dc:	2202      	movs	r2, #2
 80009de:	735a      	strb	r2, [r3, #13]
	system.countDownLimit[RED] = 5;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <init_fsm_traffic_light_system+0x74>)
 80009e2:	2205      	movs	r2, #5
 80009e4:	805a      	strh	r2, [r3, #2]
	system.countDownLimit[AMBER] = 2;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <init_fsm_traffic_light_system+0x74>)
 80009e8:	2202      	movs	r2, #2
 80009ea:	809a      	strh	r2, [r3, #4]
	system.countDownLimit[GREEN] = 3;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <init_fsm_traffic_light_system+0x74>)
 80009ee:	2203      	movs	r2, #3
 80009f0:	80da      	strh	r2, [r3, #6]
	for(uint8_t side = 0; side < NUM_SIDE; side++){
 80009f2:	2300      	movs	r3, #0
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	e010      	b.n	8000a1a <init_fsm_traffic_light_system+0x62>
		system.countDownTimer[side] = system.countDownLimit[system.colors[side]];
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	4a0c      	ldr	r2, [pc, #48]	; (8000a2c <init_fsm_traffic_light_system+0x74>)
 80009fc:	4413      	add	r3, r2
 80009fe:	7b1b      	ldrb	r3, [r3, #12]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	490a      	ldr	r1, [pc, #40]	; (8000a2c <init_fsm_traffic_light_system+0x74>)
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	440b      	add	r3, r1
 8000a08:	8858      	ldrh	r0, [r3, #2]
 8000a0a:	4908      	ldr	r1, [pc, #32]	; (8000a2c <init_fsm_traffic_light_system+0x74>)
 8000a0c:	1d13      	adds	r3, r2, #4
 8000a0e:	4602      	mov	r2, r0
 8000a10:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(uint8_t side = 0; side < NUM_SIDE; side++){
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	3301      	adds	r3, #1
 8000a18:	71fb      	strb	r3, [r7, #7]
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d9eb      	bls.n	80009f8 <init_fsm_traffic_light_system+0x40>
	}
}
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000244 	.word	0x20000244

08000a30 <fsm_traffic_light_system>:

void fsm_traffic_light_system(){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	/* Output display: led indicator, led segment*/
	fsm_led_indicator();
 8000a34:	f7ff fef0 	bl	8000818 <fsm_led_indicator>
	fsm_led_segment();
 8000a38:	f7ff ff58 	bl	80008ec <fsm_led_segment>
//	fsm_button();

	/* Finite state machine: Button to mode */
	switch(button_to_response){
 8000a3c:	4b3b      	ldr	r3, [pc, #236]	; (8000b2c <fsm_traffic_light_system+0xfc>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d059      	beq.n	8000af8 <fsm_traffic_light_system+0xc8>
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	dc6c      	bgt.n	8000b22 <fsm_traffic_light_system+0xf2>
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d002      	beq.n	8000a52 <fsm_traffic_light_system+0x22>
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d038      	beq.n	8000ac2 <fsm_traffic_light_system+0x92>
 8000a50:	e067      	b.n	8000b22 <fsm_traffic_light_system+0xf2>
	case SELECT_MODE:
		// Go to next mode, reset modify value
		system.mode = (system.mode + 1) % NUM_MODE;
 8000a52:	4b37      	ldr	r3, [pc, #220]	; (8000b30 <fsm_traffic_light_system+0x100>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	425a      	negs	r2, r3
 8000a5a:	f003 0303 	and.w	r3, r3, #3
 8000a5e:	f002 0203 	and.w	r2, r2, #3
 8000a62:	bf58      	it	pl
 8000a64:	4253      	negpl	r3, r2
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <fsm_traffic_light_system+0x100>)
 8000a6a:	701a      	strb	r2, [r3, #0]
		modifyValue = DEFAULT_MODIFY_VALUE;
 8000a6c:	4b31      	ldr	r3, [pc, #196]	; (8000b34 <fsm_traffic_light_system+0x104>)
 8000a6e:	2264      	movs	r2, #100	; 0x64
 8000a70:	801a      	strh	r2, [r3, #0]
		if(system.mode == NORMAL){
 8000a72:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <fsm_traffic_light_system+0x100>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d10c      	bne.n	8000a94 <fsm_traffic_light_system+0x64>
			// Display LEDs segment: Traffic count down
			modify_led_segment_buffer(SIDE_A, system.countDownTimer[SIDE_A]);
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <fsm_traffic_light_system+0x100>)
 8000a7c:	891b      	ldrh	r3, [r3, #8]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	2000      	movs	r0, #0
 8000a82:	f7ff fd4f 	bl	8000524 <modify_led_segment_buffer>
			modify_led_segment_buffer(SIDE_B, system.countDownTimer[SIDE_B]);
 8000a86:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <fsm_traffic_light_system+0x100>)
 8000a88:	895b      	ldrh	r3, [r3, #10]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f7ff fd49 	bl	8000524 <modify_led_segment_buffer>
			// Display LEDs segment: Mode, Modify value
			modify_led_segment_buffer(SIDE_A, system.mode);
			modifyValue = system.countDownLimit[system.mode - 1];
			modify_led_segment_buffer(SIDE_B, modifyValue);
		}
		break;
 8000a92:	e046      	b.n	8000b22 <fsm_traffic_light_system+0xf2>
			modify_led_segment_buffer(SIDE_A, system.mode);
 8000a94:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <fsm_traffic_light_system+0x100>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff fd41 	bl	8000524 <modify_led_segment_buffer>
			modifyValue = system.countDownLimit[system.mode - 1];
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <fsm_traffic_light_system+0x100>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <fsm_traffic_light_system+0x100>)
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	4413      	add	r3, r2
 8000aae:	885a      	ldrh	r2, [r3, #2]
 8000ab0:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <fsm_traffic_light_system+0x104>)
 8000ab2:	801a      	strh	r2, [r3, #0]
			modify_led_segment_buffer(SIDE_B, modifyValue);
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <fsm_traffic_light_system+0x104>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	2001      	movs	r0, #1
 8000abc:	f7ff fd32 	bl	8000524 <modify_led_segment_buffer>
		break;
 8000ac0:	e02f      	b.n	8000b22 <fsm_traffic_light_system+0xf2>
	case MODIFY_VALUE:
		if(system.mode != NORMAL){
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <fsm_traffic_light_system+0x100>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d028      	beq.n	8000b1c <fsm_traffic_light_system+0xec>
			// Increase value
			modifyValue = (modifyValue + 1) % DEFAULT_MODIFY_VALUE;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <fsm_traffic_light_system+0x104>)
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	4a19      	ldr	r2, [pc, #100]	; (8000b38 <fsm_traffic_light_system+0x108>)
 8000ad2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ad6:	1151      	asrs	r1, r2, #5
 8000ad8:	17da      	asrs	r2, r3, #31
 8000ada:	1a8a      	subs	r2, r1, r2
 8000adc:	2164      	movs	r1, #100	; 0x64
 8000ade:	fb01 f202 	mul.w	r2, r1, r2
 8000ae2:	1a9a      	subs	r2, r3, r2
 8000ae4:	b292      	uxth	r2, r2
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <fsm_traffic_light_system+0x104>)
 8000ae8:	801a      	strh	r2, [r3, #0]
			modify_led_segment_buffer(SIDE_B, modifyValue);
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <fsm_traffic_light_system+0x104>)
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	4619      	mov	r1, r3
 8000af0:	2001      	movs	r0, #1
 8000af2:	f7ff fd17 	bl	8000524 <modify_led_segment_buffer>
		}
		break;
 8000af6:	e011      	b.n	8000b1c <fsm_traffic_light_system+0xec>
	case SELECT_VALUE:
		if(system.mode != NORMAL){
 8000af8:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <fsm_traffic_light_system+0x100>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00f      	beq.n	8000b20 <fsm_traffic_light_system+0xf0>
			// Save modified value
			system.countDownLimit[system.mode - 1] = modifyValue;
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <fsm_traffic_light_system+0x100>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	3b01      	subs	r3, #1
 8000b06:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <fsm_traffic_light_system+0x104>)
 8000b08:	8811      	ldrh	r1, [r2, #0]
 8000b0a:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <fsm_traffic_light_system+0x100>)
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	4413      	add	r3, r2
 8000b10:	460a      	mov	r2, r1
 8000b12:	805a      	strh	r2, [r3, #2]
			modifyValue = DEFAULT_MODIFY_VALUE;
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <fsm_traffic_light_system+0x104>)
 8000b16:	2264      	movs	r2, #100	; 0x64
 8000b18:	801a      	strh	r2, [r3, #0]
		}
		break;
 8000b1a:	e001      	b.n	8000b20 <fsm_traffic_light_system+0xf0>
		break;
 8000b1c:	bf00      	nop
 8000b1e:	e000      	b.n	8000b22 <fsm_traffic_light_system+0xf2>
		break;
 8000b20:	bf00      	nop
	}
	button_to_response = NONE;// Reset response trigger
 8000b22:	4b02      	ldr	r3, [pc, #8]	; (8000b2c <fsm_traffic_light_system+0xfc>)
 8000b24:	2203      	movs	r2, #3
 8000b26:	701a      	strb	r2, [r3, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000030 	.word	0x20000030
 8000b30:	20000244 	.word	0x20000244
 8000b34:	20000032 	.word	0x20000032
 8000b38:	51eb851f 	.word	0x51eb851f

08000b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b40:	f000 f9b4 	bl	8000eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b44:	f000 f80e 	bl	8000b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b48:	f000 f894 	bl	8000c74 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b4c:	f000 f846 	bl	8000bdc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b50:	4803      	ldr	r0, [pc, #12]	; (8000b60 <main+0x24>)
 8000b52:	f001 f8d9 	bl	8001d08 <HAL_TIM_Base_Start_IT>
  init_fsm_traffic_light_system();
 8000b56:	f7ff ff2f 	bl	80009b8 <init_fsm_traffic_light_system>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_traffic_light_system();
 8000b5a:	f7ff ff69 	bl	8000a30 <fsm_traffic_light_system>
 8000b5e:	e7fc      	b.n	8000b5a <main+0x1e>
 8000b60:	20000254 	.word	0x20000254

08000b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b090      	sub	sp, #64	; 0x40
 8000b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6a:	f107 0318 	add.w	r3, r7, #24
 8000b6e:	2228      	movs	r2, #40	; 0x28
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f001 fc84 	bl	8002480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b8e:	2310      	movs	r3, #16
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b96:	f107 0318 	add.w	r3, r7, #24
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fc88 	bl	80014b0 <HAL_RCC_OscConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ba6:	f000 f8c7 	bl	8000d38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000baa:	230f      	movs	r3, #15
 8000bac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 fef4 	bl	80019b0 <HAL_RCC_ClockConfig>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bce:	f000 f8b3 	bl	8000d38 <Error_Handler>
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	3740      	adds	r7, #64	; 0x40
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000bfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c02:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c08:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c10:	2209      	movs	r2, #9
 8000c12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c20:	4813      	ldr	r0, [pc, #76]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c22:	f001 f821 	bl	8001c68 <HAL_TIM_Base_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c2c:	f000 f884 	bl	8000d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c3e:	f001 f9b7 	bl	8001fb0 <HAL_TIM_ConfigClockSource>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c48:	f000 f876 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c54:	463b      	mov	r3, r7
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_TIM2_Init+0x94>)
 8000c5a:	f001 fb83 	bl	8002364 <HAL_TIMEx_MasterConfigSynchronization>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c64:	f000 f868 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000254 	.word	0x20000254

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <MX_GPIO_Init+0xb8>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a27      	ldr	r2, [pc, #156]	; (8000d2c <MX_GPIO_Init+0xb8>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <MX_GPIO_Init+0xb8>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <MX_GPIO_Init+0xb8>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <MX_GPIO_Init+0xb8>)
 8000ca6:	f043 0308 	orr.w	r3, r3, #8
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_GPIO_Init+0xb8>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0308 	and.w	r3, r3, #8
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_0_Pin|GREEN_0_Pin|AMBER_0_Pin|RED_1_Pin
 8000cb8:	2200      	movs	r2, #0
 8000cba:	217e      	movs	r1, #126	; 0x7e
 8000cbc:	481c      	ldr	r0, [pc, #112]	; (8000d30 <MX_GPIO_Init+0xbc>)
 8000cbe:	f000 fbdf 	bl	8001480 <HAL_GPIO_WritePin>
                          |GREEN_1_Pin|AMBER_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|EN1_RIGHT_Pin
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000cc8:	481a      	ldr	r0, [pc, #104]	; (8000d34 <MX_GPIO_Init+0xc0>)
 8000cca:	f000 fbd9 	bl	8001480 <HAL_GPIO_WritePin>
                          |SEG_D_Pin|SEG_E_Pin|SEG_F_Pin|SEG_G_Pin
                          |EN0_LEFT_Pin|EN0_RIGHT_Pin|EN1_LEFT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_0_Pin GREEN_0_Pin AMBER_0_Pin RED_1_Pin
                           GREEN_1_Pin AMBER_1_Pin */
  GPIO_InitStruct.Pin = RED_0_Pin|GREEN_0_Pin|AMBER_0_Pin|RED_1_Pin
 8000cce:	237e      	movs	r3, #126	; 0x7e
 8000cd0:	60bb      	str	r3, [r7, #8]
                          |GREEN_1_Pin|AMBER_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4812      	ldr	r0, [pc, #72]	; (8000d30 <MX_GPIO_Init+0xbc>)
 8000ce6:	f000 fa51 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin EN1_RIGHT_Pin
                           SEG_D_Pin SEG_E_Pin SEG_F_Pin SEG_G_Pin
                           EN0_LEFT_Pin EN0_RIGHT_Pin EN1_LEFT_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|EN1_RIGHT_Pin
 8000cea:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000cee:	60bb      	str	r3, [r7, #8]
                          |SEG_D_Pin|SEG_E_Pin|SEG_F_Pin|SEG_G_Pin
                          |EN0_LEFT_Pin|EN0_RIGHT_Pin|EN1_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	f107 0308 	add.w	r3, r7, #8
 8000d00:	4619      	mov	r1, r3
 8000d02:	480c      	ldr	r0, [pc, #48]	; (8000d34 <MX_GPIO_Init+0xc0>)
 8000d04:	f000 fa42 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000d08:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_GPIO_Init+0xc0>)
 8000d1e:	f000 fa35 	bl	800118c <HAL_GPIO_Init>

}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010800 	.word	0x40010800
 8000d34:	40010c00 	.word	0x40010c00

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <Error_Handler+0x8>
	...

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_MspInit+0x5c>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <HAL_MspInit+0x5c>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6193      	str	r3, [r2, #24]
 8000d56:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_MspInit+0x5c>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <HAL_MspInit+0x5c>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <HAL_MspInit+0x5c>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	61d3      	str	r3, [r2, #28]
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <HAL_MspInit+0x5c>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_MspInit+0x60>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <HAL_MspInit+0x60>)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40010000 	.word	0x40010000

08000da8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db8:	d113      	bne.n	8000de2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <HAL_TIM_Base_MspInit+0x44>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <HAL_TIM_Base_MspInit+0x44>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	61d3      	str	r3, [r2, #28]
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_TIM_Base_MspInit+0x44>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	201c      	movs	r0, #28
 8000dd8:	f000 f9a1 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ddc:	201c      	movs	r0, #28
 8000dde:	f000 f9ba 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr

08000e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr

08000e32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e36:	f000 f87f 	bl	8000f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <TIM2_IRQHandler+0x10>)
 8000e46:	f000 ffab 	bl	8001da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000254 	.word	0x20000254

08000e54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e60:	f7ff fff8 	bl	8000e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e64:	480b      	ldr	r0, [pc, #44]	; (8000e94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e66:	490c      	ldr	r1, [pc, #48]	; (8000e98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e68:	4a0c      	ldr	r2, [pc, #48]	; (8000e9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a09      	ldr	r2, [pc, #36]	; (8000ea0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e7c:	4c09      	ldr	r4, [pc, #36]	; (8000ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f001 fad5 	bl	8002438 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e8e:	f7ff fe55 	bl	8000b3c <main>
  bx lr
 8000e92:	4770      	bx	lr
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000e9c:	08002524 	.word	0x08002524
  ldr r2, =_sbss
 8000ea0:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000ea4:	200002a0 	.word	0x200002a0

08000ea8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC1_2_IRQHandler>
	...

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_Init+0x28>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_Init+0x28>)
 8000eb6:	f043 0310 	orr.w	r3, r3, #16
 8000eba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 f923 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec2:	200f      	movs	r0, #15
 8000ec4:	f000 f808 	bl	8000ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec8:	f7ff ff3c 	bl	8000d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40022000 	.word	0x40022000

08000ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_InitTick+0x54>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x58>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f93b 	bl	8001172 <HAL_SYSTICK_Config>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00e      	b.n	8000f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	d80a      	bhi.n	8000f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	f000 f903 	bl	800111e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f18:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <HAL_InitTick+0x5c>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e000      	b.n	8000f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000034 	.word	0x20000034
 8000f30:	2000003c 	.word	0x2000003c
 8000f34:	20000038 	.word	0x20000038

08000f38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <HAL_IncTick+0x1c>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_IncTick+0x20>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a03      	ldr	r2, [pc, #12]	; (8000f58 <HAL_IncTick+0x20>)
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	2000003c 	.word	0x2000003c
 8000f58:	2000029c 	.word	0x2000029c

08000f5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b02      	ldr	r3, [pc, #8]	; (8000f6c <HAL_GetTick+0x10>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	2000029c 	.word	0x2000029c

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4906      	ldr	r1, [pc, #24]	; (8001008 <__NVIC_EnableIRQ+0x34>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100

0800100c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	db0a      	blt.n	8001036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	b2da      	uxtb	r2, r3
 8001024:	490c      	ldr	r1, [pc, #48]	; (8001058 <__NVIC_SetPriority+0x4c>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	0112      	lsls	r2, r2, #4
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	440b      	add	r3, r1
 8001030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001034:	e00a      	b.n	800104c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4908      	ldr	r1, [pc, #32]	; (800105c <__NVIC_SetPriority+0x50>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	3b04      	subs	r3, #4
 8001044:	0112      	lsls	r2, r2, #4
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	440b      	add	r3, r1
 800104a:	761a      	strb	r2, [r3, #24]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f1c3 0307 	rsb	r3, r3, #7
 800107a:	2b04      	cmp	r3, #4
 800107c:	bf28      	it	cs
 800107e:	2304      	movcs	r3, #4
 8001080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3304      	adds	r3, #4
 8001086:	2b06      	cmp	r3, #6
 8001088:	d902      	bls.n	8001090 <NVIC_EncodePriority+0x30>
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3b03      	subs	r3, #3
 800108e:	e000      	b.n	8001092 <NVIC_EncodePriority+0x32>
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 32ff 	mov.w	r2, #4294967295
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43da      	mvns	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	401a      	ands	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	43d9      	mvns	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	4313      	orrs	r3, r2
         );
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3724      	adds	r7, #36	; 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f7ff ff90 	bl	800100c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff2d 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff42 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff90 	bl	8001060 <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5f 	bl	800100c <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff35 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffa2 	bl	80010c4 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b08b      	sub	sp, #44	; 0x2c
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800119a:	2300      	movs	r3, #0
 800119c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119e:	e148      	b.n	8001432 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011a0:	2201      	movs	r2, #1
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	69fa      	ldr	r2, [r7, #28]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	f040 8137 	bne.w	800142c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4aa3      	ldr	r2, [pc, #652]	; (8001450 <HAL_GPIO_Init+0x2c4>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d05e      	beq.n	8001286 <HAL_GPIO_Init+0xfa>
 80011c8:	4aa1      	ldr	r2, [pc, #644]	; (8001450 <HAL_GPIO_Init+0x2c4>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d875      	bhi.n	80012ba <HAL_GPIO_Init+0x12e>
 80011ce:	4aa1      	ldr	r2, [pc, #644]	; (8001454 <HAL_GPIO_Init+0x2c8>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d058      	beq.n	8001286 <HAL_GPIO_Init+0xfa>
 80011d4:	4a9f      	ldr	r2, [pc, #636]	; (8001454 <HAL_GPIO_Init+0x2c8>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d86f      	bhi.n	80012ba <HAL_GPIO_Init+0x12e>
 80011da:	4a9f      	ldr	r2, [pc, #636]	; (8001458 <HAL_GPIO_Init+0x2cc>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d052      	beq.n	8001286 <HAL_GPIO_Init+0xfa>
 80011e0:	4a9d      	ldr	r2, [pc, #628]	; (8001458 <HAL_GPIO_Init+0x2cc>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d869      	bhi.n	80012ba <HAL_GPIO_Init+0x12e>
 80011e6:	4a9d      	ldr	r2, [pc, #628]	; (800145c <HAL_GPIO_Init+0x2d0>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d04c      	beq.n	8001286 <HAL_GPIO_Init+0xfa>
 80011ec:	4a9b      	ldr	r2, [pc, #620]	; (800145c <HAL_GPIO_Init+0x2d0>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d863      	bhi.n	80012ba <HAL_GPIO_Init+0x12e>
 80011f2:	4a9b      	ldr	r2, [pc, #620]	; (8001460 <HAL_GPIO_Init+0x2d4>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d046      	beq.n	8001286 <HAL_GPIO_Init+0xfa>
 80011f8:	4a99      	ldr	r2, [pc, #612]	; (8001460 <HAL_GPIO_Init+0x2d4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d85d      	bhi.n	80012ba <HAL_GPIO_Init+0x12e>
 80011fe:	2b12      	cmp	r3, #18
 8001200:	d82a      	bhi.n	8001258 <HAL_GPIO_Init+0xcc>
 8001202:	2b12      	cmp	r3, #18
 8001204:	d859      	bhi.n	80012ba <HAL_GPIO_Init+0x12e>
 8001206:	a201      	add	r2, pc, #4	; (adr r2, 800120c <HAL_GPIO_Init+0x80>)
 8001208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120c:	08001287 	.word	0x08001287
 8001210:	08001261 	.word	0x08001261
 8001214:	08001273 	.word	0x08001273
 8001218:	080012b5 	.word	0x080012b5
 800121c:	080012bb 	.word	0x080012bb
 8001220:	080012bb 	.word	0x080012bb
 8001224:	080012bb 	.word	0x080012bb
 8001228:	080012bb 	.word	0x080012bb
 800122c:	080012bb 	.word	0x080012bb
 8001230:	080012bb 	.word	0x080012bb
 8001234:	080012bb 	.word	0x080012bb
 8001238:	080012bb 	.word	0x080012bb
 800123c:	080012bb 	.word	0x080012bb
 8001240:	080012bb 	.word	0x080012bb
 8001244:	080012bb 	.word	0x080012bb
 8001248:	080012bb 	.word	0x080012bb
 800124c:	080012bb 	.word	0x080012bb
 8001250:	08001269 	.word	0x08001269
 8001254:	0800127d 	.word	0x0800127d
 8001258:	4a82      	ldr	r2, [pc, #520]	; (8001464 <HAL_GPIO_Init+0x2d8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d013      	beq.n	8001286 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800125e:	e02c      	b.n	80012ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	623b      	str	r3, [r7, #32]
          break;
 8001266:	e029      	b.n	80012bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	3304      	adds	r3, #4
 800126e:	623b      	str	r3, [r7, #32]
          break;
 8001270:	e024      	b.n	80012bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	3308      	adds	r3, #8
 8001278:	623b      	str	r3, [r7, #32]
          break;
 800127a:	e01f      	b.n	80012bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	330c      	adds	r3, #12
 8001282:	623b      	str	r3, [r7, #32]
          break;
 8001284:	e01a      	b.n	80012bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800128e:	2304      	movs	r3, #4
 8001290:	623b      	str	r3, [r7, #32]
          break;
 8001292:	e013      	b.n	80012bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d105      	bne.n	80012a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800129c:	2308      	movs	r3, #8
 800129e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69fa      	ldr	r2, [r7, #28]
 80012a4:	611a      	str	r2, [r3, #16]
          break;
 80012a6:	e009      	b.n	80012bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a8:	2308      	movs	r3, #8
 80012aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69fa      	ldr	r2, [r7, #28]
 80012b0:	615a      	str	r2, [r3, #20]
          break;
 80012b2:	e003      	b.n	80012bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
          break;
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_Init+0x130>
          break;
 80012ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	2bff      	cmp	r3, #255	; 0xff
 80012c0:	d801      	bhi.n	80012c6 <HAL_GPIO_Init+0x13a>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	e001      	b.n	80012ca <HAL_GPIO_Init+0x13e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3304      	adds	r3, #4
 80012ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	2bff      	cmp	r3, #255	; 0xff
 80012d0:	d802      	bhi.n	80012d8 <HAL_GPIO_Init+0x14c>
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	e002      	b.n	80012de <HAL_GPIO_Init+0x152>
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	3b08      	subs	r3, #8
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	210f      	movs	r1, #15
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	401a      	ands	r2, r3
 80012f0:	6a39      	ldr	r1, [r7, #32]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	fa01 f303 	lsl.w	r3, r1, r3
 80012f8:	431a      	orrs	r2, r3
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8090 	beq.w	800142c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800130c:	4b56      	ldr	r3, [pc, #344]	; (8001468 <HAL_GPIO_Init+0x2dc>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a55      	ldr	r2, [pc, #340]	; (8001468 <HAL_GPIO_Init+0x2dc>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b53      	ldr	r3, [pc, #332]	; (8001468 <HAL_GPIO_Init+0x2dc>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001324:	4a51      	ldr	r2, [pc, #324]	; (800146c <HAL_GPIO_Init+0x2e0>)
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	3302      	adds	r3, #2
 800132c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001330:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	220f      	movs	r2, #15
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	4013      	ands	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a49      	ldr	r2, [pc, #292]	; (8001470 <HAL_GPIO_Init+0x2e4>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d00d      	beq.n	800136c <HAL_GPIO_Init+0x1e0>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a48      	ldr	r2, [pc, #288]	; (8001474 <HAL_GPIO_Init+0x2e8>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d007      	beq.n	8001368 <HAL_GPIO_Init+0x1dc>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a47      	ldr	r2, [pc, #284]	; (8001478 <HAL_GPIO_Init+0x2ec>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d101      	bne.n	8001364 <HAL_GPIO_Init+0x1d8>
 8001360:	2302      	movs	r3, #2
 8001362:	e004      	b.n	800136e <HAL_GPIO_Init+0x1e2>
 8001364:	2303      	movs	r3, #3
 8001366:	e002      	b.n	800136e <HAL_GPIO_Init+0x1e2>
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <HAL_GPIO_Init+0x1e2>
 800136c:	2300      	movs	r3, #0
 800136e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001370:	f002 0203 	and.w	r2, r2, #3
 8001374:	0092      	lsls	r2, r2, #2
 8001376:	4093      	lsls	r3, r2
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	4313      	orrs	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800137e:	493b      	ldr	r1, [pc, #236]	; (800146c <HAL_GPIO_Init+0x2e0>)
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d006      	beq.n	80013a6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001398:	4b38      	ldr	r3, [pc, #224]	; (800147c <HAL_GPIO_Init+0x2f0>)
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	4937      	ldr	r1, [pc, #220]	; (800147c <HAL_GPIO_Init+0x2f0>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	608b      	str	r3, [r1, #8]
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013a6:	4b35      	ldr	r3, [pc, #212]	; (800147c <HAL_GPIO_Init+0x2f0>)
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	4933      	ldr	r1, [pc, #204]	; (800147c <HAL_GPIO_Init+0x2f0>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d006      	beq.n	80013ce <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013c0:	4b2e      	ldr	r3, [pc, #184]	; (800147c <HAL_GPIO_Init+0x2f0>)
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	492d      	ldr	r1, [pc, #180]	; (800147c <HAL_GPIO_Init+0x2f0>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	60cb      	str	r3, [r1, #12]
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013ce:	4b2b      	ldr	r3, [pc, #172]	; (800147c <HAL_GPIO_Init+0x2f0>)
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	4929      	ldr	r1, [pc, #164]	; (800147c <HAL_GPIO_Init+0x2f0>)
 80013d8:	4013      	ands	r3, r2
 80013da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013e8:	4b24      	ldr	r3, [pc, #144]	; (800147c <HAL_GPIO_Init+0x2f0>)
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	4923      	ldr	r1, [pc, #140]	; (800147c <HAL_GPIO_Init+0x2f0>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <HAL_GPIO_Init+0x2f0>)
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	491f      	ldr	r1, [pc, #124]	; (800147c <HAL_GPIO_Init+0x2f0>)
 8001400:	4013      	ands	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d006      	beq.n	800141e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_GPIO_Init+0x2f0>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4919      	ldr	r1, [pc, #100]	; (800147c <HAL_GPIO_Init+0x2f0>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	600b      	str	r3, [r1, #0]
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_GPIO_Init+0x2f0>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	43db      	mvns	r3, r3
 8001426:	4915      	ldr	r1, [pc, #84]	; (800147c <HAL_GPIO_Init+0x2f0>)
 8001428:	4013      	ands	r3, r2
 800142a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	3301      	adds	r3, #1
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	fa22 f303 	lsr.w	r3, r2, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	f47f aeaf 	bne.w	80011a0 <HAL_GPIO_Init+0x14>
  }
}
 8001442:	bf00      	nop
 8001444:	bf00      	nop
 8001446:	372c      	adds	r7, #44	; 0x2c
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	10320000 	.word	0x10320000
 8001454:	10310000 	.word	0x10310000
 8001458:	10220000 	.word	0x10220000
 800145c:	10210000 	.word	0x10210000
 8001460:	10120000 	.word	0x10120000
 8001464:	10110000 	.word	0x10110000
 8001468:	40021000 	.word	0x40021000
 800146c:	40010000 	.word	0x40010000
 8001470:	40010800 	.word	0x40010800
 8001474:	40010c00 	.word	0x40010c00
 8001478:	40011000 	.word	0x40011000
 800147c:	40010400 	.word	0x40010400

08001480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
 800148c:	4613      	mov	r3, r2
 800148e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001490:	787b      	ldrb	r3, [r7, #1]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800149c:	e003      	b.n	80014a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	041a      	lsls	r2, r3, #16
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	611a      	str	r2, [r3, #16]
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e26c      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 8087 	beq.w	80015de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014d0:	4b92      	ldr	r3, [pc, #584]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d00c      	beq.n	80014f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014dc:	4b8f      	ldr	r3, [pc, #572]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 030c 	and.w	r3, r3, #12
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d112      	bne.n	800150e <HAL_RCC_OscConfig+0x5e>
 80014e8:	4b8c      	ldr	r3, [pc, #560]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f4:	d10b      	bne.n	800150e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f6:	4b89      	ldr	r3, [pc, #548]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d06c      	beq.n	80015dc <HAL_RCC_OscConfig+0x12c>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d168      	bne.n	80015dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e246      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x76>
 8001518:	4b80      	ldr	r3, [pc, #512]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a7f      	ldr	r2, [pc, #508]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800151e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	e02e      	b.n	8001584 <HAL_RCC_OscConfig+0xd4>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x98>
 800152e:	4b7b      	ldr	r3, [pc, #492]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a7a      	ldr	r2, [pc, #488]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b78      	ldr	r3, [pc, #480]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a77      	ldr	r2, [pc, #476]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e01d      	b.n	8001584 <HAL_RCC_OscConfig+0xd4>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0xbc>
 8001552:	4b72      	ldr	r3, [pc, #456]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a71      	ldr	r2, [pc, #452]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4b6f      	ldr	r3, [pc, #444]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a6e      	ldr	r2, [pc, #440]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e00b      	b.n	8001584 <HAL_RCC_OscConfig+0xd4>
 800156c:	4b6b      	ldr	r3, [pc, #428]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a6a      	ldr	r2, [pc, #424]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b68      	ldr	r3, [pc, #416]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a67      	ldr	r2, [pc, #412]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 800157e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001582:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fce6 	bl	8000f5c <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fce2 	bl	8000f5c <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e1fa      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a6:	4b5d      	ldr	r3, [pc, #372]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0xe4>
 80015b2:	e014      	b.n	80015de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fcd2 	bl	8000f5c <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fcce 	bl	8000f5c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	; 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e1e6      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ce:	4b53      	ldr	r3, [pc, #332]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x10c>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d063      	beq.n	80016b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ea:	4b4c      	ldr	r3, [pc, #304]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00b      	beq.n	800160e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015f6:	4b49      	ldr	r3, [pc, #292]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d11c      	bne.n	800163c <HAL_RCC_OscConfig+0x18c>
 8001602:	4b46      	ldr	r3, [pc, #280]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d116      	bne.n	800163c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160e:	4b43      	ldr	r3, [pc, #268]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <HAL_RCC_OscConfig+0x176>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d001      	beq.n	8001626 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e1ba      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001626:	4b3d      	ldr	r3, [pc, #244]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4939      	ldr	r1, [pc, #228]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001636:	4313      	orrs	r3, r2
 8001638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163a:	e03a      	b.n	80016b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d020      	beq.n	8001686 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001644:	4b36      	ldr	r3, [pc, #216]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff fc87 	bl	8000f5c <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001652:	f7ff fc83 	bl	8000f5c <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e19b      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001670:	4b2a      	ldr	r3, [pc, #168]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4927      	ldr	r1, [pc, #156]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 8001680:	4313      	orrs	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
 8001684:	e015      	b.n	80016b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <HAL_RCC_OscConfig+0x270>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fc66 	bl	8000f5c <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001694:	f7ff fc62 	bl	8000f5c <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e17a      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d03a      	beq.n	8001734 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d019      	beq.n	80016fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <HAL_RCC_OscConfig+0x274>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016cc:	f7ff fc46 	bl	8000f5c <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d4:	f7ff fc42 	bl	8000f5c <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e15a      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_RCC_OscConfig+0x26c>)
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f000 fa9a 	bl	8001c2c <RCC_Delay>
 80016f8:	e01c      	b.n	8001734 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <HAL_RCC_OscConfig+0x274>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001700:	f7ff fc2c 	bl	8000f5c <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001706:	e00f      	b.n	8001728 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001708:	f7ff fc28 	bl	8000f5c <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d908      	bls.n	8001728 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e140      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000
 8001720:	42420000 	.word	0x42420000
 8001724:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001728:	4b9e      	ldr	r3, [pc, #632]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1e9      	bne.n	8001708 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80a6 	beq.w	800188e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001746:	4b97      	ldr	r3, [pc, #604]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10d      	bne.n	800176e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	4b94      	ldr	r3, [pc, #592]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4a93      	ldr	r2, [pc, #588]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175c:	61d3      	str	r3, [r2, #28]
 800175e:	4b91      	ldr	r3, [pc, #580]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800176a:	2301      	movs	r3, #1
 800176c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176e:	4b8e      	ldr	r3, [pc, #568]	; (80019a8 <HAL_RCC_OscConfig+0x4f8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001776:	2b00      	cmp	r3, #0
 8001778:	d118      	bne.n	80017ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800177a:	4b8b      	ldr	r3, [pc, #556]	; (80019a8 <HAL_RCC_OscConfig+0x4f8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a8a      	ldr	r2, [pc, #552]	; (80019a8 <HAL_RCC_OscConfig+0x4f8>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001786:	f7ff fbe9 	bl	8000f5c <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178e:	f7ff fbe5 	bl	8000f5c <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b64      	cmp	r3, #100	; 0x64
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e0fd      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a0:	4b81      	ldr	r3, [pc, #516]	; (80019a8 <HAL_RCC_OscConfig+0x4f8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d106      	bne.n	80017c2 <HAL_RCC_OscConfig+0x312>
 80017b4:	4b7b      	ldr	r3, [pc, #492]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4a7a      	ldr	r2, [pc, #488]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6213      	str	r3, [r2, #32]
 80017c0:	e02d      	b.n	800181e <HAL_RCC_OscConfig+0x36e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x334>
 80017ca:	4b76      	ldr	r3, [pc, #472]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	4a75      	ldr	r2, [pc, #468]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80017d0:	f023 0301 	bic.w	r3, r3, #1
 80017d4:	6213      	str	r3, [r2, #32]
 80017d6:	4b73      	ldr	r3, [pc, #460]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	4a72      	ldr	r2, [pc, #456]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80017dc:	f023 0304 	bic.w	r3, r3, #4
 80017e0:	6213      	str	r3, [r2, #32]
 80017e2:	e01c      	b.n	800181e <HAL_RCC_OscConfig+0x36e>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	2b05      	cmp	r3, #5
 80017ea:	d10c      	bne.n	8001806 <HAL_RCC_OscConfig+0x356>
 80017ec:	4b6d      	ldr	r3, [pc, #436]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4a6c      	ldr	r2, [pc, #432]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6213      	str	r3, [r2, #32]
 80017f8:	4b6a      	ldr	r3, [pc, #424]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4a69      	ldr	r2, [pc, #420]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6213      	str	r3, [r2, #32]
 8001804:	e00b      	b.n	800181e <HAL_RCC_OscConfig+0x36e>
 8001806:	4b67      	ldr	r3, [pc, #412]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4a66      	ldr	r2, [pc, #408]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	6213      	str	r3, [r2, #32]
 8001812:	4b64      	ldr	r3, [pc, #400]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4a63      	ldr	r2, [pc, #396]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001818:	f023 0304 	bic.w	r3, r3, #4
 800181c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d015      	beq.n	8001852 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001826:	f7ff fb99 	bl	8000f5c <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182c:	e00a      	b.n	8001844 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182e:	f7ff fb95 	bl	8000f5c <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f241 3288 	movw	r2, #5000	; 0x1388
 800183c:	4293      	cmp	r3, r2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e0ab      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001844:	4b57      	ldr	r3, [pc, #348]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0ee      	beq.n	800182e <HAL_RCC_OscConfig+0x37e>
 8001850:	e014      	b.n	800187c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001852:	f7ff fb83 	bl	8000f5c <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001858:	e00a      	b.n	8001870 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff fb7f 	bl	8000f5c <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f241 3288 	movw	r2, #5000	; 0x1388
 8001868:	4293      	cmp	r3, r2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e095      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001870:	4b4c      	ldr	r3, [pc, #304]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1ee      	bne.n	800185a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800187c:	7dfb      	ldrb	r3, [r7, #23]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d105      	bne.n	800188e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001882:	4b48      	ldr	r3, [pc, #288]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	4a47      	ldr	r2, [pc, #284]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800188c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 8081 	beq.w	800199a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001898:	4b42      	ldr	r3, [pc, #264]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 030c 	and.w	r3, r3, #12
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d061      	beq.n	8001968 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d146      	bne.n	800193a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ac:	4b3f      	ldr	r3, [pc, #252]	; (80019ac <HAL_RCC_OscConfig+0x4fc>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7ff fb53 	bl	8000f5c <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ba:	f7ff fb4f 	bl	8000f5c <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e067      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018cc:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f0      	bne.n	80018ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e0:	d108      	bne.n	80018f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018e2:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	492d      	ldr	r1, [pc, #180]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f4:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a19      	ldr	r1, [r3, #32]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	430b      	orrs	r3, r1
 8001906:	4927      	ldr	r1, [pc, #156]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800190c:	4b27      	ldr	r3, [pc, #156]	; (80019ac <HAL_RCC_OscConfig+0x4fc>)
 800190e:	2201      	movs	r2, #1
 8001910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001912:	f7ff fb23 	bl	8000f5c <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191a:	f7ff fb1f 	bl	8000f5c <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e037      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800192c:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0x46a>
 8001938:	e02f      	b.n	800199a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193a:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <HAL_RCC_OscConfig+0x4fc>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fb0c 	bl	8000f5c <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff fb08 	bl	8000f5c <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e020      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x498>
 8001966:	e018      	b.n	800199a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e013      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_RCC_OscConfig+0x4f4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	429a      	cmp	r2, r3
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d001      	beq.n	800199a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40007000 	.word	0x40007000
 80019ac:	42420060 	.word	0x42420060

080019b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0d0      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c4:	4b6a      	ldr	r3, [pc, #424]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d910      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b67      	ldr	r3, [pc, #412]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 0207 	bic.w	r2, r3, #7
 80019da:	4965      	ldr	r1, [pc, #404]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b63      	ldr	r3, [pc, #396]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0b8      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a0c:	4b59      	ldr	r3, [pc, #356]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4a58      	ldr	r2, [pc, #352]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a24:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a52      	ldr	r2, [pc, #328]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a30:	4b50      	ldr	r3, [pc, #320]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	494d      	ldr	r1, [pc, #308]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d040      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d115      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e07f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e073      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e06b      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8e:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f023 0203 	bic.w	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4936      	ldr	r1, [pc, #216]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa0:	f7ff fa5c 	bl	8000f5c <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa8:	f7ff fa58 	bl	8000f5c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e053      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 020c 	and.w	r2, r3, #12
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d1eb      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d210      	bcs.n	8001b00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 0207 	bic.w	r2, r3, #7
 8001ae6:	4922      	ldr	r1, [pc, #136]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e032      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4916      	ldr	r1, [pc, #88]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d009      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	490e      	ldr	r1, [pc, #56]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b3e:	f000 f821 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8001b42:	4602      	mov	r2, r0
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	490a      	ldr	r1, [pc, #40]	; (8001b78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b50:	5ccb      	ldrb	r3, [r1, r3]
 8001b52:	fa22 f303 	lsr.w	r3, r2, r3
 8001b56:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <HAL_RCC_ClockConfig+0x1cc>)
 8001b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_RCC_ClockConfig+0x1d0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f9ba 	bl	8000ed8 <HAL_InitTick>

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40022000 	.word	0x40022000
 8001b74:	40021000 	.word	0x40021000
 8001b78:	080024f8 	.word	0x080024f8
 8001b7c:	20000034 	.word	0x20000034
 8001b80:	20000038 	.word	0x20000038

08001b84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d002      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x30>
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d003      	beq.n	8001bba <HAL_RCC_GetSysClockFreq+0x36>
 8001bb2:	e027      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001bb6:	613b      	str	r3, [r7, #16]
      break;
 8001bb8:	e027      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	0c9b      	lsrs	r3, r3, #18
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	4a17      	ldr	r2, [pc, #92]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bc4:	5cd3      	ldrb	r3, [r2, r3]
 8001bc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d010      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	0c5b      	lsrs	r3, r3, #17
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	4a11      	ldr	r2, [pc, #68]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bde:	5cd3      	ldrb	r3, [r2, r3]
 8001be0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001be6:	fb02 f203 	mul.w	r2, r2, r3
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e004      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a0c      	ldr	r2, [pc, #48]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bf8:	fb02 f303 	mul.w	r3, r2, r3
 8001bfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	613b      	str	r3, [r7, #16]
      break;
 8001c02:	e002      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c06:	613b      	str	r3, [r7, #16]
      break;
 8001c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c0a:	693b      	ldr	r3, [r7, #16]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	371c      	adds	r7, #28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	007a1200 	.word	0x007a1200
 8001c20:	08002508 	.word	0x08002508
 8001c24:	08002518 	.word	0x08002518
 8001c28:	003d0900 	.word	0x003d0900

08001c2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <RCC_Delay+0x34>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <RCC_Delay+0x38>)
 8001c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3e:	0a5b      	lsrs	r3, r3, #9
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c48:	bf00      	nop
  }
  while (Delay --);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1e5a      	subs	r2, r3, #1
 8001c4e:	60fa      	str	r2, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f9      	bne.n	8001c48 <RCC_Delay+0x1c>
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	20000034 	.word	0x20000034
 8001c64:	10624dd3 	.word	0x10624dd3

08001c68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e041      	b.n	8001cfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff f88a 	bl	8000da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	f000 fa6e 	bl	8002188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d001      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e035      	b.n	8001d8c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a16      	ldr	r2, [pc, #88]	; (8001d98 <HAL_TIM_Base_Start_IT+0x90>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d009      	beq.n	8001d56 <HAL_TIM_Base_Start_IT+0x4e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d4a:	d004      	beq.n	8001d56 <HAL_TIM_Base_Start_IT+0x4e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <HAL_TIM_Base_Start_IT+0x94>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d111      	bne.n	8001d7a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2b06      	cmp	r3, #6
 8001d66:	d010      	beq.n	8001d8a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d78:	e007      	b.n	8001d8a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 0201 	orr.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40012c00 	.word	0x40012c00
 8001d9c:	40000400 	.word	0x40000400

08001da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d122      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d11b      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0202 	mvn.w	r2, #2
 8001dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f9b4 	bl	8002150 <HAL_TIM_IC_CaptureCallback>
 8001de8:	e005      	b.n	8001df6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f9a7 	bl	800213e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f9b6 	bl	8002162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d122      	bne.n	8001e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d11b      	bne.n	8001e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0204 	mvn.w	r2, #4
 8001e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2202      	movs	r2, #2
 8001e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f98a 	bl	8002150 <HAL_TIM_IC_CaptureCallback>
 8001e3c:	e005      	b.n	8001e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f97d 	bl	800213e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f98c 	bl	8002162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d122      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d11b      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0208 	mvn.w	r2, #8
 8001e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2204      	movs	r2, #4
 8001e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f960 	bl	8002150 <HAL_TIM_IC_CaptureCallback>
 8001e90:	e005      	b.n	8001e9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f953 	bl	800213e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f962 	bl	8002162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2b10      	cmp	r3, #16
 8001eb0:	d122      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0310 	and.w	r3, r3, #16
 8001ebc:	2b10      	cmp	r3, #16
 8001ebe:	d11b      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0210 	mvn.w	r2, #16
 8001ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2208      	movs	r2, #8
 8001ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f936 	bl	8002150 <HAL_TIM_IC_CaptureCallback>
 8001ee4:	e005      	b.n	8001ef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f929 	bl	800213e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f938 	bl	8002162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d10e      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d107      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0201 	mvn.w	r2, #1
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe fc2c 	bl	800077c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2e:	2b80      	cmp	r3, #128	; 0x80
 8001f30:	d10e      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3c:	2b80      	cmp	r3, #128	; 0x80
 8001f3e:	d107      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fa6b 	bl	8002426 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5a:	2b40      	cmp	r3, #64	; 0x40
 8001f5c:	d10e      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f68:	2b40      	cmp	r3, #64	; 0x40
 8001f6a:	d107      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f8fc 	bl	8002174 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f003 0320 	and.w	r3, r3, #32
 8001f86:	2b20      	cmp	r3, #32
 8001f88:	d10e      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d107      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0220 	mvn.w	r2, #32
 8001fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fa36 	bl	8002414 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_TIM_ConfigClockSource+0x1c>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e0b4      	b.n	8002136 <HAL_TIM_ConfigClockSource+0x186>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ff2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002004:	d03e      	beq.n	8002084 <HAL_TIM_ConfigClockSource+0xd4>
 8002006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800200a:	f200 8087 	bhi.w	800211c <HAL_TIM_ConfigClockSource+0x16c>
 800200e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002012:	f000 8086 	beq.w	8002122 <HAL_TIM_ConfigClockSource+0x172>
 8002016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800201a:	d87f      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 800201c:	2b70      	cmp	r3, #112	; 0x70
 800201e:	d01a      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0xa6>
 8002020:	2b70      	cmp	r3, #112	; 0x70
 8002022:	d87b      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 8002024:	2b60      	cmp	r3, #96	; 0x60
 8002026:	d050      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0x11a>
 8002028:	2b60      	cmp	r3, #96	; 0x60
 800202a:	d877      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 800202c:	2b50      	cmp	r3, #80	; 0x50
 800202e:	d03c      	beq.n	80020aa <HAL_TIM_ConfigClockSource+0xfa>
 8002030:	2b50      	cmp	r3, #80	; 0x50
 8002032:	d873      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 8002034:	2b40      	cmp	r3, #64	; 0x40
 8002036:	d058      	beq.n	80020ea <HAL_TIM_ConfigClockSource+0x13a>
 8002038:	2b40      	cmp	r3, #64	; 0x40
 800203a:	d86f      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 800203c:	2b30      	cmp	r3, #48	; 0x30
 800203e:	d064      	beq.n	800210a <HAL_TIM_ConfigClockSource+0x15a>
 8002040:	2b30      	cmp	r3, #48	; 0x30
 8002042:	d86b      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 8002044:	2b20      	cmp	r3, #32
 8002046:	d060      	beq.n	800210a <HAL_TIM_ConfigClockSource+0x15a>
 8002048:	2b20      	cmp	r3, #32
 800204a:	d867      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 800204c:	2b00      	cmp	r3, #0
 800204e:	d05c      	beq.n	800210a <HAL_TIM_ConfigClockSource+0x15a>
 8002050:	2b10      	cmp	r3, #16
 8002052:	d05a      	beq.n	800210a <HAL_TIM_ConfigClockSource+0x15a>
 8002054:	e062      	b.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6899      	ldr	r1, [r3, #8]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f000 f95e 	bl	8002326 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002078:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	609a      	str	r2, [r3, #8]
      break;
 8002082:	e04f      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6899      	ldr	r1, [r3, #8]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f000 f947 	bl	8002326 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020a6:	609a      	str	r2, [r3, #8]
      break;
 80020a8:	e03c      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	6859      	ldr	r1, [r3, #4]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	461a      	mov	r2, r3
 80020b8:	f000 f8be 	bl	8002238 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2150      	movs	r1, #80	; 0x50
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 f915 	bl	80022f2 <TIM_ITRx_SetConfig>
      break;
 80020c8:	e02c      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6859      	ldr	r1, [r3, #4]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	461a      	mov	r2, r3
 80020d8:	f000 f8dc 	bl	8002294 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2160      	movs	r1, #96	; 0x60
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f905 	bl	80022f2 <TIM_ITRx_SetConfig>
      break;
 80020e8:	e01c      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	6859      	ldr	r1, [r3, #4]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	461a      	mov	r2, r3
 80020f8:	f000 f89e 	bl	8002238 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2140      	movs	r1, #64	; 0x40
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f8f5 	bl	80022f2 <TIM_ITRx_SetConfig>
      break;
 8002108:	e00c      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4619      	mov	r1, r3
 8002114:	4610      	mov	r0, r2
 8002116:	f000 f8ec 	bl	80022f2 <TIM_ITRx_SetConfig>
      break;
 800211a:	e003      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
      break;
 8002120:	e000      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002122:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002134:	7bfb      	ldrb	r3, [r7, #15]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr

08002162 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
	...

08002188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a25      	ldr	r2, [pc, #148]	; (8002230 <TIM_Base_SetConfig+0xa8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d007      	beq.n	80021b0 <TIM_Base_SetConfig+0x28>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a6:	d003      	beq.n	80021b0 <TIM_Base_SetConfig+0x28>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a22      	ldr	r2, [pc, #136]	; (8002234 <TIM_Base_SetConfig+0xac>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d108      	bne.n	80021c2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a1a      	ldr	r2, [pc, #104]	; (8002230 <TIM_Base_SetConfig+0xa8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d007      	beq.n	80021da <TIM_Base_SetConfig+0x52>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d0:	d003      	beq.n	80021da <TIM_Base_SetConfig+0x52>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a17      	ldr	r2, [pc, #92]	; (8002234 <TIM_Base_SetConfig+0xac>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d108      	bne.n	80021ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a07      	ldr	r2, [pc, #28]	; (8002230 <TIM_Base_SetConfig+0xa8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d103      	bne.n	8002220 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	615a      	str	r2, [r3, #20]
}
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	40012c00 	.word	0x40012c00
 8002234:	40000400 	.word	0x40000400

08002238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002238:	b480      	push	{r7}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	f023 0201 	bic.w	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f023 030a 	bic.w	r3, r3, #10
 8002274:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4313      	orrs	r3, r2
 800227c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	621a      	str	r2, [r3, #32]
}
 800228a:	bf00      	nop
 800228c:	371c      	adds	r7, #28
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	f023 0210 	bic.w	r2, r3, #16
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	031b      	lsls	r3, r3, #12
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80022d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	4313      	orrs	r3, r2
 80022da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	621a      	str	r2, [r3, #32]
}
 80022e8:	bf00      	nop
 80022ea:	371c      	adds	r7, #28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b085      	sub	sp, #20
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002308:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4313      	orrs	r3, r2
 8002310:	f043 0307 	orr.w	r3, r3, #7
 8002314:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	609a      	str	r2, [r3, #8]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002326:	b480      	push	{r7}
 8002328:	b087      	sub	sp, #28
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002340:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	021a      	lsls	r2, r3, #8
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	431a      	orrs	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	4313      	orrs	r3, r2
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4313      	orrs	r3, r2
 8002352:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	609a      	str	r2, [r3, #8]
}
 800235a:	bf00      	nop
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002378:	2302      	movs	r3, #2
 800237a:	e041      	b.n	8002400 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a14      	ldr	r2, [pc, #80]	; (800240c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d009      	beq.n	80023d4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c8:	d004      	beq.n	80023d4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a10      	ldr	r2, [pc, #64]	; (8002410 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d10c      	bne.n	80023ee <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40012c00 	.word	0x40012c00
 8002410:	40000400 	.word	0x40000400

08002414 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <__libc_init_array>:
 8002438:	b570      	push	{r4, r5, r6, lr}
 800243a:	2600      	movs	r6, #0
 800243c:	4d0c      	ldr	r5, [pc, #48]	; (8002470 <__libc_init_array+0x38>)
 800243e:	4c0d      	ldr	r4, [pc, #52]	; (8002474 <__libc_init_array+0x3c>)
 8002440:	1b64      	subs	r4, r4, r5
 8002442:	10a4      	asrs	r4, r4, #2
 8002444:	42a6      	cmp	r6, r4
 8002446:	d109      	bne.n	800245c <__libc_init_array+0x24>
 8002448:	f000 f822 	bl	8002490 <_init>
 800244c:	2600      	movs	r6, #0
 800244e:	4d0a      	ldr	r5, [pc, #40]	; (8002478 <__libc_init_array+0x40>)
 8002450:	4c0a      	ldr	r4, [pc, #40]	; (800247c <__libc_init_array+0x44>)
 8002452:	1b64      	subs	r4, r4, r5
 8002454:	10a4      	asrs	r4, r4, #2
 8002456:	42a6      	cmp	r6, r4
 8002458:	d105      	bne.n	8002466 <__libc_init_array+0x2e>
 800245a:	bd70      	pop	{r4, r5, r6, pc}
 800245c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002460:	4798      	blx	r3
 8002462:	3601      	adds	r6, #1
 8002464:	e7ee      	b.n	8002444 <__libc_init_array+0xc>
 8002466:	f855 3b04 	ldr.w	r3, [r5], #4
 800246a:	4798      	blx	r3
 800246c:	3601      	adds	r6, #1
 800246e:	e7f2      	b.n	8002456 <__libc_init_array+0x1e>
 8002470:	0800251c 	.word	0x0800251c
 8002474:	0800251c 	.word	0x0800251c
 8002478:	0800251c 	.word	0x0800251c
 800247c:	08002520 	.word	0x08002520

08002480 <memset>:
 8002480:	4603      	mov	r3, r0
 8002482:	4402      	add	r2, r0
 8002484:	4293      	cmp	r3, r2
 8002486:	d100      	bne.n	800248a <memset+0xa>
 8002488:	4770      	bx	lr
 800248a:	f803 1b01 	strb.w	r1, [r3], #1
 800248e:	e7f9      	b.n	8002484 <memset+0x4>

08002490 <_init>:
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002492:	bf00      	nop
 8002494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002496:	bc08      	pop	{r3}
 8002498:	469e      	mov	lr, r3
 800249a:	4770      	bx	lr

0800249c <_fini>:
 800249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249e:	bf00      	nop
 80024a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024a2:	bc08      	pop	{r3}
 80024a4:	469e      	mov	lr, r3
 80024a6:	4770      	bx	lr
