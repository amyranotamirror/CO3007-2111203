
FLOW_CONTROL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003cf8  08003cf8  00013cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d5c  08003d5c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d5c  08003d5c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d5c  08003d5c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d60  08003d60  00013d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000005c  08003dc0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08003dc0  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de7b  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021e2  00000000  00000000  0002df43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  00030128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000abd  00000000  00000000  00030ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000177d6  00000000  00000000  0003199d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fda1  00000000  00000000  00049173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b667  00000000  00000000  00058f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e40  00000000  00000000  000e457c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000e83bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ce0 	.word	0x08003ce0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003ce0 	.word	0x08003ce0

0800014c <HAL_UART_RxCpltCallback>:
uint8_t temp = 0;
uint8_t buffer[MAX_BUFFER_SIZE];
uint8_t index_buffer  = 0;
uint8_t buffer_flag = 0;

void  HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a13      	ldr	r2, [pc, #76]	; (80001a8 <HAL_UART_RxCpltCallback+0x5c>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d11f      	bne.n	800019e <HAL_UART_RxCpltCallback+0x52>
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 800015e:	2332      	movs	r3, #50	; 0x32
 8000160:	2201      	movs	r2, #1
 8000162:	4912      	ldr	r1, [pc, #72]	; (80001ac <HAL_UART_RxCpltCallback+0x60>)
 8000164:	4812      	ldr	r0, [pc, #72]	; (80001b0 <HAL_UART_RxCpltCallback+0x64>)
 8000166:	f002 fae1 	bl	800272c <HAL_UART_Transmit>
		buffer[index_buffer++] = temp;
 800016a:	4b12      	ldr	r3, [pc, #72]	; (80001b4 <HAL_UART_RxCpltCallback+0x68>)
 800016c:	781b      	ldrb	r3, [r3, #0]
 800016e:	1c5a      	adds	r2, r3, #1
 8000170:	b2d1      	uxtb	r1, r2
 8000172:	4a10      	ldr	r2, [pc, #64]	; (80001b4 <HAL_UART_RxCpltCallback+0x68>)
 8000174:	7011      	strb	r1, [r2, #0]
 8000176:	461a      	mov	r2, r3
 8000178:	4b0c      	ldr	r3, [pc, #48]	; (80001ac <HAL_UART_RxCpltCallback+0x60>)
 800017a:	7819      	ldrb	r1, [r3, #0]
 800017c:	4b0e      	ldr	r3, [pc, #56]	; (80001b8 <HAL_UART_RxCpltCallback+0x6c>)
 800017e:	5499      	strb	r1, [r3, r2]
		if(index_buffer == 30) index_buffer = 0;
 8000180:	4b0c      	ldr	r3, [pc, #48]	; (80001b4 <HAL_UART_RxCpltCallback+0x68>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	2b1e      	cmp	r3, #30
 8000186:	d102      	bne.n	800018e <HAL_UART_RxCpltCallback+0x42>
 8000188:	4b0a      	ldr	r3, [pc, #40]	; (80001b4 <HAL_UART_RxCpltCallback+0x68>)
 800018a:	2200      	movs	r2, #0
 800018c:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 800018e:	4b0b      	ldr	r3, [pc, #44]	; (80001bc <HAL_UART_RxCpltCallback+0x70>)
 8000190:	2201      	movs	r2, #1
 8000192:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000194:	2201      	movs	r2, #1
 8000196:	4905      	ldr	r1, [pc, #20]	; (80001ac <HAL_UART_RxCpltCallback+0x60>)
 8000198:	4805      	ldr	r0, [pc, #20]	; (80001b0 <HAL_UART_RxCpltCallback+0x64>)
 800019a:	f002 fb4a 	bl	8002832 <HAL_UART_Receive_IT>
	}
}
 800019e:	bf00      	nop
 80001a0:	3708      	adds	r7, #8
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40004400 	.word	0x40004400
 80001ac:	20000138 	.word	0x20000138
 80001b0:	200000f0 	.word	0x200000f0
 80001b4:	2000015a 	.word	0x2000015a
 80001b8:	2000013c 	.word	0x2000013c
 80001bc:	2000015b 	.word	0x2000015b

080001c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b08c      	sub	sp, #48	; 0x30
 80001c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c6:	f000 fb0b 	bl	80007e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ca:	f000 f835 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ce:	f000 f939 	bl	8000444 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001d2:	f000 f881 	bl	80002d8 <MX_ADC1_Init>
  MX_TIM3_Init();
 80001d6:	f000 f8bd 	bl	8000354 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80001da:	f000 f909 	bl	80003f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 80001de:	2201      	movs	r2, #1
 80001e0:	4910      	ldr	r1, [pc, #64]	; (8000224 <main+0x64>)
 80001e2:	4811      	ldr	r0, [pc, #68]	; (8000228 <main+0x68>)
 80001e4:	f002 fb25 	bl	8002832 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int ADC_value = 0;
 80001e8:	2300      	movs	r3, #0
 80001ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  char str[40];
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80001ec:	2120      	movs	r1, #32
 80001ee:	480f      	ldr	r0, [pc, #60]	; (800022c <main+0x6c>)
 80001f0:	f001 f9c8 	bl	8001584 <HAL_GPIO_TogglePin>
	  ADC_value = HAL_ADC_GetValue(&hadc1);
 80001f4:	480e      	ldr	r0, [pc, #56]	; (8000230 <main+0x70>)
 80001f6:	f000 fc51 	bl	8000a9c <HAL_ADC_GetValue>
 80001fa:	4603      	mov	r3, r0
 80001fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "%d\n", ADC_value), 1000);
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000202:	490c      	ldr	r1, [pc, #48]	; (8000234 <main+0x74>)
 8000204:	4618      	mov	r0, r3
 8000206:	f003 f8b9 	bl	800337c <siprintf>
 800020a:	4603      	mov	r3, r0
 800020c:	b29a      	uxth	r2, r3
 800020e:	1d39      	adds	r1, r7, #4
 8000210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000214:	4804      	ldr	r0, [pc, #16]	; (8000228 <main+0x68>)
 8000216:	f002 fa89 	bl	800272c <HAL_UART_Transmit>
	  HAL_Delay(500);
 800021a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800021e:	f000 fb41 	bl	80008a4 <HAL_Delay>
  {
 8000222:	e7e3      	b.n	80001ec <main+0x2c>
 8000224:	20000138 	.word	0x20000138
 8000228:	200000f0 	.word	0x200000f0
 800022c:	40010800 	.word	0x40010800
 8000230:	20000078 	.word	0x20000078
 8000234:	08003cf8 	.word	0x08003cf8

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b094      	sub	sp, #80	; 0x50
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f003 f8b8 	bl	80033bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	f107 0314 	add.w	r3, r7, #20
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000268:	2302      	movs	r3, #2
 800026a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	2301      	movs	r3, #1
 800026e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000270:	2310      	movs	r3, #16
 8000272:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000274:	2300      	movs	r3, #0
 8000276:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027c:	4618      	mov	r0, r3
 800027e:	f001 f99b 	bl	80015b8 <HAL_RCC_OscConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000288:	f000 f90e 	bl	80004a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000290:	2300      	movs	r3, #0
 8000292:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a0:	f107 0314 	add.w	r3, r7, #20
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 fc08 	bl	8001abc <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002b2:	f000 f8f9 	bl	80004a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002b6:	2302      	movs	r3, #2
 80002b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fd89 	bl	8001dd8 <HAL_RCCEx_PeriphCLKConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002cc:	f000 f8ec 	bl	80004a8 <Error_Handler>
  }
}
 80002d0:	bf00      	nop
 80002d2:	3750      	adds	r7, #80	; 0x50
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002e8:	4b18      	ldr	r3, [pc, #96]	; (800034c <MX_ADC1_Init+0x74>)
 80002ea:	4a19      	ldr	r2, [pc, #100]	; (8000350 <MX_ADC1_Init+0x78>)
 80002ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ee:	4b17      	ldr	r3, [pc, #92]	; (800034c <MX_ADC1_Init+0x74>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <MX_ADC1_Init+0x74>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002fa:	4b14      	ldr	r3, [pc, #80]	; (800034c <MX_ADC1_Init+0x74>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <MX_ADC1_Init+0x74>)
 8000302:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000306:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000308:	4b10      	ldr	r3, [pc, #64]	; (800034c <MX_ADC1_Init+0x74>)
 800030a:	2200      	movs	r2, #0
 800030c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_ADC1_Init+0x74>)
 8000310:	2201      	movs	r2, #1
 8000312:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000314:	480d      	ldr	r0, [pc, #52]	; (800034c <MX_ADC1_Init+0x74>)
 8000316:	f000 fae9 	bl	80008ec <HAL_ADC_Init>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000320:	f000 f8c2 	bl	80004a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000324:	2300      	movs	r3, #0
 8000326:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000328:	2301      	movs	r3, #1
 800032a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	4619      	mov	r1, r3
 8000334:	4805      	ldr	r0, [pc, #20]	; (800034c <MX_ADC1_Init+0x74>)
 8000336:	f000 fc8f 	bl	8000c58 <HAL_ADC_ConfigChannel>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000340:	f000 f8b2 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000344:	bf00      	nop
 8000346:	3710      	adds	r7, #16
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000078 	.word	0x20000078
 8000350:	40012400 	.word	0x40012400

08000354 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800035a:	f107 0308 	add.w	r3, r7, #8
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000368:	463b      	mov	r3, r7
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000370:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <MX_TIM3_Init+0x94>)
 8000372:	4a1e      	ldr	r2, [pc, #120]	; (80003ec <MX_TIM3_Init+0x98>)
 8000374:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000376:	4b1c      	ldr	r3, [pc, #112]	; (80003e8 <MX_TIM3_Init+0x94>)
 8000378:	2201      	movs	r2, #1
 800037a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800037c:	4b1a      	ldr	r3, [pc, #104]	; (80003e8 <MX_TIM3_Init+0x94>)
 800037e:	2200      	movs	r2, #0
 8000380:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 8000382:	4b19      	ldr	r3, [pc, #100]	; (80003e8 <MX_TIM3_Init+0x94>)
 8000384:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000388:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800038a:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <MX_TIM3_Init+0x94>)
 800038c:	2200      	movs	r2, #0
 800038e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000390:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <MX_TIM3_Init+0x94>)
 8000392:	2200      	movs	r2, #0
 8000394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000396:	4814      	ldr	r0, [pc, #80]	; (80003e8 <MX_TIM3_Init+0x94>)
 8000398:	f001 fdd4 	bl	8001f44 <HAL_TIM_Base_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80003a2:	f000 f881 	bl	80004a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003ac:	f107 0308 	add.w	r3, r7, #8
 80003b0:	4619      	mov	r1, r3
 80003b2:	480d      	ldr	r0, [pc, #52]	; (80003e8 <MX_TIM3_Init+0x94>)
 80003b4:	f001 ff1d 	bl	80021f2 <HAL_TIM_ConfigClockSource>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80003be:	f000 f873 	bl	80004a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c2:	2300      	movs	r3, #0
 80003c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003c6:	2300      	movs	r3, #0
 80003c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003ca:	463b      	mov	r3, r7
 80003cc:	4619      	mov	r1, r3
 80003ce:	4806      	ldr	r0, [pc, #24]	; (80003e8 <MX_TIM3_Init+0x94>)
 80003d0:	f002 f8f2 	bl	80025b8 <HAL_TIMEx_MasterConfigSynchronization>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80003da:	f000 f865 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	3718      	adds	r7, #24
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	200000a8 	.word	0x200000a8
 80003ec:	40000400 	.word	0x40000400

080003f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <MX_USART2_UART_Init+0x4c>)
 80003f6:	4a12      	ldr	r2, [pc, #72]	; (8000440 <MX_USART2_UART_Init+0x50>)
 80003f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80003fa:	4b10      	ldr	r3, [pc, #64]	; (800043c <MX_USART2_UART_Init+0x4c>)
 80003fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000400:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <MX_USART2_UART_Init+0x4c>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <MX_USART2_UART_Init+0x4c>)
 800040a:	2200      	movs	r2, #0
 800040c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <MX_USART2_UART_Init+0x4c>)
 8000410:	2200      	movs	r2, #0
 8000412:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000414:	4b09      	ldr	r3, [pc, #36]	; (800043c <MX_USART2_UART_Init+0x4c>)
 8000416:	220c      	movs	r2, #12
 8000418:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <MX_USART2_UART_Init+0x4c>)
 800041c:	2200      	movs	r2, #0
 800041e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <MX_USART2_UART_Init+0x4c>)
 8000422:	2200      	movs	r2, #0
 8000424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000426:	4805      	ldr	r0, [pc, #20]	; (800043c <MX_USART2_UART_Init+0x4c>)
 8000428:	f002 f930 	bl	800268c <HAL_UART_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000432:	f000 f839 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	200000f0 	.word	0x200000f0
 8000440:	40004400 	.word	0x40004400

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	f107 0308 	add.w	r3, r7, #8
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <MX_GPIO_Init+0x5c>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a10      	ldr	r2, [pc, #64]	; (80004a0 <MX_GPIO_Init+0x5c>)
 800045e:	f043 0304 	orr.w	r3, r3, #4
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <MX_GPIO_Init+0x5c>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0304 	and.w	r3, r3, #4
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	2120      	movs	r1, #32
 8000474:	480b      	ldr	r0, [pc, #44]	; (80004a4 <MX_GPIO_Init+0x60>)
 8000476:	f001 f86d 	bl	8001554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800047a:	2320      	movs	r3, #32
 800047c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	2301      	movs	r3, #1
 8000480:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000482:	2301      	movs	r3, #1
 8000484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000486:	2302      	movs	r3, #2
 8000488:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800048a:	f107 0308 	add.w	r3, r7, #8
 800048e:	4619      	mov	r1, r3
 8000490:	4804      	ldr	r0, [pc, #16]	; (80004a4 <MX_GPIO_Init+0x60>)
 8000492:	f000 fee3 	bl	800125c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000496:	bf00      	nop
 8000498:	3718      	adds	r7, #24
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40010800 	.word	0x40010800

080004a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <Error_Handler+0x8>
	...

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ba:	4b15      	ldr	r3, [pc, #84]	; (8000510 <HAL_MspInit+0x5c>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a14      	ldr	r2, [pc, #80]	; (8000510 <HAL_MspInit+0x5c>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6193      	str	r3, [r2, #24]
 80004c6:	4b12      	ldr	r3, [pc, #72]	; (8000510 <HAL_MspInit+0x5c>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <HAL_MspInit+0x5c>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <HAL_MspInit+0x5c>)
 80004d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <HAL_MspInit+0x5c>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <HAL_MspInit+0x60>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	4a04      	ldr	r2, [pc, #16]	; (8000514 <HAL_MspInit+0x60>)
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	40021000 	.word	0x40021000
 8000514:	40010000 	.word	0x40010000

08000518 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a18      	ldr	r2, [pc, #96]	; (8000594 <HAL_ADC_MspInit+0x7c>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d129      	bne.n	800058c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000538:	4b17      	ldr	r3, [pc, #92]	; (8000598 <HAL_ADC_MspInit+0x80>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a16      	ldr	r2, [pc, #88]	; (8000598 <HAL_ADC_MspInit+0x80>)
 800053e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <HAL_ADC_MspInit+0x80>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <HAL_ADC_MspInit+0x80>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a10      	ldr	r2, [pc, #64]	; (8000598 <HAL_ADC_MspInit+0x80>)
 8000556:	f043 0304 	orr.w	r3, r3, #4
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <HAL_ADC_MspInit+0x80>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0304 	and.w	r3, r3, #4
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000568:	2301      	movs	r3, #1
 800056a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800056c:	2303      	movs	r3, #3
 800056e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	4619      	mov	r1, r3
 8000576:	4809      	ldr	r0, [pc, #36]	; (800059c <HAL_ADC_MspInit+0x84>)
 8000578:	f000 fe70 	bl	800125c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	2100      	movs	r1, #0
 8000580:	2012      	movs	r0, #18
 8000582:	f000 fd82 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000586:	2012      	movs	r0, #18
 8000588:	f000 fd9b 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800058c:	bf00      	nop
 800058e:	3720      	adds	r7, #32
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40012400 	.word	0x40012400
 8000598:	40021000 	.word	0x40021000
 800059c:	40010800 	.word	0x40010800

080005a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0d      	ldr	r2, [pc, #52]	; (80005e4 <HAL_TIM_Base_MspInit+0x44>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d113      	bne.n	80005da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005b2:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <HAL_TIM_Base_MspInit+0x48>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	4a0c      	ldr	r2, [pc, #48]	; (80005e8 <HAL_TIM_Base_MspInit+0x48>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	61d3      	str	r3, [r2, #28]
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <HAL_TIM_Base_MspInit+0x48>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	201d      	movs	r0, #29
 80005d0:	f000 fd5b 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80005d4:	201d      	movs	r0, #29
 80005d6:	f000 fd74 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40000400 	.word	0x40000400
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a1f      	ldr	r2, [pc, #124]	; (8000684 <HAL_UART_MspInit+0x98>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d137      	bne.n	800067c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800060c:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <HAL_UART_MspInit+0x9c>)
 800060e:	69db      	ldr	r3, [r3, #28]
 8000610:	4a1d      	ldr	r2, [pc, #116]	; (8000688 <HAL_UART_MspInit+0x9c>)
 8000612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000616:	61d3      	str	r3, [r2, #28]
 8000618:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <HAL_UART_MspInit+0x9c>)
 800061a:	69db      	ldr	r3, [r3, #28]
 800061c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000624:	4b18      	ldr	r3, [pc, #96]	; (8000688 <HAL_UART_MspInit+0x9c>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a17      	ldr	r2, [pc, #92]	; (8000688 <HAL_UART_MspInit+0x9c>)
 800062a:	f043 0304 	orr.w	r3, r3, #4
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <HAL_UART_MspInit+0x9c>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0304 	and.w	r3, r3, #4
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800063c:	2304      	movs	r3, #4
 800063e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	4619      	mov	r1, r3
 800064e:	480f      	ldr	r0, [pc, #60]	; (800068c <HAL_UART_MspInit+0xa0>)
 8000650:	f000 fe04 	bl	800125c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000654:	2308      	movs	r3, #8
 8000656:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	4619      	mov	r1, r3
 8000666:	4809      	ldr	r0, [pc, #36]	; (800068c <HAL_UART_MspInit+0xa0>)
 8000668:	f000 fdf8 	bl	800125c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2100      	movs	r1, #0
 8000670:	2026      	movs	r0, #38	; 0x26
 8000672:	f000 fd0a 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000676:	2026      	movs	r0, #38	; 0x26
 8000678:	f000 fd23 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800067c:	bf00      	nop
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40004400 	.word	0x40004400
 8000688:	40021000 	.word	0x40021000
 800068c:	40010800 	.word	0x40010800

08000690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000694:	e7fe      	b.n	8000694 <NMI_Handler+0x4>

08000696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <HardFault_Handler+0x4>

0800069c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <MemManage_Handler+0x4>

080006a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <BusFault_Handler+0x4>

080006a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <UsageFault_Handler+0x4>

080006ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr

080006ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr

080006c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr

080006d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d6:	f000 f8c9 	bl	800086c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80006e4:	4802      	ldr	r0, [pc, #8]	; (80006f0 <ADC1_2_IRQHandler+0x10>)
 80006e6:	f000 f9e5 	bl	8000ab4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000078 	.word	0x20000078

080006f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80006f8:	4802      	ldr	r0, [pc, #8]	; (8000704 <TIM3_IRQHandler+0x10>)
 80006fa:	f001 fc72 	bl	8001fe2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200000a8 	.word	0x200000a8

08000708 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <USART2_IRQHandler+0x10>)
 800070e:	f002 f8b5 	bl	800287c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000f0 	.word	0x200000f0

0800071c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000724:	4a14      	ldr	r2, [pc, #80]	; (8000778 <_sbrk+0x5c>)
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <_sbrk+0x60>)
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <_sbrk+0x64>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d102      	bne.n	800073e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <_sbrk+0x64>)
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <_sbrk+0x68>)
 800073c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <_sbrk+0x64>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4413      	add	r3, r2
 8000746:	693a      	ldr	r2, [r7, #16]
 8000748:	429a      	cmp	r2, r3
 800074a:	d207      	bcs.n	800075c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800074c:	f002 fe3e 	bl	80033cc <__errno>
 8000750:	4603      	mov	r3, r0
 8000752:	220c      	movs	r2, #12
 8000754:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000756:	f04f 33ff 	mov.w	r3, #4294967295
 800075a:	e009      	b.n	8000770 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <_sbrk+0x64>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <_sbrk+0x64>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	4a05      	ldr	r2, [pc, #20]	; (8000780 <_sbrk+0x64>)
 800076c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800076e:	68fb      	ldr	r3, [r7, #12]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3718      	adds	r7, #24
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20002800 	.word	0x20002800
 800077c:	00000400 	.word	0x00000400
 8000780:	2000015c 	.word	0x2000015c
 8000784:	200002b0 	.word	0x200002b0

08000788 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000794:	f7ff fff8 	bl	8000788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000798:	480b      	ldr	r0, [pc, #44]	; (80007c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800079a:	490c      	ldr	r1, [pc, #48]	; (80007cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800079c:	4a0c      	ldr	r2, [pc, #48]	; (80007d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a0:	e002      	b.n	80007a8 <LoopCopyDataInit>

080007a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a6:	3304      	adds	r3, #4

080007a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ac:	d3f9      	bcc.n	80007a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ae:	4a09      	ldr	r2, [pc, #36]	; (80007d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007b0:	4c09      	ldr	r4, [pc, #36]	; (80007d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b4:	e001      	b.n	80007ba <LoopFillZerobss>

080007b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b8:	3204      	adds	r2, #4

080007ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007bc:	d3fb      	bcc.n	80007b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007be:	f002 fe0b 	bl	80033d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007c2:	f7ff fcfd 	bl	80001c0 <main>
  bx lr
 80007c6:	4770      	bx	lr
  ldr r0, =_sdata
 80007c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007cc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80007d0:	08003d64 	.word	0x08003d64
  ldr r2, =_sbss
 80007d4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80007d8:	200002ac 	.word	0x200002ac

080007dc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007dc:	e7fe      	b.n	80007dc <CAN1_RX1_IRQHandler>
	...

080007e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <HAL_Init+0x28>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a07      	ldr	r2, [pc, #28]	; (8000808 <HAL_Init+0x28>)
 80007ea:	f043 0310 	orr.w	r3, r3, #16
 80007ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f0:	2003      	movs	r0, #3
 80007f2:	f000 fc3f 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007f6:	200f      	movs	r0, #15
 80007f8:	f000 f808 	bl	800080c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007fc:	f7ff fe5a 	bl	80004b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40022000 	.word	0x40022000

0800080c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_InitTick+0x54>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_InitTick+0x58>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000822:	fbb3 f3f1 	udiv	r3, r3, r1
 8000826:	fbb2 f3f3 	udiv	r3, r2, r3
 800082a:	4618      	mov	r0, r3
 800082c:	f000 fc57 	bl	80010de <HAL_SYSTICK_Config>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	e00e      	b.n	8000858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b0f      	cmp	r3, #15
 800083e:	d80a      	bhi.n	8000856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000840:	2200      	movs	r2, #0
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	f04f 30ff 	mov.w	r0, #4294967295
 8000848:	f000 fc1f 	bl	800108a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800084c:	4a06      	ldr	r2, [pc, #24]	; (8000868 <HAL_InitTick+0x5c>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000852:	2300      	movs	r3, #0
 8000854:	e000      	b.n	8000858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
}
 8000858:	4618      	mov	r0, r3
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000000 	.word	0x20000000
 8000864:	20000008 	.word	0x20000008
 8000868:	20000004 	.word	0x20000004

0800086c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_IncTick+0x1c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_IncTick+0x20>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4413      	add	r3, r2
 800087c:	4a03      	ldr	r2, [pc, #12]	; (800088c <HAL_IncTick+0x20>)
 800087e:	6013      	str	r3, [r2, #0]
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	20000008 	.word	0x20000008
 800088c:	20000160 	.word	0x20000160

08000890 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return uwTick;
 8000894:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <HAL_GetTick+0x10>)
 8000896:	681b      	ldr	r3, [r3, #0]
}
 8000898:	4618      	mov	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	20000160 	.word	0x20000160

080008a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008ac:	f7ff fff0 	bl	8000890 <HAL_GetTick>
 80008b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008bc:	d005      	beq.n	80008ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <HAL_Delay+0x44>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	461a      	mov	r2, r3
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	4413      	add	r3, r2
 80008c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008ca:	bf00      	nop
 80008cc:	f7ff ffe0 	bl	8000890 <HAL_GetTick>
 80008d0:	4602      	mov	r2, r0
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d8f7      	bhi.n	80008cc <HAL_Delay+0x28>
  {
  }
}
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000008 	.word	0x20000008

080008ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008f4:	2300      	movs	r3, #0
 80008f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80008f8:	2300      	movs	r3, #0
 80008fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d101      	bne.n	800090e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e0be      	b.n	8000a8c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000918:	2b00      	cmp	r3, #0
 800091a:	d109      	bne.n	8000930 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff fdf4 	bl	8000518 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f000 fa89 	bl	8000e48 <ADC_ConversionStop_Disable>
 8000936:	4603      	mov	r3, r0
 8000938:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800093e:	f003 0310 	and.w	r3, r3, #16
 8000942:	2b00      	cmp	r3, #0
 8000944:	f040 8099 	bne.w	8000a7a <HAL_ADC_Init+0x18e>
 8000948:	7dfb      	ldrb	r3, [r7, #23]
 800094a:	2b00      	cmp	r3, #0
 800094c:	f040 8095 	bne.w	8000a7a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000954:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000958:	f023 0302 	bic.w	r3, r3, #2
 800095c:	f043 0202 	orr.w	r2, r3, #2
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800096c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	7b1b      	ldrb	r3, [r3, #12]
 8000972:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000974:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	4313      	orrs	r3, r2
 800097a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000984:	d003      	beq.n	800098e <HAL_ADC_Init+0xa2>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d102      	bne.n	8000994 <HAL_ADC_Init+0xa8>
 800098e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000992:	e000      	b.n	8000996 <HAL_ADC_Init+0xaa>
 8000994:	2300      	movs	r3, #0
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4313      	orrs	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	7d1b      	ldrb	r3, [r3, #20]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d119      	bne.n	80009d8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	7b1b      	ldrb	r3, [r3, #12]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d109      	bne.n	80009c0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	035a      	lsls	r2, r3, #13
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	e00b      	b.n	80009d8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c4:	f043 0220 	orr.w	r2, r3, #32
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d0:	f043 0201 	orr.w	r2, r3, #1
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	430a      	orrs	r2, r1
 80009ea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	689a      	ldr	r2, [r3, #8]
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <HAL_ADC_Init+0x1a8>)
 80009f4:	4013      	ands	r3, r2
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	6812      	ldr	r2, [r2, #0]
 80009fa:	68b9      	ldr	r1, [r7, #8]
 80009fc:	430b      	orrs	r3, r1
 80009fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a08:	d003      	beq.n	8000a12 <HAL_ADC_Init+0x126>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d104      	bne.n	8000a1c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	691b      	ldr	r3, [r3, #16]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	051b      	lsls	r3, r3, #20
 8000a1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a22:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <HAL_ADC_Init+0x1ac>)
 8000a38:	4013      	ands	r3, r2
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d10b      	bne.n	8000a58 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a4a:	f023 0303 	bic.w	r3, r3, #3
 8000a4e:	f043 0201 	orr.w	r2, r3, #1
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a56:	e018      	b.n	8000a8a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5c:	f023 0312 	bic.w	r3, r3, #18
 8000a60:	f043 0210 	orr.w	r2, r3, #16
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a6c:	f043 0201 	orr.w	r2, r3, #1
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a78:	e007      	b.n	8000a8a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7e:	f043 0210 	orr.w	r2, r3, #16
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	ffe1f7fd 	.word	0xffe1f7fd
 8000a98:	ff1f0efe 	.word	0xff1f0efe

08000a9c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	f003 0320 	and.w	r3, r3, #32
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d03e      	beq.n	8000b54 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d039      	beq.n	8000b54 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae4:	f003 0310 	and.w	r3, r3, #16
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d105      	bne.n	8000af8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b02:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b06:	d11d      	bne.n	8000b44 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d119      	bne.n	8000b44 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	685a      	ldr	r2, [r3, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f022 0220 	bic.w	r2, r2, #32
 8000b1e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d105      	bne.n	8000b44 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3c:	f043 0201 	orr.w	r2, r3, #1
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f000 f874 	bl	8000c32 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f06f 0212 	mvn.w	r2, #18
 8000b52:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d04d      	beq.n	8000bfa <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d048      	beq.n	8000bfa <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6c:	f003 0310 	and.w	r3, r3, #16
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d105      	bne.n	8000b80 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b78:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000b8a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000b8e:	d012      	beq.n	8000bb6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d125      	bne.n	8000bea <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000ba8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000bac:	d11d      	bne.n	8000bea <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d119      	bne.n	8000bea <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bc4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d105      	bne.n	8000bea <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be2:	f043 0201 	orr.w	r2, r3, #1
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f000 f96d 	bl	8000eca <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f06f 020c 	mvn.w	r2, #12
 8000bf8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d012      	beq.n	8000c2a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d00d      	beq.n	8000c2a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 f812 	bl	8000c44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f06f 0201 	mvn.w	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
	...

08000c58 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c62:	2300      	movs	r3, #0
 8000c64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d101      	bne.n	8000c78 <HAL_ADC_ConfigChannel+0x20>
 8000c74:	2302      	movs	r3, #2
 8000c76:	e0dc      	b.n	8000e32 <HAL_ADC_ConfigChannel+0x1da>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b06      	cmp	r3, #6
 8000c86:	d81c      	bhi.n	8000cc2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	4613      	mov	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	3b05      	subs	r3, #5
 8000c9a:	221f      	movs	r2, #31
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	4019      	ands	r1, r3
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	6818      	ldr	r0, [r3, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	4613      	mov	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	3b05      	subs	r3, #5
 8000cb4:	fa00 f203 	lsl.w	r2, r0, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	635a      	str	r2, [r3, #52]	; 0x34
 8000cc0:	e03c      	b.n	8000d3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b0c      	cmp	r3, #12
 8000cc8:	d81c      	bhi.n	8000d04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	3b23      	subs	r3, #35	; 0x23
 8000cdc:	221f      	movs	r2, #31
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	4019      	ands	r1, r3
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	6818      	ldr	r0, [r3, #0]
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	3b23      	subs	r3, #35	; 0x23
 8000cf6:	fa00 f203 	lsl.w	r2, r0, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	631a      	str	r2, [r3, #48]	; 0x30
 8000d02:	e01b      	b.n	8000d3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	3b41      	subs	r3, #65	; 0x41
 8000d16:	221f      	movs	r2, #31
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	4019      	ands	r1, r3
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	6818      	ldr	r0, [r3, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	3b41      	subs	r3, #65	; 0x41
 8000d30:	fa00 f203 	lsl.w	r2, r0, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b09      	cmp	r3, #9
 8000d42:	d91c      	bls.n	8000d7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	68d9      	ldr	r1, [r3, #12]
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	3b1e      	subs	r3, #30
 8000d56:	2207      	movs	r2, #7
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	4019      	ands	r1, r3
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	6898      	ldr	r0, [r3, #8]
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3b1e      	subs	r3, #30
 8000d70:	fa00 f203 	lsl.w	r2, r0, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	e019      	b.n	8000db2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	6919      	ldr	r1, [r3, #16]
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4413      	add	r3, r2
 8000d8e:	2207      	movs	r2, #7
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4019      	ands	r1, r3
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	6898      	ldr	r0, [r3, #8]
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	fa00 f203 	lsl.w	r2, r0, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	430a      	orrs	r2, r1
 8000db0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b10      	cmp	r3, #16
 8000db8:	d003      	beq.n	8000dc2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dbe:	2b11      	cmp	r3, #17
 8000dc0:	d132      	bne.n	8000e28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a1d      	ldr	r2, [pc, #116]	; (8000e3c <HAL_ADC_ConfigChannel+0x1e4>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d125      	bne.n	8000e18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d126      	bne.n	8000e28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000de8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b10      	cmp	r3, #16
 8000df0:	d11a      	bne.n	8000e28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <HAL_ADC_ConfigChannel+0x1e8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <HAL_ADC_ConfigChannel+0x1ec>)
 8000df8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfc:	0c9a      	lsrs	r2, r3, #18
 8000dfe:	4613      	mov	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e08:	e002      	b.n	8000e10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f9      	bne.n	8000e0a <HAL_ADC_ConfigChannel+0x1b2>
 8000e16:	e007      	b.n	8000e28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1c:	f043 0220 	orr.w	r2, r3, #32
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	40012400 	.word	0x40012400
 8000e40:	20000000 	.word	0x20000000
 8000e44:	431bde83 	.word	0x431bde83

08000e48 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d12e      	bne.n	8000ec0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 0201 	bic.w	r2, r2, #1
 8000e70:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e72:	f7ff fd0d 	bl	8000890 <HAL_GetTick>
 8000e76:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e78:	e01b      	b.n	8000eb2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e7a:	f7ff fd09 	bl	8000890 <HAL_GetTick>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d914      	bls.n	8000eb2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d10d      	bne.n	8000eb2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9a:	f043 0210 	orr.w	r2, r3, #16
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea6:	f043 0201 	orr.w	r2, r3, #1
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e007      	b.n	8000ec2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d0dc      	beq.n	8000e7a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	db0b      	blt.n	8000f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	4906      	ldr	r1, [pc, #24]	; (8000f74 <__NVIC_EnableIRQ+0x34>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	; (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff90 	bl	8000f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff2d 	bl	8000edc <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff42 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff90 	bl	8000fcc <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5f 	bl	8000f78 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff35 	bl	8000f40 <__NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa2 	bl	8001030 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b085      	sub	sp, #20
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d008      	beq.n	8001120 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2204      	movs	r2, #4
 8001112:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e020      	b.n	8001162 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 020e 	bic.w	r2, r2, #14
 800112e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0201 	bic.w	r2, r2, #1
 800113e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001148:	2101      	movs	r1, #1
 800114a:	fa01 f202 	lsl.w	r2, r1, r2
 800114e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001160:	7bfb      	ldrb	r3, [r7, #15]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d005      	beq.n	8001190 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2204      	movs	r2, #4
 8001188:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	e051      	b.n	8001234 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 020e 	bic.w	r2, r2, #14
 800119e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0201 	bic.w	r2, r2, #1
 80011ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a22      	ldr	r2, [pc, #136]	; (8001240 <HAL_DMA_Abort_IT+0xd4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d029      	beq.n	800120e <HAL_DMA_Abort_IT+0xa2>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a21      	ldr	r2, [pc, #132]	; (8001244 <HAL_DMA_Abort_IT+0xd8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d022      	beq.n	800120a <HAL_DMA_Abort_IT+0x9e>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a1f      	ldr	r2, [pc, #124]	; (8001248 <HAL_DMA_Abort_IT+0xdc>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d01a      	beq.n	8001204 <HAL_DMA_Abort_IT+0x98>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a1e      	ldr	r2, [pc, #120]	; (800124c <HAL_DMA_Abort_IT+0xe0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d012      	beq.n	80011fe <HAL_DMA_Abort_IT+0x92>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <HAL_DMA_Abort_IT+0xe4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d00a      	beq.n	80011f8 <HAL_DMA_Abort_IT+0x8c>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a1b      	ldr	r2, [pc, #108]	; (8001254 <HAL_DMA_Abort_IT+0xe8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d102      	bne.n	80011f2 <HAL_DMA_Abort_IT+0x86>
 80011ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011f0:	e00e      	b.n	8001210 <HAL_DMA_Abort_IT+0xa4>
 80011f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011f6:	e00b      	b.n	8001210 <HAL_DMA_Abort_IT+0xa4>
 80011f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011fc:	e008      	b.n	8001210 <HAL_DMA_Abort_IT+0xa4>
 80011fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001202:	e005      	b.n	8001210 <HAL_DMA_Abort_IT+0xa4>
 8001204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001208:	e002      	b.n	8001210 <HAL_DMA_Abort_IT+0xa4>
 800120a:	2310      	movs	r3, #16
 800120c:	e000      	b.n	8001210 <HAL_DMA_Abort_IT+0xa4>
 800120e:	2301      	movs	r3, #1
 8001210:	4a11      	ldr	r2, [pc, #68]	; (8001258 <HAL_DMA_Abort_IT+0xec>)
 8001212:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	4798      	blx	r3
    } 
  }
  return status;
 8001234:	7bfb      	ldrb	r3, [r7, #15]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40020008 	.word	0x40020008
 8001244:	4002001c 	.word	0x4002001c
 8001248:	40020030 	.word	0x40020030
 800124c:	40020044 	.word	0x40020044
 8001250:	40020058 	.word	0x40020058
 8001254:	4002006c 	.word	0x4002006c
 8001258:	40020000 	.word	0x40020000

0800125c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800125c:	b480      	push	{r7}
 800125e:	b08b      	sub	sp, #44	; 0x2c
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126e:	e161      	b.n	8001534 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001270:	2201      	movs	r2, #1
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	69fa      	ldr	r2, [r7, #28]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	429a      	cmp	r2, r3
 800128a:	f040 8150 	bne.w	800152e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4a97      	ldr	r2, [pc, #604]	; (80014f0 <HAL_GPIO_Init+0x294>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d05e      	beq.n	8001356 <HAL_GPIO_Init+0xfa>
 8001298:	4a95      	ldr	r2, [pc, #596]	; (80014f0 <HAL_GPIO_Init+0x294>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d875      	bhi.n	800138a <HAL_GPIO_Init+0x12e>
 800129e:	4a95      	ldr	r2, [pc, #596]	; (80014f4 <HAL_GPIO_Init+0x298>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d058      	beq.n	8001356 <HAL_GPIO_Init+0xfa>
 80012a4:	4a93      	ldr	r2, [pc, #588]	; (80014f4 <HAL_GPIO_Init+0x298>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d86f      	bhi.n	800138a <HAL_GPIO_Init+0x12e>
 80012aa:	4a93      	ldr	r2, [pc, #588]	; (80014f8 <HAL_GPIO_Init+0x29c>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d052      	beq.n	8001356 <HAL_GPIO_Init+0xfa>
 80012b0:	4a91      	ldr	r2, [pc, #580]	; (80014f8 <HAL_GPIO_Init+0x29c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d869      	bhi.n	800138a <HAL_GPIO_Init+0x12e>
 80012b6:	4a91      	ldr	r2, [pc, #580]	; (80014fc <HAL_GPIO_Init+0x2a0>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d04c      	beq.n	8001356 <HAL_GPIO_Init+0xfa>
 80012bc:	4a8f      	ldr	r2, [pc, #572]	; (80014fc <HAL_GPIO_Init+0x2a0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d863      	bhi.n	800138a <HAL_GPIO_Init+0x12e>
 80012c2:	4a8f      	ldr	r2, [pc, #572]	; (8001500 <HAL_GPIO_Init+0x2a4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d046      	beq.n	8001356 <HAL_GPIO_Init+0xfa>
 80012c8:	4a8d      	ldr	r2, [pc, #564]	; (8001500 <HAL_GPIO_Init+0x2a4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d85d      	bhi.n	800138a <HAL_GPIO_Init+0x12e>
 80012ce:	2b12      	cmp	r3, #18
 80012d0:	d82a      	bhi.n	8001328 <HAL_GPIO_Init+0xcc>
 80012d2:	2b12      	cmp	r3, #18
 80012d4:	d859      	bhi.n	800138a <HAL_GPIO_Init+0x12e>
 80012d6:	a201      	add	r2, pc, #4	; (adr r2, 80012dc <HAL_GPIO_Init+0x80>)
 80012d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012dc:	08001357 	.word	0x08001357
 80012e0:	08001331 	.word	0x08001331
 80012e4:	08001343 	.word	0x08001343
 80012e8:	08001385 	.word	0x08001385
 80012ec:	0800138b 	.word	0x0800138b
 80012f0:	0800138b 	.word	0x0800138b
 80012f4:	0800138b 	.word	0x0800138b
 80012f8:	0800138b 	.word	0x0800138b
 80012fc:	0800138b 	.word	0x0800138b
 8001300:	0800138b 	.word	0x0800138b
 8001304:	0800138b 	.word	0x0800138b
 8001308:	0800138b 	.word	0x0800138b
 800130c:	0800138b 	.word	0x0800138b
 8001310:	0800138b 	.word	0x0800138b
 8001314:	0800138b 	.word	0x0800138b
 8001318:	0800138b 	.word	0x0800138b
 800131c:	0800138b 	.word	0x0800138b
 8001320:	08001339 	.word	0x08001339
 8001324:	0800134d 	.word	0x0800134d
 8001328:	4a76      	ldr	r2, [pc, #472]	; (8001504 <HAL_GPIO_Init+0x2a8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d013      	beq.n	8001356 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800132e:	e02c      	b.n	800138a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	623b      	str	r3, [r7, #32]
          break;
 8001336:	e029      	b.n	800138c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	3304      	adds	r3, #4
 800133e:	623b      	str	r3, [r7, #32]
          break;
 8001340:	e024      	b.n	800138c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	3308      	adds	r3, #8
 8001348:	623b      	str	r3, [r7, #32]
          break;
 800134a:	e01f      	b.n	800138c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	330c      	adds	r3, #12
 8001352:	623b      	str	r3, [r7, #32]
          break;
 8001354:	e01a      	b.n	800138c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d102      	bne.n	8001364 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800135e:	2304      	movs	r3, #4
 8001360:	623b      	str	r3, [r7, #32]
          break;
 8001362:	e013      	b.n	800138c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d105      	bne.n	8001378 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800136c:	2308      	movs	r3, #8
 800136e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	611a      	str	r2, [r3, #16]
          break;
 8001376:	e009      	b.n	800138c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001378:	2308      	movs	r3, #8
 800137a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	615a      	str	r2, [r3, #20]
          break;
 8001382:	e003      	b.n	800138c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
          break;
 8001388:	e000      	b.n	800138c <HAL_GPIO_Init+0x130>
          break;
 800138a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	2bff      	cmp	r3, #255	; 0xff
 8001390:	d801      	bhi.n	8001396 <HAL_GPIO_Init+0x13a>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	e001      	b.n	800139a <HAL_GPIO_Init+0x13e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3304      	adds	r3, #4
 800139a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2bff      	cmp	r3, #255	; 0xff
 80013a0:	d802      	bhi.n	80013a8 <HAL_GPIO_Init+0x14c>
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	e002      	b.n	80013ae <HAL_GPIO_Init+0x152>
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	3b08      	subs	r3, #8
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	210f      	movs	r1, #15
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	401a      	ands	r2, r3
 80013c0:	6a39      	ldr	r1, [r7, #32]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	431a      	orrs	r2, r3
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 80a9 	beq.w	800152e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013dc:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <HAL_GPIO_Init+0x2ac>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a49      	ldr	r2, [pc, #292]	; (8001508 <HAL_GPIO_Init+0x2ac>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b47      	ldr	r3, [pc, #284]	; (8001508 <HAL_GPIO_Init+0x2ac>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013f4:	4a45      	ldr	r2, [pc, #276]	; (800150c <HAL_GPIO_Init+0x2b0>)
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	089b      	lsrs	r3, r3, #2
 80013fa:	3302      	adds	r3, #2
 80013fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001400:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	220f      	movs	r2, #15
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	4013      	ands	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a3d      	ldr	r2, [pc, #244]	; (8001510 <HAL_GPIO_Init+0x2b4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d00d      	beq.n	800143c <HAL_GPIO_Init+0x1e0>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a3c      	ldr	r2, [pc, #240]	; (8001514 <HAL_GPIO_Init+0x2b8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d007      	beq.n	8001438 <HAL_GPIO_Init+0x1dc>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a3b      	ldr	r2, [pc, #236]	; (8001518 <HAL_GPIO_Init+0x2bc>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d101      	bne.n	8001434 <HAL_GPIO_Init+0x1d8>
 8001430:	2302      	movs	r3, #2
 8001432:	e004      	b.n	800143e <HAL_GPIO_Init+0x1e2>
 8001434:	2303      	movs	r3, #3
 8001436:	e002      	b.n	800143e <HAL_GPIO_Init+0x1e2>
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <HAL_GPIO_Init+0x1e2>
 800143c:	2300      	movs	r3, #0
 800143e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001440:	f002 0203 	and.w	r2, r2, #3
 8001444:	0092      	lsls	r2, r2, #2
 8001446:	4093      	lsls	r3, r2
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	4313      	orrs	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800144e:	492f      	ldr	r1, [pc, #188]	; (800150c <HAL_GPIO_Init+0x2b0>)
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	089b      	lsrs	r3, r3, #2
 8001454:	3302      	adds	r3, #2
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001468:	4b2c      	ldr	r3, [pc, #176]	; (800151c <HAL_GPIO_Init+0x2c0>)
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	492b      	ldr	r1, [pc, #172]	; (800151c <HAL_GPIO_Init+0x2c0>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	608b      	str	r3, [r1, #8]
 8001474:	e006      	b.n	8001484 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001476:	4b29      	ldr	r3, [pc, #164]	; (800151c <HAL_GPIO_Init+0x2c0>)
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	43db      	mvns	r3, r3
 800147e:	4927      	ldr	r1, [pc, #156]	; (800151c <HAL_GPIO_Init+0x2c0>)
 8001480:	4013      	ands	r3, r2
 8001482:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d006      	beq.n	800149e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001490:	4b22      	ldr	r3, [pc, #136]	; (800151c <HAL_GPIO_Init+0x2c0>)
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	4921      	ldr	r1, [pc, #132]	; (800151c <HAL_GPIO_Init+0x2c0>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	60cb      	str	r3, [r1, #12]
 800149c:	e006      	b.n	80014ac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800149e:	4b1f      	ldr	r3, [pc, #124]	; (800151c <HAL_GPIO_Init+0x2c0>)
 80014a0:	68da      	ldr	r2, [r3, #12]
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	491d      	ldr	r1, [pc, #116]	; (800151c <HAL_GPIO_Init+0x2c0>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <HAL_GPIO_Init+0x2c0>)
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	4917      	ldr	r1, [pc, #92]	; (800151c <HAL_GPIO_Init+0x2c0>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_GPIO_Init+0x2c0>)
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	4913      	ldr	r1, [pc, #76]	; (800151c <HAL_GPIO_Init+0x2c0>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d01f      	beq.n	8001520 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014e0:	4b0e      	ldr	r3, [pc, #56]	; (800151c <HAL_GPIO_Init+0x2c0>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	490d      	ldr	r1, [pc, #52]	; (800151c <HAL_GPIO_Init+0x2c0>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
 80014ec:	e01f      	b.n	800152e <HAL_GPIO_Init+0x2d2>
 80014ee:	bf00      	nop
 80014f0:	10320000 	.word	0x10320000
 80014f4:	10310000 	.word	0x10310000
 80014f8:	10220000 	.word	0x10220000
 80014fc:	10210000 	.word	0x10210000
 8001500:	10120000 	.word	0x10120000
 8001504:	10110000 	.word	0x10110000
 8001508:	40021000 	.word	0x40021000
 800150c:	40010000 	.word	0x40010000
 8001510:	40010800 	.word	0x40010800
 8001514:	40010c00 	.word	0x40010c00
 8001518:	40011000 	.word	0x40011000
 800151c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_GPIO_Init+0x2f4>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	43db      	mvns	r3, r3
 8001528:	4909      	ldr	r1, [pc, #36]	; (8001550 <HAL_GPIO_Init+0x2f4>)
 800152a:	4013      	ands	r3, r2
 800152c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	3301      	adds	r3, #1
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	fa22 f303 	lsr.w	r3, r2, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	f47f ae96 	bne.w	8001270 <HAL_GPIO_Init+0x14>
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	372c      	adds	r7, #44	; 0x2c
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	40010400 	.word	0x40010400

08001554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
 8001560:	4613      	mov	r3, r2
 8001562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001564:	787b      	ldrb	r3, [r7, #1]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001570:	e003      	b.n	800157a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001572:	887b      	ldrh	r3, [r7, #2]
 8001574:	041a      	lsls	r2, r3, #16
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	611a      	str	r2, [r3, #16]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4013      	ands	r3, r2
 800159c:	041a      	lsls	r2, r3, #16
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43d9      	mvns	r1, r3
 80015a2:	887b      	ldrh	r3, [r7, #2]
 80015a4:	400b      	ands	r3, r1
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	611a      	str	r2, [r3, #16]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
	...

080015b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e272      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 8087 	beq.w	80016e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015d8:	4b92      	ldr	r3, [pc, #584]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d00c      	beq.n	80015fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015e4:	4b8f      	ldr	r3, [pc, #572]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 030c 	and.w	r3, r3, #12
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d112      	bne.n	8001616 <HAL_RCC_OscConfig+0x5e>
 80015f0:	4b8c      	ldr	r3, [pc, #560]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fc:	d10b      	bne.n	8001616 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fe:	4b89      	ldr	r3, [pc, #548]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d06c      	beq.n	80016e4 <HAL_RCC_OscConfig+0x12c>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d168      	bne.n	80016e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e24c      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800161e:	d106      	bne.n	800162e <HAL_RCC_OscConfig+0x76>
 8001620:	4b80      	ldr	r3, [pc, #512]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a7f      	ldr	r2, [pc, #508]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	e02e      	b.n	800168c <HAL_RCC_OscConfig+0xd4>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10c      	bne.n	8001650 <HAL_RCC_OscConfig+0x98>
 8001636:	4b7b      	ldr	r3, [pc, #492]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a7a      	ldr	r2, [pc, #488]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 800163c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	4b78      	ldr	r3, [pc, #480]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a77      	ldr	r2, [pc, #476]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001648:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e01d      	b.n	800168c <HAL_RCC_OscConfig+0xd4>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001658:	d10c      	bne.n	8001674 <HAL_RCC_OscConfig+0xbc>
 800165a:	4b72      	ldr	r3, [pc, #456]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a71      	ldr	r2, [pc, #452]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b6f      	ldr	r3, [pc, #444]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a6e      	ldr	r2, [pc, #440]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 800166c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e00b      	b.n	800168c <HAL_RCC_OscConfig+0xd4>
 8001674:	4b6b      	ldr	r3, [pc, #428]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a6a      	ldr	r2, [pc, #424]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 800167a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b68      	ldr	r3, [pc, #416]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a67      	ldr	r2, [pc, #412]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d013      	beq.n	80016bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff f8fc 	bl	8000890 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff f8f8 	bl	8000890 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	; 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e200      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	4b5d      	ldr	r3, [pc, #372]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0xe4>
 80016ba:	e014      	b.n	80016e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff f8e8 	bl	8000890 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff f8e4 	bl	8000890 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	; 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e1ec      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d6:	4b53      	ldr	r3, [pc, #332]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x10c>
 80016e2:	e000      	b.n	80016e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d063      	beq.n	80017ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016f2:	4b4c      	ldr	r3, [pc, #304]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00b      	beq.n	8001716 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016fe:	4b49      	ldr	r3, [pc, #292]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	2b08      	cmp	r3, #8
 8001708:	d11c      	bne.n	8001744 <HAL_RCC_OscConfig+0x18c>
 800170a:	4b46      	ldr	r3, [pc, #280]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d116      	bne.n	8001744 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001716:	4b43      	ldr	r3, [pc, #268]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d005      	beq.n	800172e <HAL_RCC_OscConfig+0x176>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d001      	beq.n	800172e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e1c0      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	4b3d      	ldr	r3, [pc, #244]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	4939      	ldr	r1, [pc, #228]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001742:	e03a      	b.n	80017ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d020      	beq.n	800178e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800174c:	4b36      	ldr	r3, [pc, #216]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001752:	f7ff f89d 	bl	8000890 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175a:	f7ff f899 	bl	8000890 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e1a1      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176c:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001778:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4927      	ldr	r1, [pc, #156]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001788:	4313      	orrs	r3, r2
 800178a:	600b      	str	r3, [r1, #0]
 800178c:	e015      	b.n	80017ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178e:	4b26      	ldr	r3, [pc, #152]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff f87c 	bl	8000890 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179c:	f7ff f878 	bl	8000890 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e180      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d03a      	beq.n	800183c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d019      	beq.n	8001802 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ce:	4b17      	ldr	r3, [pc, #92]	; (800182c <HAL_RCC_OscConfig+0x274>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d4:	f7ff f85c 	bl	8000890 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017dc:	f7ff f858 	bl	8000890 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e160      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017fa:	2001      	movs	r0, #1
 80017fc:	f000 face 	bl	8001d9c <RCC_Delay>
 8001800:	e01c      	b.n	800183c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_RCC_OscConfig+0x274>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001808:	f7ff f842 	bl	8000890 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180e:	e00f      	b.n	8001830 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001810:	f7ff f83e 	bl	8000890 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d908      	bls.n	8001830 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e146      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000
 8001828:	42420000 	.word	0x42420000
 800182c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001830:	4b92      	ldr	r3, [pc, #584]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1e9      	bne.n	8001810 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80a6 	beq.w	8001996 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800184a:	2300      	movs	r3, #0
 800184c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184e:	4b8b      	ldr	r3, [pc, #556]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10d      	bne.n	8001876 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	4b88      	ldr	r3, [pc, #544]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	4a87      	ldr	r2, [pc, #540]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001864:	61d3      	str	r3, [r2, #28]
 8001866:	4b85      	ldr	r3, [pc, #532]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001872:	2301      	movs	r3, #1
 8001874:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001876:	4b82      	ldr	r3, [pc, #520]	; (8001a80 <HAL_RCC_OscConfig+0x4c8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d118      	bne.n	80018b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001882:	4b7f      	ldr	r3, [pc, #508]	; (8001a80 <HAL_RCC_OscConfig+0x4c8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a7e      	ldr	r2, [pc, #504]	; (8001a80 <HAL_RCC_OscConfig+0x4c8>)
 8001888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188e:	f7fe ffff 	bl	8000890 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001896:	f7fe fffb 	bl	8000890 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b64      	cmp	r3, #100	; 0x64
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e103      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	4b75      	ldr	r3, [pc, #468]	; (8001a80 <HAL_RCC_OscConfig+0x4c8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x312>
 80018bc:	4b6f      	ldr	r3, [pc, #444]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	4a6e      	ldr	r2, [pc, #440]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6213      	str	r3, [r2, #32]
 80018c8:	e02d      	b.n	8001926 <HAL_RCC_OscConfig+0x36e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x334>
 80018d2:	4b6a      	ldr	r3, [pc, #424]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	4a69      	ldr	r2, [pc, #420]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	f023 0301 	bic.w	r3, r3, #1
 80018dc:	6213      	str	r3, [r2, #32]
 80018de:	4b67      	ldr	r3, [pc, #412]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	4a66      	ldr	r2, [pc, #408]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	f023 0304 	bic.w	r3, r3, #4
 80018e8:	6213      	str	r3, [r2, #32]
 80018ea:	e01c      	b.n	8001926 <HAL_RCC_OscConfig+0x36e>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b05      	cmp	r3, #5
 80018f2:	d10c      	bne.n	800190e <HAL_RCC_OscConfig+0x356>
 80018f4:	4b61      	ldr	r3, [pc, #388]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	4a60      	ldr	r2, [pc, #384]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	6213      	str	r3, [r2, #32]
 8001900:	4b5e      	ldr	r3, [pc, #376]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	4a5d      	ldr	r2, [pc, #372]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6213      	str	r3, [r2, #32]
 800190c:	e00b      	b.n	8001926 <HAL_RCC_OscConfig+0x36e>
 800190e:	4b5b      	ldr	r3, [pc, #364]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4a5a      	ldr	r2, [pc, #360]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	6213      	str	r3, [r2, #32]
 800191a:	4b58      	ldr	r3, [pc, #352]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	4a57      	ldr	r2, [pc, #348]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001920:	f023 0304 	bic.w	r3, r3, #4
 8001924:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d015      	beq.n	800195a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192e:	f7fe ffaf 	bl	8000890 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001934:	e00a      	b.n	800194c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001936:	f7fe ffab 	bl	8000890 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	f241 3288 	movw	r2, #5000	; 0x1388
 8001944:	4293      	cmp	r3, r2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e0b1      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194c:	4b4b      	ldr	r3, [pc, #300]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0ee      	beq.n	8001936 <HAL_RCC_OscConfig+0x37e>
 8001958:	e014      	b.n	8001984 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195a:	f7fe ff99 	bl	8000890 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001960:	e00a      	b.n	8001978 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7fe ff95 	bl	8000890 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e09b      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001978:	4b40      	ldr	r3, [pc, #256]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1ee      	bne.n	8001962 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001984:	7dfb      	ldrb	r3, [r7, #23]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d105      	bne.n	8001996 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198a:	4b3c      	ldr	r3, [pc, #240]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	4a3b      	ldr	r2, [pc, #236]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001994:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 8087 	beq.w	8001aae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a0:	4b36      	ldr	r3, [pc, #216]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d061      	beq.n	8001a70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d146      	bne.n	8001a42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b4:	4b33      	ldr	r3, [pc, #204]	; (8001a84 <HAL_RCC_OscConfig+0x4cc>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7fe ff69 	bl	8000890 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c2:	f7fe ff65 	bl	8000890 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e06d      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d4:	4b29      	ldr	r3, [pc, #164]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f0      	bne.n	80019c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e8:	d108      	bne.n	80019fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ea:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	4921      	ldr	r1, [pc, #132]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a19      	ldr	r1, [r3, #32]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	491b      	ldr	r1, [pc, #108]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <HAL_RCC_OscConfig+0x4cc>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7fe ff39 	bl	8000890 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a22:	f7fe ff35 	bl	8000890 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e03d      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x46a>
 8001a40:	e035      	b.n	8001aae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_RCC_OscConfig+0x4cc>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7fe ff22 	bl	8000890 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a50:	f7fe ff1e 	bl	8000890 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e026      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x498>
 8001a6e:	e01e      	b.n	8001aae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e019      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40007000 	.word	0x40007000
 8001a84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_OscConfig+0x500>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d106      	bne.n	8001aaa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d001      	beq.n	8001aae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40021000 	.word	0x40021000

08001abc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0d0      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b6a      	ldr	r3, [pc, #424]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d910      	bls.n	8001b00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b67      	ldr	r3, [pc, #412]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 0207 	bic.w	r2, r3, #7
 8001ae6:	4965      	ldr	r1, [pc, #404]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b63      	ldr	r3, [pc, #396]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0b8      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d020      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b18:	4b59      	ldr	r3, [pc, #356]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4a58      	ldr	r2, [pc, #352]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b30:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	4a52      	ldr	r2, [pc, #328]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b3c:	4b50      	ldr	r3, [pc, #320]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	494d      	ldr	r1, [pc, #308]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d040      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d115      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e07f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7a:	4b41      	ldr	r3, [pc, #260]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e073      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8a:	4b3d      	ldr	r3, [pc, #244]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e06b      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9a:	4b39      	ldr	r3, [pc, #228]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f023 0203 	bic.w	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4936      	ldr	r1, [pc, #216]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bac:	f7fe fe70 	bl	8000890 <HAL_GetTick>
 8001bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb4:	f7fe fe6c 	bl	8000890 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e053      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 020c 	and.w	r2, r3, #12
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d1eb      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d210      	bcs.n	8001c0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 0207 	bic.w	r2, r3, #7
 8001bf2:	4922      	ldr	r1, [pc, #136]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e032      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	4916      	ldr	r1, [pc, #88]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d009      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	490e      	ldr	r1, [pc, #56]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c4a:	f000 f821 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	490a      	ldr	r1, [pc, #40]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001c5c:	5ccb      	ldrb	r3, [r1, r3]
 8001c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c62:	4a09      	ldr	r2, [pc, #36]	; (8001c88 <HAL_RCC_ClockConfig+0x1cc>)
 8001c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_RCC_ClockConfig+0x1d0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fdce 	bl	800080c <HAL_InitTick>

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	40021000 	.word	0x40021000
 8001c84:	08003cfc 	.word	0x08003cfc
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	20000004 	.word	0x20000004

08001c90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001caa:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d002      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x30>
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d003      	beq.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x36>
 8001cbe:	e027      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cc2:	613b      	str	r3, [r7, #16]
      break;
 8001cc4:	e027      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	0c9b      	lsrs	r3, r3, #18
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cd0:	5cd3      	ldrb	r3, [r2, r3]
 8001cd2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d010      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	0c5b      	lsrs	r3, r3, #17
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	4a11      	ldr	r2, [pc, #68]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cea:	5cd3      	ldrb	r3, [r2, r3]
 8001cec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cf2:	fb03 f202 	mul.w	r2, r3, r2
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	e004      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d04:	fb02 f303 	mul.w	r3, r2, r3
 8001d08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	613b      	str	r3, [r7, #16]
      break;
 8001d0e:	e002      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d12:	613b      	str	r3, [r7, #16]
      break;
 8001d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d16:	693b      	ldr	r3, [r7, #16]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	371c      	adds	r7, #28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000
 8001d28:	007a1200 	.word	0x007a1200
 8001d2c:	08003d14 	.word	0x08003d14
 8001d30:	08003d24 	.word	0x08003d24
 8001d34:	003d0900 	.word	0x003d0900

08001d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d3c:	4b02      	ldr	r3, [pc, #8]	; (8001d48 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	20000000 	.word	0x20000000

08001d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d50:	f7ff fff2 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d54:	4602      	mov	r2, r0
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	0a1b      	lsrs	r3, r3, #8
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	4903      	ldr	r1, [pc, #12]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d62:	5ccb      	ldrb	r3, [r1, r3]
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	08003d0c 	.word	0x08003d0c

08001d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d78:	f7ff ffde 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	0adb      	lsrs	r3, r3, #11
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	4903      	ldr	r1, [pc, #12]	; (8001d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d8a:	5ccb      	ldrb	r3, [r1, r3]
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000
 8001d98:	08003d0c 	.word	0x08003d0c

08001d9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001da4:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <RCC_Delay+0x34>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <RCC_Delay+0x38>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	0a5b      	lsrs	r3, r3, #9
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	fb02 f303 	mul.w	r3, r2, r3
 8001db6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001db8:	bf00      	nop
  }
  while (Delay --);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1e5a      	subs	r2, r3, #1
 8001dbe:	60fa      	str	r2, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f9      	bne.n	8001db8 <RCC_Delay+0x1c>
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	10624dd3 	.word	0x10624dd3

08001dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d07d      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001df4:	2300      	movs	r3, #0
 8001df6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df8:	4b4f      	ldr	r3, [pc, #316]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10d      	bne.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e04:	4b4c      	ldr	r3, [pc, #304]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	4a4b      	ldr	r2, [pc, #300]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	61d3      	str	r3, [r2, #28]
 8001e10:	4b49      	ldr	r3, [pc, #292]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	4b46      	ldr	r3, [pc, #280]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d118      	bne.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2c:	4b43      	ldr	r3, [pc, #268]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a42      	ldr	r2, [pc, #264]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e38:	f7fe fd2a 	bl	8000890 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3e:	e008      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e40:	f7fe fd26 	bl	8000890 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e06d      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e52:	4b3a      	ldr	r3, [pc, #232]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e5e:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e66:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d02e      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d027      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e84:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e86:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e8c:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e92:	4a29      	ldr	r2, [pc, #164]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d014      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea2:	f7fe fcf5 	bl	8000890 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f7fe fcf1 	bl	8000890 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e036      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0ee      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4917      	ldr	r1, [pc, #92]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ede:	7dfb      	ldrb	r3, [r7, #23]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d105      	bne.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee4:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	4a13      	ldr	r2, [pc, #76]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	490b      	ldr	r1, [pc, #44]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d008      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	4904      	ldr	r1, [pc, #16]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40007000 	.word	0x40007000
 8001f40:	42420440 	.word	0x42420440

08001f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e041      	b.n	8001fda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7fe fb18 	bl	80005a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2202      	movs	r2, #2
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3304      	adds	r3, #4
 8001f80:	4619      	mov	r1, r3
 8001f82:	4610      	mov	r0, r2
 8001f84:	f000 fa2a 	bl	80023dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d122      	bne.n	800203e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b02      	cmp	r3, #2
 8002004:	d11b      	bne.n	800203e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f06f 0202 	mvn.w	r2, #2
 800200e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f9bd 	bl	80023a4 <HAL_TIM_IC_CaptureCallback>
 800202a:	e005      	b.n	8002038 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f9b0 	bl	8002392 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f9bf 	bl	80023b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b04      	cmp	r3, #4
 800204a:	d122      	bne.n	8002092 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b04      	cmp	r3, #4
 8002058:	d11b      	bne.n	8002092 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f06f 0204 	mvn.w	r2, #4
 8002062:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f993 	bl	80023a4 <HAL_TIM_IC_CaptureCallback>
 800207e:	e005      	b.n	800208c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f986 	bl	8002392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f995 	bl	80023b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b08      	cmp	r3, #8
 800209e:	d122      	bne.n	80020e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d11b      	bne.n	80020e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f06f 0208 	mvn.w	r2, #8
 80020b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2204      	movs	r2, #4
 80020bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f969 	bl	80023a4 <HAL_TIM_IC_CaptureCallback>
 80020d2:	e005      	b.n	80020e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f95c 	bl	8002392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f96b 	bl	80023b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	f003 0310 	and.w	r3, r3, #16
 80020f0:	2b10      	cmp	r3, #16
 80020f2:	d122      	bne.n	800213a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	2b10      	cmp	r3, #16
 8002100:	d11b      	bne.n	800213a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f06f 0210 	mvn.w	r2, #16
 800210a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2208      	movs	r2, #8
 8002110:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f93f 	bl	80023a4 <HAL_TIM_IC_CaptureCallback>
 8002126:	e005      	b.n	8002134 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f932 	bl	8002392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f941 	bl	80023b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b01      	cmp	r3, #1
 8002146:	d10e      	bne.n	8002166 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b01      	cmp	r3, #1
 8002154:	d107      	bne.n	8002166 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f06f 0201 	mvn.w	r2, #1
 800215e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f90d 	bl	8002380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002170:	2b80      	cmp	r3, #128	; 0x80
 8002172:	d10e      	bne.n	8002192 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217e:	2b80      	cmp	r3, #128	; 0x80
 8002180:	d107      	bne.n	8002192 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800218a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 fa74 	bl	800267a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219c:	2b40      	cmp	r3, #64	; 0x40
 800219e:	d10e      	bne.n	80021be <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021aa:	2b40      	cmp	r3, #64	; 0x40
 80021ac:	d107      	bne.n	80021be <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f905 	bl	80023c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f003 0320 	and.w	r3, r3, #32
 80021c8:	2b20      	cmp	r3, #32
 80021ca:	d10e      	bne.n	80021ea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	2b20      	cmp	r3, #32
 80021d8:	d107      	bne.n	80021ea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f06f 0220 	mvn.w	r2, #32
 80021e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 fa3f 	bl	8002668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b084      	sub	sp, #16
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_TIM_ConfigClockSource+0x1c>
 800220a:	2302      	movs	r3, #2
 800220c:	e0b4      	b.n	8002378 <HAL_TIM_ConfigClockSource+0x186>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2202      	movs	r2, #2
 800221a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800222c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002234:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002246:	d03e      	beq.n	80022c6 <HAL_TIM_ConfigClockSource+0xd4>
 8002248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800224c:	f200 8087 	bhi.w	800235e <HAL_TIM_ConfigClockSource+0x16c>
 8002250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002254:	f000 8086 	beq.w	8002364 <HAL_TIM_ConfigClockSource+0x172>
 8002258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225c:	d87f      	bhi.n	800235e <HAL_TIM_ConfigClockSource+0x16c>
 800225e:	2b70      	cmp	r3, #112	; 0x70
 8002260:	d01a      	beq.n	8002298 <HAL_TIM_ConfigClockSource+0xa6>
 8002262:	2b70      	cmp	r3, #112	; 0x70
 8002264:	d87b      	bhi.n	800235e <HAL_TIM_ConfigClockSource+0x16c>
 8002266:	2b60      	cmp	r3, #96	; 0x60
 8002268:	d050      	beq.n	800230c <HAL_TIM_ConfigClockSource+0x11a>
 800226a:	2b60      	cmp	r3, #96	; 0x60
 800226c:	d877      	bhi.n	800235e <HAL_TIM_ConfigClockSource+0x16c>
 800226e:	2b50      	cmp	r3, #80	; 0x50
 8002270:	d03c      	beq.n	80022ec <HAL_TIM_ConfigClockSource+0xfa>
 8002272:	2b50      	cmp	r3, #80	; 0x50
 8002274:	d873      	bhi.n	800235e <HAL_TIM_ConfigClockSource+0x16c>
 8002276:	2b40      	cmp	r3, #64	; 0x40
 8002278:	d058      	beq.n	800232c <HAL_TIM_ConfigClockSource+0x13a>
 800227a:	2b40      	cmp	r3, #64	; 0x40
 800227c:	d86f      	bhi.n	800235e <HAL_TIM_ConfigClockSource+0x16c>
 800227e:	2b30      	cmp	r3, #48	; 0x30
 8002280:	d064      	beq.n	800234c <HAL_TIM_ConfigClockSource+0x15a>
 8002282:	2b30      	cmp	r3, #48	; 0x30
 8002284:	d86b      	bhi.n	800235e <HAL_TIM_ConfigClockSource+0x16c>
 8002286:	2b20      	cmp	r3, #32
 8002288:	d060      	beq.n	800234c <HAL_TIM_ConfigClockSource+0x15a>
 800228a:	2b20      	cmp	r3, #32
 800228c:	d867      	bhi.n	800235e <HAL_TIM_ConfigClockSource+0x16c>
 800228e:	2b00      	cmp	r3, #0
 8002290:	d05c      	beq.n	800234c <HAL_TIM_ConfigClockSource+0x15a>
 8002292:	2b10      	cmp	r3, #16
 8002294:	d05a      	beq.n	800234c <HAL_TIM_ConfigClockSource+0x15a>
 8002296:	e062      	b.n	800235e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022a8:	f000 f967 	bl	800257a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	609a      	str	r2, [r3, #8]
      break;
 80022c4:	e04f      	b.n	8002366 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022d6:	f000 f950 	bl	800257a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022e8:	609a      	str	r2, [r3, #8]
      break;
 80022ea:	e03c      	b.n	8002366 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022f8:	461a      	mov	r2, r3
 80022fa:	f000 f8c7 	bl	800248c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2150      	movs	r1, #80	; 0x50
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f91e 	bl	8002546 <TIM_ITRx_SetConfig>
      break;
 800230a:	e02c      	b.n	8002366 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002318:	461a      	mov	r2, r3
 800231a:	f000 f8e5 	bl	80024e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2160      	movs	r1, #96	; 0x60
 8002324:	4618      	mov	r0, r3
 8002326:	f000 f90e 	bl	8002546 <TIM_ITRx_SetConfig>
      break;
 800232a:	e01c      	b.n	8002366 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002338:	461a      	mov	r2, r3
 800233a:	f000 f8a7 	bl	800248c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2140      	movs	r1, #64	; 0x40
 8002344:	4618      	mov	r0, r3
 8002346:	f000 f8fe 	bl	8002546 <TIM_ITRx_SetConfig>
      break;
 800234a:	e00c      	b.n	8002366 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4619      	mov	r1, r3
 8002356:	4610      	mov	r0, r2
 8002358:	f000 f8f5 	bl	8002546 <TIM_ITRx_SetConfig>
      break;
 800235c:	e003      	b.n	8002366 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
      break;
 8002362:	e000      	b.n	8002366 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002364:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002376:	7bfb      	ldrb	r3, [r7, #15]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr

08002392 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
	...

080023dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a25      	ldr	r2, [pc, #148]	; (8002484 <TIM_Base_SetConfig+0xa8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d007      	beq.n	8002404 <TIM_Base_SetConfig+0x28>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023fa:	d003      	beq.n	8002404 <TIM_Base_SetConfig+0x28>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a22      	ldr	r2, [pc, #136]	; (8002488 <TIM_Base_SetConfig+0xac>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d108      	bne.n	8002416 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a1a      	ldr	r2, [pc, #104]	; (8002484 <TIM_Base_SetConfig+0xa8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d007      	beq.n	800242e <TIM_Base_SetConfig+0x52>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002424:	d003      	beq.n	800242e <TIM_Base_SetConfig+0x52>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a17      	ldr	r2, [pc, #92]	; (8002488 <TIM_Base_SetConfig+0xac>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d108      	bne.n	8002440 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a07      	ldr	r2, [pc, #28]	; (8002484 <TIM_Base_SetConfig+0xa8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d103      	bne.n	8002474 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	615a      	str	r2, [r3, #20]
}
 800247a:	bf00      	nop
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr
 8002484:	40012c00 	.word	0x40012c00
 8002488:	40000400 	.word	0x40000400

0800248c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	f023 0201 	bic.w	r2, r3, #1
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f023 030a 	bic.w	r3, r3, #10
 80024c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	621a      	str	r2, [r3, #32]
}
 80024de:	bf00      	nop
 80024e0:	371c      	adds	r7, #28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b087      	sub	sp, #28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	f023 0210 	bic.w	r2, r3, #16
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	031b      	lsls	r3, r3, #12
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002524:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	621a      	str	r2, [r3, #32]
}
 800253c:	bf00      	nop
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002546:	b480      	push	{r7}
 8002548:	b085      	sub	sp, #20
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4313      	orrs	r3, r2
 8002564:	f043 0307 	orr.w	r3, r3, #7
 8002568:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	609a      	str	r2, [r3, #8]
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr

0800257a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800257a:	b480      	push	{r7}
 800257c:	b087      	sub	sp, #28
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002594:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	021a      	lsls	r2, r3, #8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	431a      	orrs	r2, r3
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	609a      	str	r2, [r3, #8]
}
 80025ae:	bf00      	nop
 80025b0:	371c      	adds	r7, #28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e041      	b.n	8002654 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a14      	ldr	r2, [pc, #80]	; (8002660 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d009      	beq.n	8002628 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261c:	d004      	beq.n	8002628 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a10      	ldr	r2, [pc, #64]	; (8002664 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d10c      	bne.n	8002642 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800262e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	4313      	orrs	r3, r2
 8002638:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40012c00 	.word	0x40012c00
 8002664:	40000400 	.word	0x40000400

08002668 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr

0800267a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e042      	b.n	8002724 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fd ff9a 	bl	80005ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2224      	movs	r2, #36	; 0x24
 80026bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 fdc5 	bl	8003260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002704:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08a      	sub	sp, #40	; 0x28
 8002730:	af02      	add	r7, sp, #8
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	4613      	mov	r3, r2
 800273a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b20      	cmp	r3, #32
 800274a:	d16d      	bne.n	8002828 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <HAL_UART_Transmit+0x2c>
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e066      	b.n	800282a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2221      	movs	r2, #33	; 0x21
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800276a:	f7fe f891 	bl	8000890 <HAL_GetTick>
 800276e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	88fa      	ldrh	r2, [r7, #6]
 8002774:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	88fa      	ldrh	r2, [r7, #6]
 800277a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002784:	d108      	bne.n	8002798 <HAL_UART_Transmit+0x6c>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d104      	bne.n	8002798 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	e003      	b.n	80027a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800279c:	2300      	movs	r3, #0
 800279e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027a0:	e02a      	b.n	80027f8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2200      	movs	r2, #0
 80027aa:	2180      	movs	r1, #128	; 0x80
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 fb14 	bl	8002dda <UART_WaitOnFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e036      	b.n	800282a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10b      	bne.n	80027da <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	3302      	adds	r3, #2
 80027d6:	61bb      	str	r3, [r7, #24]
 80027d8:	e007      	b.n	80027ea <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	781a      	ldrb	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	3301      	adds	r3, #1
 80027e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1cf      	bne.n	80027a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2200      	movs	r2, #0
 800280a:	2140      	movs	r1, #64	; 0x40
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 fae4 	bl	8002dda <UART_WaitOnFlagUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e006      	b.n	800282a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	e000      	b.n	800282a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002828:	2302      	movs	r3, #2
  }
}
 800282a:	4618      	mov	r0, r3
 800282c:	3720      	adds	r7, #32
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	4613      	mov	r3, r2
 800283e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b20      	cmp	r3, #32
 800284a:	d112      	bne.n	8002872 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <HAL_UART_Receive_IT+0x26>
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e00b      	b.n	8002874 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	461a      	mov	r2, r3
 8002866:	68b9      	ldr	r1, [r7, #8]
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 fb24 	bl	8002eb6 <UART_Start_Receive_IT>
 800286e:	4603      	mov	r3, r0
 8002870:	e000      	b.n	8002874 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002872:	2302      	movs	r3, #2
  }
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b0ba      	sub	sp, #232	; 0xe8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80028ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10f      	bne.n	80028e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d009      	beq.n	80028e2 <HAL_UART_IRQHandler+0x66>
 80028ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fc01 	bl	80030e2 <UART_Receive_IT>
      return;
 80028e0:	e25b      	b.n	8002d9a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80028e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 80de 	beq.w	8002aa8 <HAL_UART_IRQHandler+0x22c>
 80028ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d106      	bne.n	8002906 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80d1 	beq.w	8002aa8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00b      	beq.n	800292a <HAL_UART_IRQHandler+0xae>
 8002912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f043 0201 	orr.w	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800292a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <HAL_UART_IRQHandler+0xd2>
 8002936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	f043 0202 	orr.w	r2, r3, #2
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800294e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00b      	beq.n	8002972 <HAL_UART_IRQHandler+0xf6>
 800295a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	f043 0204 	orr.w	r2, r3, #4
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d011      	beq.n	80029a2 <HAL_UART_IRQHandler+0x126>
 800297e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b00      	cmp	r3, #0
 8002988:	d105      	bne.n	8002996 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800298a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f043 0208 	orr.w	r2, r3, #8
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 81f2 	beq.w	8002d90 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b0:	f003 0320 	and.w	r3, r3, #32
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_UART_IRQHandler+0x14e>
 80029b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 fb8c 	bl	80030e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d103      	bne.n	80029f6 <HAL_UART_IRQHandler+0x17a>
 80029ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d04f      	beq.n	8002a96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fa96 	bl	8002f28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d041      	beq.n	8002a8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	3314      	adds	r3, #20
 8002a10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a18:	e853 3f00 	ldrex	r3, [r3]
 8002a1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	3314      	adds	r3, #20
 8002a32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a46:	e841 2300 	strex	r3, r2, [r1]
 8002a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1d9      	bne.n	8002a0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d013      	beq.n	8002a86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a62:	4a7e      	ldr	r2, [pc, #504]	; (8002c5c <HAL_UART_IRQHandler+0x3e0>)
 8002a64:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fb7e 	bl	800116c <HAL_DMA_Abort_IT>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d016      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a80:	4610      	mov	r0, r2
 8002a82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a84:	e00e      	b.n	8002aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f993 	bl	8002db2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a8c:	e00a      	b.n	8002aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f98f 	bl	8002db2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a94:	e006      	b.n	8002aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f98b 	bl	8002db2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002aa2:	e175      	b.n	8002d90 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa4:	bf00      	nop
    return;
 8002aa6:	e173      	b.n	8002d90 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	f040 814f 	bne.w	8002d50 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 8148 	beq.w	8002d50 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8141 	beq.w	8002d50 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80b6 	beq.w	8002c60 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 8145 	beq.w	8002d94 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b12:	429a      	cmp	r2, r3
 8002b14:	f080 813e 	bcs.w	8002d94 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	f000 8088 	beq.w	8002c3c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	330c      	adds	r3, #12
 8002b32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b3a:	e853 3f00 	ldrex	r3, [r3]
 8002b3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	330c      	adds	r3, #12
 8002b54:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b58:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b60:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b64:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b68:	e841 2300 	strex	r3, r2, [r1]
 8002b6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1d9      	bne.n	8002b2c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3314      	adds	r3, #20
 8002b7e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b82:	e853 3f00 	ldrex	r3, [r3]
 8002b86:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3314      	adds	r3, #20
 8002b98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ba0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ba4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ba8:	e841 2300 	strex	r3, r2, [r1]
 8002bac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002bae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1e1      	bne.n	8002b78 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3314      	adds	r3, #20
 8002bba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bbe:	e853 3f00 	ldrex	r3, [r3]
 8002bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3314      	adds	r3, #20
 8002bd4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002bd8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bdc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002bde:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002be0:	e841 2300 	strex	r3, r2, [r1]
 8002be4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1e3      	bne.n	8002bb4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	330c      	adds	r3, #12
 8002c00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c04:	e853 3f00 	ldrex	r3, [r3]
 8002c08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c0c:	f023 0310 	bic.w	r3, r3, #16
 8002c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	330c      	adds	r3, #12
 8002c1a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002c1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c20:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c26:	e841 2300 	strex	r3, r2, [r1]
 8002c2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1e3      	bne.n	8002bfa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe fa5d 	bl	80010f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	4619      	mov	r1, r3
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f8b6 	bl	8002dc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c58:	e09c      	b.n	8002d94 <HAL_UART_IRQHandler+0x518>
 8002c5a:	bf00      	nop
 8002c5c:	08002fed 	.word	0x08002fed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 808e 	beq.w	8002d98 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002c7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 8089 	beq.w	8002d98 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	330c      	adds	r3, #12
 8002c8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c90:	e853 3f00 	ldrex	r3, [r3]
 8002c94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	330c      	adds	r3, #12
 8002ca6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002caa:	647a      	str	r2, [r7, #68]	; 0x44
 8002cac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cb2:	e841 2300 	strex	r3, r2, [r1]
 8002cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1e3      	bne.n	8002c86 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3314      	adds	r3, #20
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	e853 3f00 	ldrex	r3, [r3]
 8002ccc:	623b      	str	r3, [r7, #32]
   return(result);
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3314      	adds	r3, #20
 8002cde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ce2:	633a      	str	r2, [r7, #48]	; 0x30
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cea:	e841 2300 	strex	r3, r2, [r1]
 8002cee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1e3      	bne.n	8002cbe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	330c      	adds	r3, #12
 8002d0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	e853 3f00 	ldrex	r3, [r3]
 8002d12:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0310 	bic.w	r3, r3, #16
 8002d1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	330c      	adds	r3, #12
 8002d24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d28:	61fa      	str	r2, [r7, #28]
 8002d2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2c:	69b9      	ldr	r1, [r7, #24]
 8002d2e:	69fa      	ldr	r2, [r7, #28]
 8002d30:	e841 2300 	strex	r3, r2, [r1]
 8002d34:	617b      	str	r3, [r7, #20]
   return(result);
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1e3      	bne.n	8002d04 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d46:	4619      	mov	r1, r3
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f83b 	bl	8002dc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d4e:	e023      	b.n	8002d98 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d009      	beq.n	8002d70 <HAL_UART_IRQHandler+0x4f4>
 8002d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f953 	bl	8003014 <UART_Transmit_IT>
    return;
 8002d6e:	e014      	b.n	8002d9a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00e      	beq.n	8002d9a <HAL_UART_IRQHandler+0x51e>
 8002d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f992 	bl	80030b2 <UART_EndTransmit_IT>
    return;
 8002d8e:	e004      	b.n	8002d9a <HAL_UART_IRQHandler+0x51e>
    return;
 8002d90:	bf00      	nop
 8002d92:	e002      	b.n	8002d9a <HAL_UART_IRQHandler+0x51e>
      return;
 8002d94:	bf00      	nop
 8002d96:	e000      	b.n	8002d9a <HAL_UART_IRQHandler+0x51e>
      return;
 8002d98:	bf00      	nop
  }
}
 8002d9a:	37e8      	adds	r7, #232	; 0xe8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr

08002db2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b090      	sub	sp, #64	; 0x40
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	4613      	mov	r3, r2
 8002de8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dea:	e050      	b.n	8002e8e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df2:	d04c      	beq.n	8002e8e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <UART_WaitOnFlagUntilTimeout+0x30>
 8002dfa:	f7fd fd49 	bl	8000890 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d241      	bcs.n	8002e8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	330c      	adds	r3, #12
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	e853 3f00 	ldrex	r3, [r3]
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	330c      	adds	r3, #12
 8002e28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e2a:	637a      	str	r2, [r7, #52]	; 0x34
 8002e2c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e32:	e841 2300 	strex	r3, r2, [r1]
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1e5      	bne.n	8002e0a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	3314      	adds	r3, #20
 8002e44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	e853 3f00 	ldrex	r3, [r3]
 8002e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3314      	adds	r3, #20
 8002e5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e5e:	623a      	str	r2, [r7, #32]
 8002e60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e62:	69f9      	ldr	r1, [r7, #28]
 8002e64:	6a3a      	ldr	r2, [r7, #32]
 8002e66:	e841 2300 	strex	r3, r2, [r1]
 8002e6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1e5      	bne.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e00f      	b.n	8002eae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4013      	ands	r3, r2
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	bf0c      	ite	eq
 8002e9e:	2301      	moveq	r3, #1
 8002ea0:	2300      	movne	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d09f      	beq.n	8002dec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3740      	adds	r7, #64	; 0x40
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b085      	sub	sp, #20
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2222      	movs	r2, #34	; 0x22
 8002ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002efa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0220 	orr.w	r2, r2, #32
 8002f1a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b095      	sub	sp, #84	; 0x54
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	330c      	adds	r3, #12
 8002f36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f3a:	e853 3f00 	ldrex	r3, [r3]
 8002f3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	330c      	adds	r3, #12
 8002f4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f50:	643a      	str	r2, [r7, #64]	; 0x40
 8002f52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f58:	e841 2300 	strex	r3, r2, [r1]
 8002f5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1e5      	bne.n	8002f30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	3314      	adds	r3, #20
 8002f6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	e853 3f00 	ldrex	r3, [r3]
 8002f72:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f023 0301 	bic.w	r3, r3, #1
 8002f7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3314      	adds	r3, #20
 8002f82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f8c:	e841 2300 	strex	r3, r2, [r1]
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1e5      	bne.n	8002f64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d119      	bne.n	8002fd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	330c      	adds	r3, #12
 8002fa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	e853 3f00 	ldrex	r3, [r3]
 8002fae:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f023 0310 	bic.w	r3, r3, #16
 8002fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	330c      	adds	r3, #12
 8002fbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fc0:	61ba      	str	r2, [r7, #24]
 8002fc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc4:	6979      	ldr	r1, [r7, #20]
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	e841 2300 	strex	r3, r2, [r1]
 8002fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e5      	bne.n	8002fa0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002fe2:	bf00      	nop
 8002fe4:	3754      	adds	r7, #84	; 0x54
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f7ff fed3 	bl	8002db2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800300c:	bf00      	nop
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b21      	cmp	r3, #33	; 0x21
 8003026:	d13e      	bne.n	80030a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003030:	d114      	bne.n	800305c <UART_Transmit_IT+0x48>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d110      	bne.n	800305c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800304e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	1c9a      	adds	r2, r3, #2
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	621a      	str	r2, [r3, #32]
 800305a:	e008      	b.n	800306e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	1c59      	adds	r1, r3, #1
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6211      	str	r1, [r2, #32]
 8003066:	781a      	ldrb	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29b      	uxth	r3, r3
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	4619      	mov	r1, r3
 800307c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10f      	bne.n	80030a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003090:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e000      	b.n	80030a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
  }
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr

080030b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff fe64 	bl	8002da0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b08c      	sub	sp, #48	; 0x30
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b22      	cmp	r3, #34	; 0x22
 80030f4:	f040 80ae 	bne.w	8003254 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003100:	d117      	bne.n	8003132 <UART_Receive_IT+0x50>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d113      	bne.n	8003132 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800310a:	2300      	movs	r3, #0
 800310c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	b29b      	uxth	r3, r3
 800311c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003120:	b29a      	uxth	r2, r3
 8003122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003124:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	1c9a      	adds	r2, r3, #2
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	629a      	str	r2, [r3, #40]	; 0x28
 8003130:	e026      	b.n	8003180 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003138:	2300      	movs	r3, #0
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003144:	d007      	beq.n	8003156 <UART_Receive_IT+0x74>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10a      	bne.n	8003164 <UART_Receive_IT+0x82>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	e008      	b.n	8003176 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003170:	b2da      	uxtb	r2, r3
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29b      	uxth	r3, r3
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	4619      	mov	r1, r3
 800318e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003190:	2b00      	cmp	r3, #0
 8003192:	d15d      	bne.n	8003250 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0220 	bic.w	r2, r2, #32
 80031a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0201 	bic.w	r2, r2, #1
 80031c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d135      	bne.n	8003246 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	330c      	adds	r3, #12
 80031e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	e853 3f00 	ldrex	r3, [r3]
 80031ee:	613b      	str	r3, [r7, #16]
   return(result);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f023 0310 	bic.w	r3, r3, #16
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	330c      	adds	r3, #12
 80031fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003200:	623a      	str	r2, [r7, #32]
 8003202:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003204:	69f9      	ldr	r1, [r7, #28]
 8003206:	6a3a      	ldr	r2, [r7, #32]
 8003208:	e841 2300 	strex	r3, r2, [r1]
 800320c:	61bb      	str	r3, [r7, #24]
   return(result);
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1e5      	bne.n	80031e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b10      	cmp	r3, #16
 8003220:	d10a      	bne.n	8003238 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800323c:	4619      	mov	r1, r3
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff fdc0 	bl	8002dc4 <HAL_UARTEx_RxEventCallback>
 8003244:	e002      	b.n	800324c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fc ff80 	bl	800014c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	e002      	b.n	8003256 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	e000      	b.n	8003256 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003254:	2302      	movs	r3, #2
  }
}
 8003256:	4618      	mov	r0, r3
 8003258:	3730      	adds	r7, #48	; 0x30
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	4313      	orrs	r3, r2
 800328e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800329a:	f023 030c 	bic.w	r3, r3, #12
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	430b      	orrs	r3, r1
 80032a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a2c      	ldr	r2, [pc, #176]	; (8003374 <UART_SetConfig+0x114>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d103      	bne.n	80032d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032c8:	f7fe fd54 	bl	8001d74 <HAL_RCC_GetPCLK2Freq>
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	e002      	b.n	80032d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032d0:	f7fe fd3c 	bl	8001d4c <HAL_RCC_GetPCLK1Freq>
 80032d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	009a      	lsls	r2, r3, #2
 80032e0:	441a      	add	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ec:	4a22      	ldr	r2, [pc, #136]	; (8003378 <UART_SetConfig+0x118>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	0119      	lsls	r1, r3, #4
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	009a      	lsls	r2, r3, #2
 8003300:	441a      	add	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	fbb2 f2f3 	udiv	r2, r2, r3
 800330c:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <UART_SetConfig+0x118>)
 800330e:	fba3 0302 	umull	r0, r3, r3, r2
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	2064      	movs	r0, #100	; 0x64
 8003316:	fb00 f303 	mul.w	r3, r0, r3
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	3332      	adds	r3, #50	; 0x32
 8003320:	4a15      	ldr	r2, [pc, #84]	; (8003378 <UART_SetConfig+0x118>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800332c:	4419      	add	r1, r3
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	009a      	lsls	r2, r3, #2
 8003338:	441a      	add	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	fbb2 f2f3 	udiv	r2, r2, r3
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <UART_SetConfig+0x118>)
 8003346:	fba3 0302 	umull	r0, r3, r3, r2
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	2064      	movs	r0, #100	; 0x64
 800334e:	fb00 f303 	mul.w	r3, r0, r3
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	3332      	adds	r3, #50	; 0x32
 8003358:	4a07      	ldr	r2, [pc, #28]	; (8003378 <UART_SetConfig+0x118>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	f003 020f 	and.w	r2, r3, #15
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	440a      	add	r2, r1
 800336a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800336c:	bf00      	nop
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40013800 	.word	0x40013800
 8003378:	51eb851f 	.word	0x51eb851f

0800337c <siprintf>:
 800337c:	b40e      	push	{r1, r2, r3}
 800337e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003382:	b500      	push	{lr}
 8003384:	b09c      	sub	sp, #112	; 0x70
 8003386:	ab1d      	add	r3, sp, #116	; 0x74
 8003388:	9002      	str	r0, [sp, #8]
 800338a:	9006      	str	r0, [sp, #24]
 800338c:	9107      	str	r1, [sp, #28]
 800338e:	9104      	str	r1, [sp, #16]
 8003390:	4808      	ldr	r0, [pc, #32]	; (80033b4 <siprintf+0x38>)
 8003392:	4909      	ldr	r1, [pc, #36]	; (80033b8 <siprintf+0x3c>)
 8003394:	f853 2b04 	ldr.w	r2, [r3], #4
 8003398:	9105      	str	r1, [sp, #20]
 800339a:	6800      	ldr	r0, [r0, #0]
 800339c:	a902      	add	r1, sp, #8
 800339e:	9301      	str	r3, [sp, #4]
 80033a0:	f000 f98e 	bl	80036c0 <_svfiprintf_r>
 80033a4:	2200      	movs	r2, #0
 80033a6:	9b02      	ldr	r3, [sp, #8]
 80033a8:	701a      	strb	r2, [r3, #0]
 80033aa:	b01c      	add	sp, #112	; 0x70
 80033ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80033b0:	b003      	add	sp, #12
 80033b2:	4770      	bx	lr
 80033b4:	20000058 	.word	0x20000058
 80033b8:	ffff0208 	.word	0xffff0208

080033bc <memset>:
 80033bc:	4603      	mov	r3, r0
 80033be:	4402      	add	r2, r0
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d100      	bne.n	80033c6 <memset+0xa>
 80033c4:	4770      	bx	lr
 80033c6:	f803 1b01 	strb.w	r1, [r3], #1
 80033ca:	e7f9      	b.n	80033c0 <memset+0x4>

080033cc <__errno>:
 80033cc:	4b01      	ldr	r3, [pc, #4]	; (80033d4 <__errno+0x8>)
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	20000058 	.word	0x20000058

080033d8 <__libc_init_array>:
 80033d8:	b570      	push	{r4, r5, r6, lr}
 80033da:	2600      	movs	r6, #0
 80033dc:	4d0c      	ldr	r5, [pc, #48]	; (8003410 <__libc_init_array+0x38>)
 80033de:	4c0d      	ldr	r4, [pc, #52]	; (8003414 <__libc_init_array+0x3c>)
 80033e0:	1b64      	subs	r4, r4, r5
 80033e2:	10a4      	asrs	r4, r4, #2
 80033e4:	42a6      	cmp	r6, r4
 80033e6:	d109      	bne.n	80033fc <__libc_init_array+0x24>
 80033e8:	f000 fc7a 	bl	8003ce0 <_init>
 80033ec:	2600      	movs	r6, #0
 80033ee:	4d0a      	ldr	r5, [pc, #40]	; (8003418 <__libc_init_array+0x40>)
 80033f0:	4c0a      	ldr	r4, [pc, #40]	; (800341c <__libc_init_array+0x44>)
 80033f2:	1b64      	subs	r4, r4, r5
 80033f4:	10a4      	asrs	r4, r4, #2
 80033f6:	42a6      	cmp	r6, r4
 80033f8:	d105      	bne.n	8003406 <__libc_init_array+0x2e>
 80033fa:	bd70      	pop	{r4, r5, r6, pc}
 80033fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003400:	4798      	blx	r3
 8003402:	3601      	adds	r6, #1
 8003404:	e7ee      	b.n	80033e4 <__libc_init_array+0xc>
 8003406:	f855 3b04 	ldr.w	r3, [r5], #4
 800340a:	4798      	blx	r3
 800340c:	3601      	adds	r6, #1
 800340e:	e7f2      	b.n	80033f6 <__libc_init_array+0x1e>
 8003410:	08003d5c 	.word	0x08003d5c
 8003414:	08003d5c 	.word	0x08003d5c
 8003418:	08003d5c 	.word	0x08003d5c
 800341c:	08003d60 	.word	0x08003d60

08003420 <__retarget_lock_acquire_recursive>:
 8003420:	4770      	bx	lr

08003422 <__retarget_lock_release_recursive>:
 8003422:	4770      	bx	lr

08003424 <_free_r>:
 8003424:	b538      	push	{r3, r4, r5, lr}
 8003426:	4605      	mov	r5, r0
 8003428:	2900      	cmp	r1, #0
 800342a:	d040      	beq.n	80034ae <_free_r+0x8a>
 800342c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003430:	1f0c      	subs	r4, r1, #4
 8003432:	2b00      	cmp	r3, #0
 8003434:	bfb8      	it	lt
 8003436:	18e4      	addlt	r4, r4, r3
 8003438:	f000 f8dc 	bl	80035f4 <__malloc_lock>
 800343c:	4a1c      	ldr	r2, [pc, #112]	; (80034b0 <_free_r+0x8c>)
 800343e:	6813      	ldr	r3, [r2, #0]
 8003440:	b933      	cbnz	r3, 8003450 <_free_r+0x2c>
 8003442:	6063      	str	r3, [r4, #4]
 8003444:	6014      	str	r4, [r2, #0]
 8003446:	4628      	mov	r0, r5
 8003448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800344c:	f000 b8d8 	b.w	8003600 <__malloc_unlock>
 8003450:	42a3      	cmp	r3, r4
 8003452:	d908      	bls.n	8003466 <_free_r+0x42>
 8003454:	6820      	ldr	r0, [r4, #0]
 8003456:	1821      	adds	r1, r4, r0
 8003458:	428b      	cmp	r3, r1
 800345a:	bf01      	itttt	eq
 800345c:	6819      	ldreq	r1, [r3, #0]
 800345e:	685b      	ldreq	r3, [r3, #4]
 8003460:	1809      	addeq	r1, r1, r0
 8003462:	6021      	streq	r1, [r4, #0]
 8003464:	e7ed      	b.n	8003442 <_free_r+0x1e>
 8003466:	461a      	mov	r2, r3
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	b10b      	cbz	r3, 8003470 <_free_r+0x4c>
 800346c:	42a3      	cmp	r3, r4
 800346e:	d9fa      	bls.n	8003466 <_free_r+0x42>
 8003470:	6811      	ldr	r1, [r2, #0]
 8003472:	1850      	adds	r0, r2, r1
 8003474:	42a0      	cmp	r0, r4
 8003476:	d10b      	bne.n	8003490 <_free_r+0x6c>
 8003478:	6820      	ldr	r0, [r4, #0]
 800347a:	4401      	add	r1, r0
 800347c:	1850      	adds	r0, r2, r1
 800347e:	4283      	cmp	r3, r0
 8003480:	6011      	str	r1, [r2, #0]
 8003482:	d1e0      	bne.n	8003446 <_free_r+0x22>
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	4408      	add	r0, r1
 800348a:	6010      	str	r0, [r2, #0]
 800348c:	6053      	str	r3, [r2, #4]
 800348e:	e7da      	b.n	8003446 <_free_r+0x22>
 8003490:	d902      	bls.n	8003498 <_free_r+0x74>
 8003492:	230c      	movs	r3, #12
 8003494:	602b      	str	r3, [r5, #0]
 8003496:	e7d6      	b.n	8003446 <_free_r+0x22>
 8003498:	6820      	ldr	r0, [r4, #0]
 800349a:	1821      	adds	r1, r4, r0
 800349c:	428b      	cmp	r3, r1
 800349e:	bf01      	itttt	eq
 80034a0:	6819      	ldreq	r1, [r3, #0]
 80034a2:	685b      	ldreq	r3, [r3, #4]
 80034a4:	1809      	addeq	r1, r1, r0
 80034a6:	6021      	streq	r1, [r4, #0]
 80034a8:	6063      	str	r3, [r4, #4]
 80034aa:	6054      	str	r4, [r2, #4]
 80034ac:	e7cb      	b.n	8003446 <_free_r+0x22>
 80034ae:	bd38      	pop	{r3, r4, r5, pc}
 80034b0:	200002a4 	.word	0x200002a4

080034b4 <sbrk_aligned>:
 80034b4:	b570      	push	{r4, r5, r6, lr}
 80034b6:	4e0e      	ldr	r6, [pc, #56]	; (80034f0 <sbrk_aligned+0x3c>)
 80034b8:	460c      	mov	r4, r1
 80034ba:	6831      	ldr	r1, [r6, #0]
 80034bc:	4605      	mov	r5, r0
 80034be:	b911      	cbnz	r1, 80034c6 <sbrk_aligned+0x12>
 80034c0:	f000 fbaa 	bl	8003c18 <_sbrk_r>
 80034c4:	6030      	str	r0, [r6, #0]
 80034c6:	4621      	mov	r1, r4
 80034c8:	4628      	mov	r0, r5
 80034ca:	f000 fba5 	bl	8003c18 <_sbrk_r>
 80034ce:	1c43      	adds	r3, r0, #1
 80034d0:	d00a      	beq.n	80034e8 <sbrk_aligned+0x34>
 80034d2:	1cc4      	adds	r4, r0, #3
 80034d4:	f024 0403 	bic.w	r4, r4, #3
 80034d8:	42a0      	cmp	r0, r4
 80034da:	d007      	beq.n	80034ec <sbrk_aligned+0x38>
 80034dc:	1a21      	subs	r1, r4, r0
 80034de:	4628      	mov	r0, r5
 80034e0:	f000 fb9a 	bl	8003c18 <_sbrk_r>
 80034e4:	3001      	adds	r0, #1
 80034e6:	d101      	bne.n	80034ec <sbrk_aligned+0x38>
 80034e8:	f04f 34ff 	mov.w	r4, #4294967295
 80034ec:	4620      	mov	r0, r4
 80034ee:	bd70      	pop	{r4, r5, r6, pc}
 80034f0:	200002a8 	.word	0x200002a8

080034f4 <_malloc_r>:
 80034f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034f8:	1ccd      	adds	r5, r1, #3
 80034fa:	f025 0503 	bic.w	r5, r5, #3
 80034fe:	3508      	adds	r5, #8
 8003500:	2d0c      	cmp	r5, #12
 8003502:	bf38      	it	cc
 8003504:	250c      	movcc	r5, #12
 8003506:	2d00      	cmp	r5, #0
 8003508:	4607      	mov	r7, r0
 800350a:	db01      	blt.n	8003510 <_malloc_r+0x1c>
 800350c:	42a9      	cmp	r1, r5
 800350e:	d905      	bls.n	800351c <_malloc_r+0x28>
 8003510:	230c      	movs	r3, #12
 8003512:	2600      	movs	r6, #0
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	4630      	mov	r0, r6
 8003518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800351c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80035f0 <_malloc_r+0xfc>
 8003520:	f000 f868 	bl	80035f4 <__malloc_lock>
 8003524:	f8d8 3000 	ldr.w	r3, [r8]
 8003528:	461c      	mov	r4, r3
 800352a:	bb5c      	cbnz	r4, 8003584 <_malloc_r+0x90>
 800352c:	4629      	mov	r1, r5
 800352e:	4638      	mov	r0, r7
 8003530:	f7ff ffc0 	bl	80034b4 <sbrk_aligned>
 8003534:	1c43      	adds	r3, r0, #1
 8003536:	4604      	mov	r4, r0
 8003538:	d155      	bne.n	80035e6 <_malloc_r+0xf2>
 800353a:	f8d8 4000 	ldr.w	r4, [r8]
 800353e:	4626      	mov	r6, r4
 8003540:	2e00      	cmp	r6, #0
 8003542:	d145      	bne.n	80035d0 <_malloc_r+0xdc>
 8003544:	2c00      	cmp	r4, #0
 8003546:	d048      	beq.n	80035da <_malloc_r+0xe6>
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	4631      	mov	r1, r6
 800354c:	4638      	mov	r0, r7
 800354e:	eb04 0903 	add.w	r9, r4, r3
 8003552:	f000 fb61 	bl	8003c18 <_sbrk_r>
 8003556:	4581      	cmp	r9, r0
 8003558:	d13f      	bne.n	80035da <_malloc_r+0xe6>
 800355a:	6821      	ldr	r1, [r4, #0]
 800355c:	4638      	mov	r0, r7
 800355e:	1a6d      	subs	r5, r5, r1
 8003560:	4629      	mov	r1, r5
 8003562:	f7ff ffa7 	bl	80034b4 <sbrk_aligned>
 8003566:	3001      	adds	r0, #1
 8003568:	d037      	beq.n	80035da <_malloc_r+0xe6>
 800356a:	6823      	ldr	r3, [r4, #0]
 800356c:	442b      	add	r3, r5
 800356e:	6023      	str	r3, [r4, #0]
 8003570:	f8d8 3000 	ldr.w	r3, [r8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d038      	beq.n	80035ea <_malloc_r+0xf6>
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	42a2      	cmp	r2, r4
 800357c:	d12b      	bne.n	80035d6 <_malloc_r+0xe2>
 800357e:	2200      	movs	r2, #0
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	e00f      	b.n	80035a4 <_malloc_r+0xb0>
 8003584:	6822      	ldr	r2, [r4, #0]
 8003586:	1b52      	subs	r2, r2, r5
 8003588:	d41f      	bmi.n	80035ca <_malloc_r+0xd6>
 800358a:	2a0b      	cmp	r2, #11
 800358c:	d917      	bls.n	80035be <_malloc_r+0xca>
 800358e:	1961      	adds	r1, r4, r5
 8003590:	42a3      	cmp	r3, r4
 8003592:	6025      	str	r5, [r4, #0]
 8003594:	bf18      	it	ne
 8003596:	6059      	strne	r1, [r3, #4]
 8003598:	6863      	ldr	r3, [r4, #4]
 800359a:	bf08      	it	eq
 800359c:	f8c8 1000 	streq.w	r1, [r8]
 80035a0:	5162      	str	r2, [r4, r5]
 80035a2:	604b      	str	r3, [r1, #4]
 80035a4:	4638      	mov	r0, r7
 80035a6:	f104 060b 	add.w	r6, r4, #11
 80035aa:	f000 f829 	bl	8003600 <__malloc_unlock>
 80035ae:	f026 0607 	bic.w	r6, r6, #7
 80035b2:	1d23      	adds	r3, r4, #4
 80035b4:	1af2      	subs	r2, r6, r3
 80035b6:	d0ae      	beq.n	8003516 <_malloc_r+0x22>
 80035b8:	1b9b      	subs	r3, r3, r6
 80035ba:	50a3      	str	r3, [r4, r2]
 80035bc:	e7ab      	b.n	8003516 <_malloc_r+0x22>
 80035be:	42a3      	cmp	r3, r4
 80035c0:	6862      	ldr	r2, [r4, #4]
 80035c2:	d1dd      	bne.n	8003580 <_malloc_r+0x8c>
 80035c4:	f8c8 2000 	str.w	r2, [r8]
 80035c8:	e7ec      	b.n	80035a4 <_malloc_r+0xb0>
 80035ca:	4623      	mov	r3, r4
 80035cc:	6864      	ldr	r4, [r4, #4]
 80035ce:	e7ac      	b.n	800352a <_malloc_r+0x36>
 80035d0:	4634      	mov	r4, r6
 80035d2:	6876      	ldr	r6, [r6, #4]
 80035d4:	e7b4      	b.n	8003540 <_malloc_r+0x4c>
 80035d6:	4613      	mov	r3, r2
 80035d8:	e7cc      	b.n	8003574 <_malloc_r+0x80>
 80035da:	230c      	movs	r3, #12
 80035dc:	4638      	mov	r0, r7
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	f000 f80e 	bl	8003600 <__malloc_unlock>
 80035e4:	e797      	b.n	8003516 <_malloc_r+0x22>
 80035e6:	6025      	str	r5, [r4, #0]
 80035e8:	e7dc      	b.n	80035a4 <_malloc_r+0xb0>
 80035ea:	605b      	str	r3, [r3, #4]
 80035ec:	deff      	udf	#255	; 0xff
 80035ee:	bf00      	nop
 80035f0:	200002a4 	.word	0x200002a4

080035f4 <__malloc_lock>:
 80035f4:	4801      	ldr	r0, [pc, #4]	; (80035fc <__malloc_lock+0x8>)
 80035f6:	f7ff bf13 	b.w	8003420 <__retarget_lock_acquire_recursive>
 80035fa:	bf00      	nop
 80035fc:	200002a0 	.word	0x200002a0

08003600 <__malloc_unlock>:
 8003600:	4801      	ldr	r0, [pc, #4]	; (8003608 <__malloc_unlock+0x8>)
 8003602:	f7ff bf0e 	b.w	8003422 <__retarget_lock_release_recursive>
 8003606:	bf00      	nop
 8003608:	200002a0 	.word	0x200002a0

0800360c <__ssputs_r>:
 800360c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003610:	461f      	mov	r7, r3
 8003612:	688e      	ldr	r6, [r1, #8]
 8003614:	4682      	mov	sl, r0
 8003616:	42be      	cmp	r6, r7
 8003618:	460c      	mov	r4, r1
 800361a:	4690      	mov	r8, r2
 800361c:	680b      	ldr	r3, [r1, #0]
 800361e:	d82c      	bhi.n	800367a <__ssputs_r+0x6e>
 8003620:	898a      	ldrh	r2, [r1, #12]
 8003622:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003626:	d026      	beq.n	8003676 <__ssputs_r+0x6a>
 8003628:	6965      	ldr	r5, [r4, #20]
 800362a:	6909      	ldr	r1, [r1, #16]
 800362c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003630:	eba3 0901 	sub.w	r9, r3, r1
 8003634:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003638:	1c7b      	adds	r3, r7, #1
 800363a:	444b      	add	r3, r9
 800363c:	106d      	asrs	r5, r5, #1
 800363e:	429d      	cmp	r5, r3
 8003640:	bf38      	it	cc
 8003642:	461d      	movcc	r5, r3
 8003644:	0553      	lsls	r3, r2, #21
 8003646:	d527      	bpl.n	8003698 <__ssputs_r+0x8c>
 8003648:	4629      	mov	r1, r5
 800364a:	f7ff ff53 	bl	80034f4 <_malloc_r>
 800364e:	4606      	mov	r6, r0
 8003650:	b360      	cbz	r0, 80036ac <__ssputs_r+0xa0>
 8003652:	464a      	mov	r2, r9
 8003654:	6921      	ldr	r1, [r4, #16]
 8003656:	f000 fafd 	bl	8003c54 <memcpy>
 800365a:	89a3      	ldrh	r3, [r4, #12]
 800365c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003664:	81a3      	strh	r3, [r4, #12]
 8003666:	6126      	str	r6, [r4, #16]
 8003668:	444e      	add	r6, r9
 800366a:	6026      	str	r6, [r4, #0]
 800366c:	463e      	mov	r6, r7
 800366e:	6165      	str	r5, [r4, #20]
 8003670:	eba5 0509 	sub.w	r5, r5, r9
 8003674:	60a5      	str	r5, [r4, #8]
 8003676:	42be      	cmp	r6, r7
 8003678:	d900      	bls.n	800367c <__ssputs_r+0x70>
 800367a:	463e      	mov	r6, r7
 800367c:	4632      	mov	r2, r6
 800367e:	4641      	mov	r1, r8
 8003680:	6820      	ldr	r0, [r4, #0]
 8003682:	f000 faaf 	bl	8003be4 <memmove>
 8003686:	2000      	movs	r0, #0
 8003688:	68a3      	ldr	r3, [r4, #8]
 800368a:	1b9b      	subs	r3, r3, r6
 800368c:	60a3      	str	r3, [r4, #8]
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	4433      	add	r3, r6
 8003692:	6023      	str	r3, [r4, #0]
 8003694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003698:	462a      	mov	r2, r5
 800369a:	f000 fae9 	bl	8003c70 <_realloc_r>
 800369e:	4606      	mov	r6, r0
 80036a0:	2800      	cmp	r0, #0
 80036a2:	d1e0      	bne.n	8003666 <__ssputs_r+0x5a>
 80036a4:	4650      	mov	r0, sl
 80036a6:	6921      	ldr	r1, [r4, #16]
 80036a8:	f7ff febc 	bl	8003424 <_free_r>
 80036ac:	230c      	movs	r3, #12
 80036ae:	f8ca 3000 	str.w	r3, [sl]
 80036b2:	89a3      	ldrh	r3, [r4, #12]
 80036b4:	f04f 30ff 	mov.w	r0, #4294967295
 80036b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036bc:	81a3      	strh	r3, [r4, #12]
 80036be:	e7e9      	b.n	8003694 <__ssputs_r+0x88>

080036c0 <_svfiprintf_r>:
 80036c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036c4:	4698      	mov	r8, r3
 80036c6:	898b      	ldrh	r3, [r1, #12]
 80036c8:	4607      	mov	r7, r0
 80036ca:	061b      	lsls	r3, r3, #24
 80036cc:	460d      	mov	r5, r1
 80036ce:	4614      	mov	r4, r2
 80036d0:	b09d      	sub	sp, #116	; 0x74
 80036d2:	d50e      	bpl.n	80036f2 <_svfiprintf_r+0x32>
 80036d4:	690b      	ldr	r3, [r1, #16]
 80036d6:	b963      	cbnz	r3, 80036f2 <_svfiprintf_r+0x32>
 80036d8:	2140      	movs	r1, #64	; 0x40
 80036da:	f7ff ff0b 	bl	80034f4 <_malloc_r>
 80036de:	6028      	str	r0, [r5, #0]
 80036e0:	6128      	str	r0, [r5, #16]
 80036e2:	b920      	cbnz	r0, 80036ee <_svfiprintf_r+0x2e>
 80036e4:	230c      	movs	r3, #12
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ec:	e0d0      	b.n	8003890 <_svfiprintf_r+0x1d0>
 80036ee:	2340      	movs	r3, #64	; 0x40
 80036f0:	616b      	str	r3, [r5, #20]
 80036f2:	2300      	movs	r3, #0
 80036f4:	9309      	str	r3, [sp, #36]	; 0x24
 80036f6:	2320      	movs	r3, #32
 80036f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036fc:	2330      	movs	r3, #48	; 0x30
 80036fe:	f04f 0901 	mov.w	r9, #1
 8003702:	f8cd 800c 	str.w	r8, [sp, #12]
 8003706:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80038a8 <_svfiprintf_r+0x1e8>
 800370a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800370e:	4623      	mov	r3, r4
 8003710:	469a      	mov	sl, r3
 8003712:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003716:	b10a      	cbz	r2, 800371c <_svfiprintf_r+0x5c>
 8003718:	2a25      	cmp	r2, #37	; 0x25
 800371a:	d1f9      	bne.n	8003710 <_svfiprintf_r+0x50>
 800371c:	ebba 0b04 	subs.w	fp, sl, r4
 8003720:	d00b      	beq.n	800373a <_svfiprintf_r+0x7a>
 8003722:	465b      	mov	r3, fp
 8003724:	4622      	mov	r2, r4
 8003726:	4629      	mov	r1, r5
 8003728:	4638      	mov	r0, r7
 800372a:	f7ff ff6f 	bl	800360c <__ssputs_r>
 800372e:	3001      	adds	r0, #1
 8003730:	f000 80a9 	beq.w	8003886 <_svfiprintf_r+0x1c6>
 8003734:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003736:	445a      	add	r2, fp
 8003738:	9209      	str	r2, [sp, #36]	; 0x24
 800373a:	f89a 3000 	ldrb.w	r3, [sl]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 80a1 	beq.w	8003886 <_svfiprintf_r+0x1c6>
 8003744:	2300      	movs	r3, #0
 8003746:	f04f 32ff 	mov.w	r2, #4294967295
 800374a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800374e:	f10a 0a01 	add.w	sl, sl, #1
 8003752:	9304      	str	r3, [sp, #16]
 8003754:	9307      	str	r3, [sp, #28]
 8003756:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800375a:	931a      	str	r3, [sp, #104]	; 0x68
 800375c:	4654      	mov	r4, sl
 800375e:	2205      	movs	r2, #5
 8003760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003764:	4850      	ldr	r0, [pc, #320]	; (80038a8 <_svfiprintf_r+0x1e8>)
 8003766:	f000 fa67 	bl	8003c38 <memchr>
 800376a:	9a04      	ldr	r2, [sp, #16]
 800376c:	b9d8      	cbnz	r0, 80037a6 <_svfiprintf_r+0xe6>
 800376e:	06d0      	lsls	r0, r2, #27
 8003770:	bf44      	itt	mi
 8003772:	2320      	movmi	r3, #32
 8003774:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003778:	0711      	lsls	r1, r2, #28
 800377a:	bf44      	itt	mi
 800377c:	232b      	movmi	r3, #43	; 0x2b
 800377e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003782:	f89a 3000 	ldrb.w	r3, [sl]
 8003786:	2b2a      	cmp	r3, #42	; 0x2a
 8003788:	d015      	beq.n	80037b6 <_svfiprintf_r+0xf6>
 800378a:	4654      	mov	r4, sl
 800378c:	2000      	movs	r0, #0
 800378e:	f04f 0c0a 	mov.w	ip, #10
 8003792:	9a07      	ldr	r2, [sp, #28]
 8003794:	4621      	mov	r1, r4
 8003796:	f811 3b01 	ldrb.w	r3, [r1], #1
 800379a:	3b30      	subs	r3, #48	; 0x30
 800379c:	2b09      	cmp	r3, #9
 800379e:	d94d      	bls.n	800383c <_svfiprintf_r+0x17c>
 80037a0:	b1b0      	cbz	r0, 80037d0 <_svfiprintf_r+0x110>
 80037a2:	9207      	str	r2, [sp, #28]
 80037a4:	e014      	b.n	80037d0 <_svfiprintf_r+0x110>
 80037a6:	eba0 0308 	sub.w	r3, r0, r8
 80037aa:	fa09 f303 	lsl.w	r3, r9, r3
 80037ae:	4313      	orrs	r3, r2
 80037b0:	46a2      	mov	sl, r4
 80037b2:	9304      	str	r3, [sp, #16]
 80037b4:	e7d2      	b.n	800375c <_svfiprintf_r+0x9c>
 80037b6:	9b03      	ldr	r3, [sp, #12]
 80037b8:	1d19      	adds	r1, r3, #4
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	9103      	str	r1, [sp, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	bfbb      	ittet	lt
 80037c2:	425b      	neglt	r3, r3
 80037c4:	f042 0202 	orrlt.w	r2, r2, #2
 80037c8:	9307      	strge	r3, [sp, #28]
 80037ca:	9307      	strlt	r3, [sp, #28]
 80037cc:	bfb8      	it	lt
 80037ce:	9204      	strlt	r2, [sp, #16]
 80037d0:	7823      	ldrb	r3, [r4, #0]
 80037d2:	2b2e      	cmp	r3, #46	; 0x2e
 80037d4:	d10c      	bne.n	80037f0 <_svfiprintf_r+0x130>
 80037d6:	7863      	ldrb	r3, [r4, #1]
 80037d8:	2b2a      	cmp	r3, #42	; 0x2a
 80037da:	d134      	bne.n	8003846 <_svfiprintf_r+0x186>
 80037dc:	9b03      	ldr	r3, [sp, #12]
 80037de:	3402      	adds	r4, #2
 80037e0:	1d1a      	adds	r2, r3, #4
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	9203      	str	r2, [sp, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	bfb8      	it	lt
 80037ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80037ee:	9305      	str	r3, [sp, #20]
 80037f0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80038ac <_svfiprintf_r+0x1ec>
 80037f4:	2203      	movs	r2, #3
 80037f6:	4650      	mov	r0, sl
 80037f8:	7821      	ldrb	r1, [r4, #0]
 80037fa:	f000 fa1d 	bl	8003c38 <memchr>
 80037fe:	b138      	cbz	r0, 8003810 <_svfiprintf_r+0x150>
 8003800:	2240      	movs	r2, #64	; 0x40
 8003802:	9b04      	ldr	r3, [sp, #16]
 8003804:	eba0 000a 	sub.w	r0, r0, sl
 8003808:	4082      	lsls	r2, r0
 800380a:	4313      	orrs	r3, r2
 800380c:	3401      	adds	r4, #1
 800380e:	9304      	str	r3, [sp, #16]
 8003810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003814:	2206      	movs	r2, #6
 8003816:	4826      	ldr	r0, [pc, #152]	; (80038b0 <_svfiprintf_r+0x1f0>)
 8003818:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800381c:	f000 fa0c 	bl	8003c38 <memchr>
 8003820:	2800      	cmp	r0, #0
 8003822:	d038      	beq.n	8003896 <_svfiprintf_r+0x1d6>
 8003824:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <_svfiprintf_r+0x1f4>)
 8003826:	bb1b      	cbnz	r3, 8003870 <_svfiprintf_r+0x1b0>
 8003828:	9b03      	ldr	r3, [sp, #12]
 800382a:	3307      	adds	r3, #7
 800382c:	f023 0307 	bic.w	r3, r3, #7
 8003830:	3308      	adds	r3, #8
 8003832:	9303      	str	r3, [sp, #12]
 8003834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003836:	4433      	add	r3, r6
 8003838:	9309      	str	r3, [sp, #36]	; 0x24
 800383a:	e768      	b.n	800370e <_svfiprintf_r+0x4e>
 800383c:	460c      	mov	r4, r1
 800383e:	2001      	movs	r0, #1
 8003840:	fb0c 3202 	mla	r2, ip, r2, r3
 8003844:	e7a6      	b.n	8003794 <_svfiprintf_r+0xd4>
 8003846:	2300      	movs	r3, #0
 8003848:	f04f 0c0a 	mov.w	ip, #10
 800384c:	4619      	mov	r1, r3
 800384e:	3401      	adds	r4, #1
 8003850:	9305      	str	r3, [sp, #20]
 8003852:	4620      	mov	r0, r4
 8003854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003858:	3a30      	subs	r2, #48	; 0x30
 800385a:	2a09      	cmp	r2, #9
 800385c:	d903      	bls.n	8003866 <_svfiprintf_r+0x1a6>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0c6      	beq.n	80037f0 <_svfiprintf_r+0x130>
 8003862:	9105      	str	r1, [sp, #20]
 8003864:	e7c4      	b.n	80037f0 <_svfiprintf_r+0x130>
 8003866:	4604      	mov	r4, r0
 8003868:	2301      	movs	r3, #1
 800386a:	fb0c 2101 	mla	r1, ip, r1, r2
 800386e:	e7f0      	b.n	8003852 <_svfiprintf_r+0x192>
 8003870:	ab03      	add	r3, sp, #12
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	462a      	mov	r2, r5
 8003876:	4638      	mov	r0, r7
 8003878:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <_svfiprintf_r+0x1f8>)
 800387a:	a904      	add	r1, sp, #16
 800387c:	f3af 8000 	nop.w
 8003880:	1c42      	adds	r2, r0, #1
 8003882:	4606      	mov	r6, r0
 8003884:	d1d6      	bne.n	8003834 <_svfiprintf_r+0x174>
 8003886:	89ab      	ldrh	r3, [r5, #12]
 8003888:	065b      	lsls	r3, r3, #25
 800388a:	f53f af2d 	bmi.w	80036e8 <_svfiprintf_r+0x28>
 800388e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003890:	b01d      	add	sp, #116	; 0x74
 8003892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003896:	ab03      	add	r3, sp, #12
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	462a      	mov	r2, r5
 800389c:	4638      	mov	r0, r7
 800389e:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <_svfiprintf_r+0x1f8>)
 80038a0:	a904      	add	r1, sp, #16
 80038a2:	f000 f87d 	bl	80039a0 <_printf_i>
 80038a6:	e7eb      	b.n	8003880 <_svfiprintf_r+0x1c0>
 80038a8:	08003d26 	.word	0x08003d26
 80038ac:	08003d2c 	.word	0x08003d2c
 80038b0:	08003d30 	.word	0x08003d30
 80038b4:	00000000 	.word	0x00000000
 80038b8:	0800360d 	.word	0x0800360d

080038bc <_printf_common>:
 80038bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038c0:	4616      	mov	r6, r2
 80038c2:	4699      	mov	r9, r3
 80038c4:	688a      	ldr	r2, [r1, #8]
 80038c6:	690b      	ldr	r3, [r1, #16]
 80038c8:	4607      	mov	r7, r0
 80038ca:	4293      	cmp	r3, r2
 80038cc:	bfb8      	it	lt
 80038ce:	4613      	movlt	r3, r2
 80038d0:	6033      	str	r3, [r6, #0]
 80038d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038d6:	460c      	mov	r4, r1
 80038d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038dc:	b10a      	cbz	r2, 80038e2 <_printf_common+0x26>
 80038de:	3301      	adds	r3, #1
 80038e0:	6033      	str	r3, [r6, #0]
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	0699      	lsls	r1, r3, #26
 80038e6:	bf42      	ittt	mi
 80038e8:	6833      	ldrmi	r3, [r6, #0]
 80038ea:	3302      	addmi	r3, #2
 80038ec:	6033      	strmi	r3, [r6, #0]
 80038ee:	6825      	ldr	r5, [r4, #0]
 80038f0:	f015 0506 	ands.w	r5, r5, #6
 80038f4:	d106      	bne.n	8003904 <_printf_common+0x48>
 80038f6:	f104 0a19 	add.w	sl, r4, #25
 80038fa:	68e3      	ldr	r3, [r4, #12]
 80038fc:	6832      	ldr	r2, [r6, #0]
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	42ab      	cmp	r3, r5
 8003902:	dc2b      	bgt.n	800395c <_printf_common+0xa0>
 8003904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003908:	1e13      	subs	r3, r2, #0
 800390a:	6822      	ldr	r2, [r4, #0]
 800390c:	bf18      	it	ne
 800390e:	2301      	movne	r3, #1
 8003910:	0692      	lsls	r2, r2, #26
 8003912:	d430      	bmi.n	8003976 <_printf_common+0xba>
 8003914:	4649      	mov	r1, r9
 8003916:	4638      	mov	r0, r7
 8003918:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800391c:	47c0      	blx	r8
 800391e:	3001      	adds	r0, #1
 8003920:	d023      	beq.n	800396a <_printf_common+0xae>
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	6922      	ldr	r2, [r4, #16]
 8003926:	f003 0306 	and.w	r3, r3, #6
 800392a:	2b04      	cmp	r3, #4
 800392c:	bf14      	ite	ne
 800392e:	2500      	movne	r5, #0
 8003930:	6833      	ldreq	r3, [r6, #0]
 8003932:	f04f 0600 	mov.w	r6, #0
 8003936:	bf08      	it	eq
 8003938:	68e5      	ldreq	r5, [r4, #12]
 800393a:	f104 041a 	add.w	r4, r4, #26
 800393e:	bf08      	it	eq
 8003940:	1aed      	subeq	r5, r5, r3
 8003942:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003946:	bf08      	it	eq
 8003948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800394c:	4293      	cmp	r3, r2
 800394e:	bfc4      	itt	gt
 8003950:	1a9b      	subgt	r3, r3, r2
 8003952:	18ed      	addgt	r5, r5, r3
 8003954:	42b5      	cmp	r5, r6
 8003956:	d11a      	bne.n	800398e <_printf_common+0xd2>
 8003958:	2000      	movs	r0, #0
 800395a:	e008      	b.n	800396e <_printf_common+0xb2>
 800395c:	2301      	movs	r3, #1
 800395e:	4652      	mov	r2, sl
 8003960:	4649      	mov	r1, r9
 8003962:	4638      	mov	r0, r7
 8003964:	47c0      	blx	r8
 8003966:	3001      	adds	r0, #1
 8003968:	d103      	bne.n	8003972 <_printf_common+0xb6>
 800396a:	f04f 30ff 	mov.w	r0, #4294967295
 800396e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003972:	3501      	adds	r5, #1
 8003974:	e7c1      	b.n	80038fa <_printf_common+0x3e>
 8003976:	2030      	movs	r0, #48	; 0x30
 8003978:	18e1      	adds	r1, r4, r3
 800397a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003984:	4422      	add	r2, r4
 8003986:	3302      	adds	r3, #2
 8003988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800398c:	e7c2      	b.n	8003914 <_printf_common+0x58>
 800398e:	2301      	movs	r3, #1
 8003990:	4622      	mov	r2, r4
 8003992:	4649      	mov	r1, r9
 8003994:	4638      	mov	r0, r7
 8003996:	47c0      	blx	r8
 8003998:	3001      	adds	r0, #1
 800399a:	d0e6      	beq.n	800396a <_printf_common+0xae>
 800399c:	3601      	adds	r6, #1
 800399e:	e7d9      	b.n	8003954 <_printf_common+0x98>

080039a0 <_printf_i>:
 80039a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039a4:	7e0f      	ldrb	r7, [r1, #24]
 80039a6:	4691      	mov	r9, r2
 80039a8:	2f78      	cmp	r7, #120	; 0x78
 80039aa:	4680      	mov	r8, r0
 80039ac:	460c      	mov	r4, r1
 80039ae:	469a      	mov	sl, r3
 80039b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039b6:	d807      	bhi.n	80039c8 <_printf_i+0x28>
 80039b8:	2f62      	cmp	r7, #98	; 0x62
 80039ba:	d80a      	bhi.n	80039d2 <_printf_i+0x32>
 80039bc:	2f00      	cmp	r7, #0
 80039be:	f000 80d5 	beq.w	8003b6c <_printf_i+0x1cc>
 80039c2:	2f58      	cmp	r7, #88	; 0x58
 80039c4:	f000 80c1 	beq.w	8003b4a <_printf_i+0x1aa>
 80039c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039d0:	e03a      	b.n	8003a48 <_printf_i+0xa8>
 80039d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039d6:	2b15      	cmp	r3, #21
 80039d8:	d8f6      	bhi.n	80039c8 <_printf_i+0x28>
 80039da:	a101      	add	r1, pc, #4	; (adr r1, 80039e0 <_printf_i+0x40>)
 80039dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039e0:	08003a39 	.word	0x08003a39
 80039e4:	08003a4d 	.word	0x08003a4d
 80039e8:	080039c9 	.word	0x080039c9
 80039ec:	080039c9 	.word	0x080039c9
 80039f0:	080039c9 	.word	0x080039c9
 80039f4:	080039c9 	.word	0x080039c9
 80039f8:	08003a4d 	.word	0x08003a4d
 80039fc:	080039c9 	.word	0x080039c9
 8003a00:	080039c9 	.word	0x080039c9
 8003a04:	080039c9 	.word	0x080039c9
 8003a08:	080039c9 	.word	0x080039c9
 8003a0c:	08003b53 	.word	0x08003b53
 8003a10:	08003a79 	.word	0x08003a79
 8003a14:	08003b0d 	.word	0x08003b0d
 8003a18:	080039c9 	.word	0x080039c9
 8003a1c:	080039c9 	.word	0x080039c9
 8003a20:	08003b75 	.word	0x08003b75
 8003a24:	080039c9 	.word	0x080039c9
 8003a28:	08003a79 	.word	0x08003a79
 8003a2c:	080039c9 	.word	0x080039c9
 8003a30:	080039c9 	.word	0x080039c9
 8003a34:	08003b15 	.word	0x08003b15
 8003a38:	682b      	ldr	r3, [r5, #0]
 8003a3a:	1d1a      	adds	r2, r3, #4
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	602a      	str	r2, [r5, #0]
 8003a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0a0      	b.n	8003b8e <_printf_i+0x1ee>
 8003a4c:	6820      	ldr	r0, [r4, #0]
 8003a4e:	682b      	ldr	r3, [r5, #0]
 8003a50:	0607      	lsls	r7, r0, #24
 8003a52:	f103 0104 	add.w	r1, r3, #4
 8003a56:	6029      	str	r1, [r5, #0]
 8003a58:	d501      	bpl.n	8003a5e <_printf_i+0xbe>
 8003a5a:	681e      	ldr	r6, [r3, #0]
 8003a5c:	e003      	b.n	8003a66 <_printf_i+0xc6>
 8003a5e:	0646      	lsls	r6, r0, #25
 8003a60:	d5fb      	bpl.n	8003a5a <_printf_i+0xba>
 8003a62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003a66:	2e00      	cmp	r6, #0
 8003a68:	da03      	bge.n	8003a72 <_printf_i+0xd2>
 8003a6a:	232d      	movs	r3, #45	; 0x2d
 8003a6c:	4276      	negs	r6, r6
 8003a6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a72:	230a      	movs	r3, #10
 8003a74:	4859      	ldr	r0, [pc, #356]	; (8003bdc <_printf_i+0x23c>)
 8003a76:	e012      	b.n	8003a9e <_printf_i+0xfe>
 8003a78:	682b      	ldr	r3, [r5, #0]
 8003a7a:	6820      	ldr	r0, [r4, #0]
 8003a7c:	1d19      	adds	r1, r3, #4
 8003a7e:	6029      	str	r1, [r5, #0]
 8003a80:	0605      	lsls	r5, r0, #24
 8003a82:	d501      	bpl.n	8003a88 <_printf_i+0xe8>
 8003a84:	681e      	ldr	r6, [r3, #0]
 8003a86:	e002      	b.n	8003a8e <_printf_i+0xee>
 8003a88:	0641      	lsls	r1, r0, #25
 8003a8a:	d5fb      	bpl.n	8003a84 <_printf_i+0xe4>
 8003a8c:	881e      	ldrh	r6, [r3, #0]
 8003a8e:	2f6f      	cmp	r7, #111	; 0x6f
 8003a90:	bf0c      	ite	eq
 8003a92:	2308      	moveq	r3, #8
 8003a94:	230a      	movne	r3, #10
 8003a96:	4851      	ldr	r0, [pc, #324]	; (8003bdc <_printf_i+0x23c>)
 8003a98:	2100      	movs	r1, #0
 8003a9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a9e:	6865      	ldr	r5, [r4, #4]
 8003aa0:	2d00      	cmp	r5, #0
 8003aa2:	bfa8      	it	ge
 8003aa4:	6821      	ldrge	r1, [r4, #0]
 8003aa6:	60a5      	str	r5, [r4, #8]
 8003aa8:	bfa4      	itt	ge
 8003aaa:	f021 0104 	bicge.w	r1, r1, #4
 8003aae:	6021      	strge	r1, [r4, #0]
 8003ab0:	b90e      	cbnz	r6, 8003ab6 <_printf_i+0x116>
 8003ab2:	2d00      	cmp	r5, #0
 8003ab4:	d04b      	beq.n	8003b4e <_printf_i+0x1ae>
 8003ab6:	4615      	mov	r5, r2
 8003ab8:	fbb6 f1f3 	udiv	r1, r6, r3
 8003abc:	fb03 6711 	mls	r7, r3, r1, r6
 8003ac0:	5dc7      	ldrb	r7, [r0, r7]
 8003ac2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ac6:	4637      	mov	r7, r6
 8003ac8:	42bb      	cmp	r3, r7
 8003aca:	460e      	mov	r6, r1
 8003acc:	d9f4      	bls.n	8003ab8 <_printf_i+0x118>
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d10b      	bne.n	8003aea <_printf_i+0x14a>
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	07de      	lsls	r6, r3, #31
 8003ad6:	d508      	bpl.n	8003aea <_printf_i+0x14a>
 8003ad8:	6923      	ldr	r3, [r4, #16]
 8003ada:	6861      	ldr	r1, [r4, #4]
 8003adc:	4299      	cmp	r1, r3
 8003ade:	bfde      	ittt	le
 8003ae0:	2330      	movle	r3, #48	; 0x30
 8003ae2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ae6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003aea:	1b52      	subs	r2, r2, r5
 8003aec:	6122      	str	r2, [r4, #16]
 8003aee:	464b      	mov	r3, r9
 8003af0:	4621      	mov	r1, r4
 8003af2:	4640      	mov	r0, r8
 8003af4:	f8cd a000 	str.w	sl, [sp]
 8003af8:	aa03      	add	r2, sp, #12
 8003afa:	f7ff fedf 	bl	80038bc <_printf_common>
 8003afe:	3001      	adds	r0, #1
 8003b00:	d14a      	bne.n	8003b98 <_printf_i+0x1f8>
 8003b02:	f04f 30ff 	mov.w	r0, #4294967295
 8003b06:	b004      	add	sp, #16
 8003b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	f043 0320 	orr.w	r3, r3, #32
 8003b12:	6023      	str	r3, [r4, #0]
 8003b14:	2778      	movs	r7, #120	; 0x78
 8003b16:	4832      	ldr	r0, [pc, #200]	; (8003be0 <_printf_i+0x240>)
 8003b18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	6829      	ldr	r1, [r5, #0]
 8003b20:	061f      	lsls	r7, r3, #24
 8003b22:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b26:	d402      	bmi.n	8003b2e <_printf_i+0x18e>
 8003b28:	065f      	lsls	r7, r3, #25
 8003b2a:	bf48      	it	mi
 8003b2c:	b2b6      	uxthmi	r6, r6
 8003b2e:	07df      	lsls	r7, r3, #31
 8003b30:	bf48      	it	mi
 8003b32:	f043 0320 	orrmi.w	r3, r3, #32
 8003b36:	6029      	str	r1, [r5, #0]
 8003b38:	bf48      	it	mi
 8003b3a:	6023      	strmi	r3, [r4, #0]
 8003b3c:	b91e      	cbnz	r6, 8003b46 <_printf_i+0x1a6>
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	f023 0320 	bic.w	r3, r3, #32
 8003b44:	6023      	str	r3, [r4, #0]
 8003b46:	2310      	movs	r3, #16
 8003b48:	e7a6      	b.n	8003a98 <_printf_i+0xf8>
 8003b4a:	4824      	ldr	r0, [pc, #144]	; (8003bdc <_printf_i+0x23c>)
 8003b4c:	e7e4      	b.n	8003b18 <_printf_i+0x178>
 8003b4e:	4615      	mov	r5, r2
 8003b50:	e7bd      	b.n	8003ace <_printf_i+0x12e>
 8003b52:	682b      	ldr	r3, [r5, #0]
 8003b54:	6826      	ldr	r6, [r4, #0]
 8003b56:	1d18      	adds	r0, r3, #4
 8003b58:	6961      	ldr	r1, [r4, #20]
 8003b5a:	6028      	str	r0, [r5, #0]
 8003b5c:	0635      	lsls	r5, r6, #24
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	d501      	bpl.n	8003b66 <_printf_i+0x1c6>
 8003b62:	6019      	str	r1, [r3, #0]
 8003b64:	e002      	b.n	8003b6c <_printf_i+0x1cc>
 8003b66:	0670      	lsls	r0, r6, #25
 8003b68:	d5fb      	bpl.n	8003b62 <_printf_i+0x1c2>
 8003b6a:	8019      	strh	r1, [r3, #0]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	4615      	mov	r5, r2
 8003b70:	6123      	str	r3, [r4, #16]
 8003b72:	e7bc      	b.n	8003aee <_printf_i+0x14e>
 8003b74:	682b      	ldr	r3, [r5, #0]
 8003b76:	2100      	movs	r1, #0
 8003b78:	1d1a      	adds	r2, r3, #4
 8003b7a:	602a      	str	r2, [r5, #0]
 8003b7c:	681d      	ldr	r5, [r3, #0]
 8003b7e:	6862      	ldr	r2, [r4, #4]
 8003b80:	4628      	mov	r0, r5
 8003b82:	f000 f859 	bl	8003c38 <memchr>
 8003b86:	b108      	cbz	r0, 8003b8c <_printf_i+0x1ec>
 8003b88:	1b40      	subs	r0, r0, r5
 8003b8a:	6060      	str	r0, [r4, #4]
 8003b8c:	6863      	ldr	r3, [r4, #4]
 8003b8e:	6123      	str	r3, [r4, #16]
 8003b90:	2300      	movs	r3, #0
 8003b92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b96:	e7aa      	b.n	8003aee <_printf_i+0x14e>
 8003b98:	462a      	mov	r2, r5
 8003b9a:	4649      	mov	r1, r9
 8003b9c:	4640      	mov	r0, r8
 8003b9e:	6923      	ldr	r3, [r4, #16]
 8003ba0:	47d0      	blx	sl
 8003ba2:	3001      	adds	r0, #1
 8003ba4:	d0ad      	beq.n	8003b02 <_printf_i+0x162>
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	079b      	lsls	r3, r3, #30
 8003baa:	d413      	bmi.n	8003bd4 <_printf_i+0x234>
 8003bac:	68e0      	ldr	r0, [r4, #12]
 8003bae:	9b03      	ldr	r3, [sp, #12]
 8003bb0:	4298      	cmp	r0, r3
 8003bb2:	bfb8      	it	lt
 8003bb4:	4618      	movlt	r0, r3
 8003bb6:	e7a6      	b.n	8003b06 <_printf_i+0x166>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	4632      	mov	r2, r6
 8003bbc:	4649      	mov	r1, r9
 8003bbe:	4640      	mov	r0, r8
 8003bc0:	47d0      	blx	sl
 8003bc2:	3001      	adds	r0, #1
 8003bc4:	d09d      	beq.n	8003b02 <_printf_i+0x162>
 8003bc6:	3501      	adds	r5, #1
 8003bc8:	68e3      	ldr	r3, [r4, #12]
 8003bca:	9903      	ldr	r1, [sp, #12]
 8003bcc:	1a5b      	subs	r3, r3, r1
 8003bce:	42ab      	cmp	r3, r5
 8003bd0:	dcf2      	bgt.n	8003bb8 <_printf_i+0x218>
 8003bd2:	e7eb      	b.n	8003bac <_printf_i+0x20c>
 8003bd4:	2500      	movs	r5, #0
 8003bd6:	f104 0619 	add.w	r6, r4, #25
 8003bda:	e7f5      	b.n	8003bc8 <_printf_i+0x228>
 8003bdc:	08003d37 	.word	0x08003d37
 8003be0:	08003d48 	.word	0x08003d48

08003be4 <memmove>:
 8003be4:	4288      	cmp	r0, r1
 8003be6:	b510      	push	{r4, lr}
 8003be8:	eb01 0402 	add.w	r4, r1, r2
 8003bec:	d902      	bls.n	8003bf4 <memmove+0x10>
 8003bee:	4284      	cmp	r4, r0
 8003bf0:	4623      	mov	r3, r4
 8003bf2:	d807      	bhi.n	8003c04 <memmove+0x20>
 8003bf4:	1e43      	subs	r3, r0, #1
 8003bf6:	42a1      	cmp	r1, r4
 8003bf8:	d008      	beq.n	8003c0c <memmove+0x28>
 8003bfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c02:	e7f8      	b.n	8003bf6 <memmove+0x12>
 8003c04:	4601      	mov	r1, r0
 8003c06:	4402      	add	r2, r0
 8003c08:	428a      	cmp	r2, r1
 8003c0a:	d100      	bne.n	8003c0e <memmove+0x2a>
 8003c0c:	bd10      	pop	{r4, pc}
 8003c0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c16:	e7f7      	b.n	8003c08 <memmove+0x24>

08003c18 <_sbrk_r>:
 8003c18:	b538      	push	{r3, r4, r5, lr}
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	4d05      	ldr	r5, [pc, #20]	; (8003c34 <_sbrk_r+0x1c>)
 8003c1e:	4604      	mov	r4, r0
 8003c20:	4608      	mov	r0, r1
 8003c22:	602b      	str	r3, [r5, #0]
 8003c24:	f7fc fd7a 	bl	800071c <_sbrk>
 8003c28:	1c43      	adds	r3, r0, #1
 8003c2a:	d102      	bne.n	8003c32 <_sbrk_r+0x1a>
 8003c2c:	682b      	ldr	r3, [r5, #0]
 8003c2e:	b103      	cbz	r3, 8003c32 <_sbrk_r+0x1a>
 8003c30:	6023      	str	r3, [r4, #0]
 8003c32:	bd38      	pop	{r3, r4, r5, pc}
 8003c34:	2000029c 	.word	0x2000029c

08003c38 <memchr>:
 8003c38:	4603      	mov	r3, r0
 8003c3a:	b510      	push	{r4, lr}
 8003c3c:	b2c9      	uxtb	r1, r1
 8003c3e:	4402      	add	r2, r0
 8003c40:	4293      	cmp	r3, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	d101      	bne.n	8003c4a <memchr+0x12>
 8003c46:	2000      	movs	r0, #0
 8003c48:	e003      	b.n	8003c52 <memchr+0x1a>
 8003c4a:	7804      	ldrb	r4, [r0, #0]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	428c      	cmp	r4, r1
 8003c50:	d1f6      	bne.n	8003c40 <memchr+0x8>
 8003c52:	bd10      	pop	{r4, pc}

08003c54 <memcpy>:
 8003c54:	440a      	add	r2, r1
 8003c56:	4291      	cmp	r1, r2
 8003c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c5c:	d100      	bne.n	8003c60 <memcpy+0xc>
 8003c5e:	4770      	bx	lr
 8003c60:	b510      	push	{r4, lr}
 8003c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c66:	4291      	cmp	r1, r2
 8003c68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c6c:	d1f9      	bne.n	8003c62 <memcpy+0xe>
 8003c6e:	bd10      	pop	{r4, pc}

08003c70 <_realloc_r>:
 8003c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c74:	4680      	mov	r8, r0
 8003c76:	4614      	mov	r4, r2
 8003c78:	460e      	mov	r6, r1
 8003c7a:	b921      	cbnz	r1, 8003c86 <_realloc_r+0x16>
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c82:	f7ff bc37 	b.w	80034f4 <_malloc_r>
 8003c86:	b92a      	cbnz	r2, 8003c94 <_realloc_r+0x24>
 8003c88:	f7ff fbcc 	bl	8003424 <_free_r>
 8003c8c:	4625      	mov	r5, r4
 8003c8e:	4628      	mov	r0, r5
 8003c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c94:	f000 f81b 	bl	8003cce <_malloc_usable_size_r>
 8003c98:	4284      	cmp	r4, r0
 8003c9a:	4607      	mov	r7, r0
 8003c9c:	d802      	bhi.n	8003ca4 <_realloc_r+0x34>
 8003c9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ca2:	d812      	bhi.n	8003cca <_realloc_r+0x5a>
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	4640      	mov	r0, r8
 8003ca8:	f7ff fc24 	bl	80034f4 <_malloc_r>
 8003cac:	4605      	mov	r5, r0
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	d0ed      	beq.n	8003c8e <_realloc_r+0x1e>
 8003cb2:	42bc      	cmp	r4, r7
 8003cb4:	4622      	mov	r2, r4
 8003cb6:	4631      	mov	r1, r6
 8003cb8:	bf28      	it	cs
 8003cba:	463a      	movcs	r2, r7
 8003cbc:	f7ff ffca 	bl	8003c54 <memcpy>
 8003cc0:	4631      	mov	r1, r6
 8003cc2:	4640      	mov	r0, r8
 8003cc4:	f7ff fbae 	bl	8003424 <_free_r>
 8003cc8:	e7e1      	b.n	8003c8e <_realloc_r+0x1e>
 8003cca:	4635      	mov	r5, r6
 8003ccc:	e7df      	b.n	8003c8e <_realloc_r+0x1e>

08003cce <_malloc_usable_size_r>:
 8003cce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cd2:	1f18      	subs	r0, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bfbc      	itt	lt
 8003cd8:	580b      	ldrlt	r3, [r1, r0]
 8003cda:	18c0      	addlt	r0, r0, r3
 8003cdc:	4770      	bx	lr
	...

08003ce0 <_init>:
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	bf00      	nop
 8003ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce6:	bc08      	pop	{r3}
 8003ce8:	469e      	mov	lr, r3
 8003cea:	4770      	bx	lr

08003cec <_fini>:
 8003cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cee:	bf00      	nop
 8003cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf2:	bc08      	pop	{r3}
 8003cf4:	469e      	mov	lr, r3
 8003cf6:	4770      	bx	lr
