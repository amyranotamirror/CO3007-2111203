
FLOW_CONTROL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003f34  08003f34  00013f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fd4  08003fd4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003fd4  08003fd4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fd4  08003fd4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fd4  08003fd4  00013fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fd8  08003fd8  00013fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000005c  08004038  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08004038  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed68  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002669  00000000  00000000  0002ee30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e60  00000000  00000000  000314a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b2e  00000000  00000000  00032300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002a61  00000000  00000000  00032e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e3c  00000000  00000000  0003588f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d53f  00000000  00000000  000476cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000400c  00000000  00000000  000d4c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000d8c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f1c 	.word	0x08003f1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003f1c 	.word	0x08003f1c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <fsmCommandParser>:
uint8_t uartFlag = FLAG_NONE;

enum PARSER_STATE PARSER_FSM = PARSER_IDLE;
enum UART_STATE UART_FSM = UART_WAIT_FOR_COMMAND;

void fsmCommandParser(){
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	if(rxFlag  == 1){
 8000164:	4b0a      	ldr	r3, [pc, #40]	; (8000190 <fsmCommandParser+0x30>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	2b01      	cmp	r3, #1
 800016a:	d10f      	bne.n	800018c <fsmCommandParser+0x2c>
		switch(PARSER_FSM){
 800016c:	4b09      	ldr	r3, [pc, #36]	; (8000194 <fsmCommandParser+0x34>)
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b00      	cmp	r3, #0
 8000172:	d002      	beq.n	800017a <fsmCommandParser+0x1a>
 8000174:	2b01      	cmp	r3, #1
 8000176:	d003      	beq.n	8000180 <fsmCommandParser+0x20>
 8000178:	e005      	b.n	8000186 <fsmCommandParser+0x26>
		case PARSER_IDLE:
			parserIdle();
 800017a:	f000 f80d 	bl	8000198 <parserIdle>
			break;
 800017e:	e002      	b.n	8000186 <fsmCommandParser+0x26>
		case PARSER_READING:
			parserReading();
 8000180:	f000 f834 	bl	80001ec <parserReading>
			break;
 8000184:	bf00      	nop
		}
		rxFlag = 0;
 8000186:	4b02      	ldr	r3, [pc, #8]	; (8000190 <fsmCommandParser+0x30>)
 8000188:	2200      	movs	r2, #0
 800018a:	701a      	strb	r2, [r3, #0]
	}
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	20000091 	.word	0x20000091
 8000194:	20000082 	.word	0x20000082

08000198 <parserIdle>:
		uartWaitForAck();
		break;
	}
}

void parserIdle(){
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	// Clear buffer
	parserIndex = 0;
 800019c:	4b0f      	ldr	r3, [pc, #60]	; (80001dc <parserIdle+0x44>)
 800019e:	2200      	movs	r2, #0
 80001a0:	701a      	strb	r2, [r3, #0]
	parserBuffer[parserIndex] = '\0';
 80001a2:	4b0e      	ldr	r3, [pc, #56]	; (80001dc <parserIdle+0x44>)
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	461a      	mov	r2, r3
 80001a8:	4b0d      	ldr	r3, [pc, #52]	; (80001e0 <parserIdle+0x48>)
 80001aa:	2100      	movs	r1, #0
 80001ac:	5499      	strb	r1, [r3, r2]
	// Start reading if a command begin
	if(parserByte == '!'){
 80001ae:	4b0d      	ldr	r3, [pc, #52]	; (80001e4 <parserIdle+0x4c>)
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	2b21      	cmp	r3, #33	; 0x21
 80001b4:	d10d      	bne.n	80001d2 <parserIdle+0x3a>
		parserBuffer[parserIndex++] = parserByte;
 80001b6:	4b09      	ldr	r3, [pc, #36]	; (80001dc <parserIdle+0x44>)
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	1c5a      	adds	r2, r3, #1
 80001bc:	b2d1      	uxtb	r1, r2
 80001be:	4a07      	ldr	r2, [pc, #28]	; (80001dc <parserIdle+0x44>)
 80001c0:	7011      	strb	r1, [r2, #0]
 80001c2:	461a      	mov	r2, r3
 80001c4:	4b07      	ldr	r3, [pc, #28]	; (80001e4 <parserIdle+0x4c>)
 80001c6:	7819      	ldrb	r1, [r3, #0]
 80001c8:	4b05      	ldr	r3, [pc, #20]	; (80001e0 <parserIdle+0x48>)
 80001ca:	5499      	strb	r1, [r3, r2]
		PARSER_FSM = PARSER_READING;
 80001cc:	4b06      	ldr	r3, [pc, #24]	; (80001e8 <parserIdle+0x50>)
 80001ce:	2201      	movs	r2, #1
 80001d0:	701a      	strb	r2, [r3, #0]
	}
}
 80001d2:	bf00      	nop
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	20000080 	.word	0x20000080
 80001e0:	20000078 	.word	0x20000078
 80001e4:	20000092 	.word	0x20000092
 80001e8:	20000082 	.word	0x20000082

080001ec <parserReading>:

void parserReading(){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	if(parserByte == '!'){// Read as new command
 80001f0:	4b2e      	ldr	r3, [pc, #184]	; (80002ac <parserReading+0xc0>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	2b21      	cmp	r3, #33	; 0x21
 80001f6:	d10e      	bne.n	8000216 <parserReading+0x2a>
		parserIndex = 0;
 80001f8:	4b2d      	ldr	r3, [pc, #180]	; (80002b0 <parserReading+0xc4>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	701a      	strb	r2, [r3, #0]
		parserBuffer[parserIndex++] = parserByte;
 80001fe:	4b2c      	ldr	r3, [pc, #176]	; (80002b0 <parserReading+0xc4>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	1c5a      	adds	r2, r3, #1
 8000204:	b2d1      	uxtb	r1, r2
 8000206:	4a2a      	ldr	r2, [pc, #168]	; (80002b0 <parserReading+0xc4>)
 8000208:	7011      	strb	r1, [r2, #0]
 800020a:	461a      	mov	r2, r3
 800020c:	4b27      	ldr	r3, [pc, #156]	; (80002ac <parserReading+0xc0>)
 800020e:	7819      	ldrb	r1, [r3, #0]
 8000210:	4b28      	ldr	r3, [pc, #160]	; (80002b4 <parserReading+0xc8>)
 8000212:	5499      	strb	r1, [r3, r2]
 8000214:	e040      	b.n	8000298 <parserReading+0xac>
	}
	else if(parserByte == '\b'){//Delete character
 8000216:	4b25      	ldr	r3, [pc, #148]	; (80002ac <parserReading+0xc0>)
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	2b08      	cmp	r3, #8
 800021c:	d111      	bne.n	8000242 <parserReading+0x56>
		parserBuffer[parserIndex--] = '\0';
 800021e:	4b24      	ldr	r3, [pc, #144]	; (80002b0 <parserReading+0xc4>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	1e5a      	subs	r2, r3, #1
 8000224:	b2d1      	uxtb	r1, r2
 8000226:	4a22      	ldr	r2, [pc, #136]	; (80002b0 <parserReading+0xc4>)
 8000228:	7011      	strb	r1, [r2, #0]
 800022a:	461a      	mov	r2, r3
 800022c:	4b21      	ldr	r3, [pc, #132]	; (80002b4 <parserReading+0xc8>)
 800022e:	2100      	movs	r1, #0
 8000230:	5499      	strb	r1, [r3, r2]
		if(parserIndex <= 0){
 8000232:	4b1f      	ldr	r3, [pc, #124]	; (80002b0 <parserReading+0xc4>)
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d12e      	bne.n	8000298 <parserReading+0xac>
			PARSER_FSM = PARSER_IDLE;
 800023a:	4b1f      	ldr	r3, [pc, #124]	; (80002b8 <parserReading+0xcc>)
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]
 8000240:	e02a      	b.n	8000298 <parserReading+0xac>
		}
	}
	else if(parserByte == '\r'){// Process input
 8000242:	4b1a      	ldr	r3, [pc, #104]	; (80002ac <parserReading+0xc0>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2b0d      	cmp	r3, #13
 8000248:	d11b      	bne.n	8000282 <parserReading+0x96>
		if(strcmp(parserBuffer, "!OK#") == MATCHED){
 800024a:	491c      	ldr	r1, [pc, #112]	; (80002bc <parserReading+0xd0>)
 800024c:	4819      	ldr	r0, [pc, #100]	; (80002b4 <parserReading+0xc8>)
 800024e:	f7ff ff7d 	bl	800014c <strcmp>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d104      	bne.n	8000262 <parserReading+0x76>
			uartFlag = FLAG_EXIT_REQUEST_ADC;
 8000258:	4b19      	ldr	r3, [pc, #100]	; (80002c0 <parserReading+0xd4>)
 800025a:	2202      	movs	r2, #2
 800025c:	701a      	strb	r2, [r3, #0]
			testSendRequest();
 800025e:	f000 f8a9 	bl	80003b4 <testSendRequest>
		}
		if(strcmp(parserBuffer, "!RST#") == MATCHED){
 8000262:	4918      	ldr	r1, [pc, #96]	; (80002c4 <parserReading+0xd8>)
 8000264:	4813      	ldr	r0, [pc, #76]	; (80002b4 <parserReading+0xc8>)
 8000266:	f7ff ff71 	bl	800014c <strcmp>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d104      	bne.n	800027a <parserReading+0x8e>
			uartFlag = FLAG_REQUEST_ADC;
 8000270:	4b13      	ldr	r3, [pc, #76]	; (80002c0 <parserReading+0xd4>)
 8000272:	2201      	movs	r2, #1
 8000274:	701a      	strb	r2, [r3, #0]
			testSendRequest();
 8000276:	f000 f89d 	bl	80003b4 <testSendRequest>
		}
		PARSER_FSM = PARSER_IDLE;
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <parserReading+0xcc>)
 800027c:	2200      	movs	r2, #0
 800027e:	701a      	strb	r2, [r3, #0]
 8000280:	e00a      	b.n	8000298 <parserReading+0xac>
	}
	else{// Store data
		parserBuffer[parserIndex++] = parserByte;
 8000282:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <parserReading+0xc4>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	1c5a      	adds	r2, r3, #1
 8000288:	b2d1      	uxtb	r1, r2
 800028a:	4a09      	ldr	r2, [pc, #36]	; (80002b0 <parserReading+0xc4>)
 800028c:	7011      	strb	r1, [r2, #0]
 800028e:	461a      	mov	r2, r3
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <parserReading+0xc0>)
 8000292:	7819      	ldrb	r1, [r3, #0]
 8000294:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <parserReading+0xc8>)
 8000296:	5499      	strb	r1, [r3, r2]
	}

	if(parserIndex >= PARSER_BUFFER_SIZE){
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <parserReading+0xc4>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	2b07      	cmp	r3, #7
 800029e:	d902      	bls.n	80002a6 <parserReading+0xba>
		PARSER_FSM = PARSER_IDLE;
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <parserReading+0xcc>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	701a      	strb	r2, [r3, #0]
	}
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000092 	.word	0x20000092
 80002b0:	20000080 	.word	0x20000080
 80002b4:	20000078 	.word	0x20000078
 80002b8:	20000082 	.word	0x20000082
 80002bc:	08003f34 	.word	0x08003f34
 80002c0:	20000081 	.word	0x20000081
 80002c4:	08003f3c 	.word	0x08003f3c

080002c8 <HAL_TIM_PeriodElapsedCallback>:
uint32_t resendCounter = 0;
uint8_t timeoutFlag = TIMER_IDLE;
uint32_t systemTickCounter = 0;
uint8_t systemTickFlag = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance){
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	4b18      	ldr	r3, [pc, #96]	; (8000338 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d129      	bne.n	8000330 <HAL_TIM_PeriodElapsedCallback+0x68>
		if(timeoutFlag == TIMER_IDLE){
 80002dc:	4b17      	ldr	r3, [pc, #92]	; (800033c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d102      	bne.n	80002ea <HAL_TIM_PeriodElapsedCallback+0x22>
			timerReset();
 80002e4:	f000 f832 	bl	800034c <timerReset>
 80002e8:	e012      	b.n	8000310 <HAL_TIM_PeriodElapsedCallback+0x48>
		} else if(timeoutFlag == TIMER_COUNTING){
 80002ea:	4b14      	ldr	r3, [pc, #80]	; (800033c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d10e      	bne.n	8000310 <HAL_TIM_PeriodElapsedCallback+0x48>
			resendCounter++;
 80002f2:	4b13      	ldr	r3, [pc, #76]	; (8000340 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	3301      	adds	r3, #1
 80002f8:	4a11      	ldr	r2, [pc, #68]	; (8000340 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80002fa:	6013      	str	r3, [r2, #0]
			if(resendCounter >= RESEND_TIME_OUT_DURATION){
 80002fc:	4b10      	ldr	r3, [pc, #64]	; (8000340 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b63      	cmp	r3, #99	; 0x63
 8000302:	d905      	bls.n	8000310 <HAL_TIM_PeriodElapsedCallback+0x48>
				timeoutFlag = TIMER_EXCEED;
 8000304:	4b0d      	ldr	r3, [pc, #52]	; (800033c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000306:	2202      	movs	r2, #2
 8000308:	701a      	strb	r2, [r3, #0]
				resendCounter = 0;
 800030a:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
			}
		}
		if(systemTickCounter >= TICK_DURATION){
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b63      	cmp	r3, #99	; 0x63
 8000316:	d906      	bls.n	8000326 <HAL_TIM_PeriodElapsedCallback+0x5e>
			systemTickFlag = 1;
 8000318:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800031a:	2201      	movs	r2, #1
 800031c:	701a      	strb	r2, [r3, #0]
			systemTickCounter = 0;
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
		} else{
			systemTickCounter++;
		}
	}
}
 8000324:	e004      	b.n	8000330 <HAL_TIM_PeriodElapsedCallback+0x68>
			systemTickCounter++;
 8000326:	4b07      	ldr	r3, [pc, #28]	; (8000344 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	3301      	adds	r3, #1
 800032c:	4a05      	ldr	r2, [pc, #20]	; (8000344 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800032e:	6013      	str	r3, [r2, #0]
}
 8000330:	bf00      	nop
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	200000c4 	.word	0x200000c4
 800033c:	20000088 	.word	0x20000088
 8000340:	20000084 	.word	0x20000084
 8000344:	2000008c 	.word	0x2000008c
 8000348:	20000090 	.word	0x20000090

0800034c <timerReset>:

void timerReset(){
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
	resendCounter = 0;
 8000350:	4b03      	ldr	r3, [pc, #12]	; (8000360 <timerReset+0x14>)
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	20000084 	.word	0x20000084

08000364 <HAL_UART_RxCpltCallback>:

#include "f_uart.h"
uint8_t rxFlag = 0;
uint8_t parserByte = 0;

void  HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a0c      	ldr	r2, [pc, #48]	; (80003a4 <HAL_UART_RxCpltCallback+0x40>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d111      	bne.n	800039a <HAL_UART_RxCpltCallback+0x36>
		 HAL_UART_Receive_IT(&huart2, &parserByte, 1);\
 8000376:	2201      	movs	r2, #1
 8000378:	490b      	ldr	r1, [pc, #44]	; (80003a8 <HAL_UART_RxCpltCallback+0x44>)
 800037a:	480c      	ldr	r0, [pc, #48]	; (80003ac <HAL_UART_RxCpltCallback+0x48>)
 800037c:	f002 fb77 	bl	8002a6e <HAL_UART_Receive_IT>
		 uint8_t temp = parserByte;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <HAL_UART_RxCpltCallback+0x44>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	73fb      	strb	r3, [r7, #15]
		 HAL_UART_Transmit(huart, &temp, sizeof(temp), 10);
 8000386:	f107 010f 	add.w	r1, r7, #15
 800038a:	230a      	movs	r3, #10
 800038c:	2201      	movs	r2, #1
 800038e:	6878      	ldr	r0, [r7, #4]
 8000390:	f002 faea 	bl	8002968 <HAL_UART_Transmit>
		 rxFlag = 1;
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <HAL_UART_RxCpltCallback+0x4c>)
 8000396:	2201      	movs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
	}
}
 800039a:	bf00      	nop
 800039c:	3710      	adds	r7, #16
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40004400 	.word	0x40004400
 80003a8:	20000092 	.word	0x20000092
 80003ac:	2000010c 	.word	0x2000010c
 80003b0:	20000091 	.word	0x20000091

080003b4 <testSendRequest>:
void uartSendReponse(void){
	char str[16];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!ADC:%04d#\r\n", ADC_value), UART_TIMEOUT);
}

void testSendRequest(void){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af00      	add	r7, sp, #0
	char str[32];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Request\r\n"), UART_TIMEOUT);
 80003ba:	463b      	mov	r3, r7
 80003bc:	4907      	ldr	r1, [pc, #28]	; (80003dc <testSendRequest+0x28>)
 80003be:	4618      	mov	r0, r3
 80003c0:	f003 f8fa 	bl	80035b8 <siprintf>
 80003c4:	4603      	mov	r3, r0
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	4639      	mov	r1, r7
 80003ca:	2364      	movs	r3, #100	; 0x64
 80003cc:	4804      	ldr	r0, [pc, #16]	; (80003e0 <testSendRequest+0x2c>)
 80003ce:	f002 facb 	bl	8002968 <HAL_UART_Transmit>
}
 80003d2:	bf00      	nop
 80003d4:	3720      	adds	r7, #32
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	08003f54 	.word	0x08003f54
 80003e0:	2000010c 	.word	0x2000010c

080003e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e8:	f000 fb04 	bl	80009f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ec:	f000 f832 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f0:	f000 f934 	bl	800065c <MX_GPIO_Init>
  MX_ADC1_Init();
 80003f4:	f000 f87e 	bl	80004f4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80003f8:	f000 f906 	bl	8000608 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80003fc:	f000 f8b8 	bl	8000570 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000400:	480e      	ldr	r0, [pc, #56]	; (800043c <main+0x58>)
 8000402:	f001 fec9 	bl	8002198 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2, &parserByte, 1);
 8000406:	2201      	movs	r2, #1
 8000408:	490d      	ldr	r1, [pc, #52]	; (8000440 <main+0x5c>)
 800040a:	480e      	ldr	r0, [pc, #56]	; (8000444 <main+0x60>)
 800040c:	f002 fb2f 	bl	8002a6e <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(rxFlag == 1){
 8000410:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <main+0x64>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b01      	cmp	r3, #1
 8000416:	d104      	bne.n	8000422 <main+0x3e>
		fsmCommandParser();
 8000418:	f7ff fea2 	bl	8000160 <fsmCommandParser>
		rxFlag = 0;
 800041c:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <main+0x64>)
 800041e:	2200      	movs	r2, #0
 8000420:	701a      	strb	r2, [r3, #0]
	}
	if(systemTickFlag == 1){
 8000422:	4b0a      	ldr	r3, [pc, #40]	; (800044c <main+0x68>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b01      	cmp	r3, #1
 8000428:	d1f2      	bne.n	8000410 <main+0x2c>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800042a:	2120      	movs	r1, #32
 800042c:	4808      	ldr	r0, [pc, #32]	; (8000450 <main+0x6c>)
 800042e:	f001 f983 	bl	8001738 <HAL_GPIO_TogglePin>
		systemTickFlag = 0;
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <main+0x68>)
 8000434:	2200      	movs	r2, #0
 8000436:	701a      	strb	r2, [r3, #0]
	if(rxFlag == 1){
 8000438:	e7ea      	b.n	8000410 <main+0x2c>
 800043a:	bf00      	nop
 800043c:	200000c4 	.word	0x200000c4
 8000440:	20000092 	.word	0x20000092
 8000444:	2000010c 	.word	0x2000010c
 8000448:	20000091 	.word	0x20000091
 800044c:	20000090 	.word	0x20000090
 8000450:	40010800 	.word	0x40010800

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b094      	sub	sp, #80	; 0x50
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800045e:	2228      	movs	r2, #40	; 0x28
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f003 f8c8 	bl	80035f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
 8000476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000484:	2302      	movs	r3, #2
 8000486:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000488:	2301      	movs	r3, #1
 800048a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048c:	2310      	movs	r3, #16
 800048e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000490:	2300      	movs	r3, #0
 8000492:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000494:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000498:	4618      	mov	r0, r3
 800049a:	f001 f967 	bl	800176c <HAL_RCC_OscConfig>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80004a4:	f000 f90c 	bl	80006c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a8:	230f      	movs	r3, #15
 80004aa:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f001 fbd4 	bl	8001c70 <HAL_RCC_ClockConfig>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80004ce:	f000 f8f7 	bl	80006c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004d2:	2302      	movs	r3, #2
 80004d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80004d6:	2300      	movs	r3, #0
 80004d8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4618      	mov	r0, r3
 80004de:	f001 fd55 	bl	8001f8c <HAL_RCCEx_PeriphCLKConfig>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80004e8:	f000 f8ea 	bl	80006c0 <Error_Handler>
  }
}
 80004ec:	bf00      	nop
 80004ee:	3750      	adds	r7, #80	; 0x50
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000504:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MX_ADC1_Init+0x74>)
 8000506:	4a19      	ldr	r2, [pc, #100]	; (800056c <MX_ADC1_Init+0x78>)
 8000508:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800050a:	4b17      	ldr	r3, [pc, #92]	; (8000568 <MX_ADC1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <MX_ADC1_Init+0x74>)
 8000512:	2201      	movs	r2, #1
 8000514:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000516:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_ADC1_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <MX_ADC1_Init+0x74>)
 800051e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000522:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000524:	4b10      	ldr	r3, [pc, #64]	; (8000568 <MX_ADC1_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_ADC1_Init+0x74>)
 800052c:	2201      	movs	r2, #1
 800052e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000530:	480d      	ldr	r0, [pc, #52]	; (8000568 <MX_ADC1_Init+0x74>)
 8000532:	f000 fac1 	bl	8000ab8 <HAL_ADC_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800053c:	f000 f8c0 	bl	80006c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000544:	2301      	movs	r3, #1
 8000546:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	4619      	mov	r1, r3
 8000550:	4805      	ldr	r0, [pc, #20]	; (8000568 <MX_ADC1_Init+0x74>)
 8000552:	f000 fc5b 	bl	8000e0c <HAL_ADC_ConfigChannel>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800055c:	f000 f8b0 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000560:	bf00      	nop
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000094 	.word	0x20000094
 800056c:	40012400 	.word	0x40012400

08000570 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000576:	f107 0308 	add.w	r3, r7, #8
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800058c:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <MX_TIM2_Init+0x94>)
 800058e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000592:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <MX_TIM2_Init+0x94>)
 8000596:	2201      	movs	r2, #1
 8000598:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <MX_TIM2_Init+0x94>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <MX_TIM2_Init+0x94>)
 80005a2:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80005a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <MX_TIM2_Init+0x94>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ae:	4b15      	ldr	r3, [pc, #84]	; (8000604 <MX_TIM2_Init+0x94>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005b4:	4813      	ldr	r0, [pc, #76]	; (8000604 <MX_TIM2_Init+0x94>)
 80005b6:	f001 fd9f 	bl	80020f8 <HAL_TIM_Base_Init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80005c0:	f000 f87e 	bl	80006c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005ca:	f107 0308 	add.w	r3, r7, #8
 80005ce:	4619      	mov	r1, r3
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <MX_TIM2_Init+0x94>)
 80005d2:	f001 ff35 	bl	8002440 <HAL_TIM_ConfigClockSource>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80005dc:	f000 f870 	bl	80006c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e0:	2300      	movs	r3, #0
 80005e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005e8:	463b      	mov	r3, r7
 80005ea:	4619      	mov	r1, r3
 80005ec:	4805      	ldr	r0, [pc, #20]	; (8000604 <MX_TIM2_Init+0x94>)
 80005ee:	f002 f901 	bl	80027f4 <HAL_TIMEx_MasterConfigSynchronization>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80005f8:	f000 f862 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200000c4 	.word	0x200000c4

08000608 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000610:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 8000614:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000618:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 800062e:	220c      	movs	r2, #12
 8000630:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 8000640:	f002 f942 	bl	80028c8 <HAL_UART_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800064a:	f000 f839 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000010c 	.word	0x2000010c
 8000658:	40004400 	.word	0x40004400

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_GPIO_Init+0x5c>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a10      	ldr	r2, [pc, #64]	; (80006b8 <MX_GPIO_Init+0x5c>)
 8000676:	f043 0304 	orr.w	r3, r3, #4
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_GPIO_Init+0x5c>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0304 	and.w	r3, r3, #4
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2120      	movs	r1, #32
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <MX_GPIO_Init+0x60>)
 800068e:	f001 f83b 	bl	8001708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000692:	2320      	movs	r3, #32
 8000694:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800069a:	2301      	movs	r3, #1
 800069c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2302      	movs	r3, #2
 80006a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 0308 	add.w	r3, r7, #8
 80006a6:	4619      	mov	r1, r3
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_GPIO_Init+0x60>)
 80006aa:	f000 feb1 	bl	8001410 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ae:	bf00      	nop
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010800 	.word	0x40010800

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <Error_Handler+0x8>
	...

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_MspInit+0x5c>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	4a14      	ldr	r2, [pc, #80]	; (8000728 <HAL_MspInit+0x5c>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6193      	str	r3, [r2, #24]
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_MspInit+0x5c>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_MspInit+0x5c>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <HAL_MspInit+0x5c>)
 80006f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f4:	61d3      	str	r3, [r2, #28]
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <HAL_MspInit+0x5c>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <HAL_MspInit+0x60>)
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <HAL_MspInit+0x60>)
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071e:	bf00      	nop
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	40021000 	.word	0x40021000
 800072c:	40010000 	.word	0x40010000

08000730 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <HAL_ADC_MspInit+0x7c>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d129      	bne.n	80007a4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000750:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <HAL_ADC_MspInit+0x80>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a16      	ldr	r2, [pc, #88]	; (80007b0 <HAL_ADC_MspInit+0x80>)
 8000756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <HAL_ADC_MspInit+0x80>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <HAL_ADC_MspInit+0x80>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a10      	ldr	r2, [pc, #64]	; (80007b0 <HAL_ADC_MspInit+0x80>)
 800076e:	f043 0304 	orr.w	r3, r3, #4
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <HAL_ADC_MspInit+0x80>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000780:	2301      	movs	r3, #1
 8000782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000784:	2303      	movs	r3, #3
 8000786:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	4619      	mov	r1, r3
 800078e:	4809      	ldr	r0, [pc, #36]	; (80007b4 <HAL_ADC_MspInit+0x84>)
 8000790:	f000 fe3e 	bl	8001410 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	2100      	movs	r1, #0
 8000798:	2012      	movs	r0, #18
 800079a:	f000 fd50 	bl	800123e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800079e:	2012      	movs	r0, #18
 80007a0:	f000 fd69 	bl	8001276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007a4:	bf00      	nop
 80007a6:	3720      	adds	r7, #32
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40012400 	.word	0x40012400
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40010800 	.word	0x40010800

080007b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007c8:	d113      	bne.n	80007f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_TIM_Base_MspInit+0x44>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <HAL_TIM_Base_MspInit+0x44>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	61d3      	str	r3, [r2, #28]
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_TIM_Base_MspInit+0x44>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	201c      	movs	r0, #28
 80007e8:	f000 fd29 	bl	800123e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007ec:	201c      	movs	r0, #28
 80007ee:	f000 fd42 	bl	8001276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <HAL_UART_MspInit+0x98>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d137      	bne.n	8000890 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <HAL_UART_MspInit+0x9c>)
 8000822:	69db      	ldr	r3, [r3, #28]
 8000824:	4a1d      	ldr	r2, [pc, #116]	; (800089c <HAL_UART_MspInit+0x9c>)
 8000826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082a:	61d3      	str	r3, [r2, #28]
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <HAL_UART_MspInit+0x9c>)
 800082e:	69db      	ldr	r3, [r3, #28]
 8000830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <HAL_UART_MspInit+0x9c>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a17      	ldr	r2, [pc, #92]	; (800089c <HAL_UART_MspInit+0x9c>)
 800083e:	f043 0304 	orr.w	r3, r3, #4
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <HAL_UART_MspInit+0x9c>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000850:	2304      	movs	r3, #4
 8000852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4619      	mov	r1, r3
 8000862:	480f      	ldr	r0, [pc, #60]	; (80008a0 <HAL_UART_MspInit+0xa0>)
 8000864:	f000 fdd4 	bl	8001410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000868:	2308      	movs	r3, #8
 800086a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	4619      	mov	r1, r3
 800087a:	4809      	ldr	r0, [pc, #36]	; (80008a0 <HAL_UART_MspInit+0xa0>)
 800087c:	f000 fdc8 	bl	8001410 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2100      	movs	r1, #0
 8000884:	2026      	movs	r0, #38	; 0x26
 8000886:	f000 fcda 	bl	800123e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800088a:	2026      	movs	r0, #38	; 0x26
 800088c:	f000 fcf3 	bl	8001276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000890:	bf00      	nop
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40004400 	.word	0x40004400
 800089c:	40021000 	.word	0x40021000
 80008a0:	40010800 	.word	0x40010800

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler+0x4>

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MemManage_Handler+0x4>

080008b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr

080008e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ea:	f000 f8c9 	bl	8000a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <ADC1_2_IRQHandler+0x10>)
 80008fa:	f000 f9b5 	bl	8000c68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000094 	.word	0x20000094

08000908 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <TIM2_IRQHandler+0x10>)
 800090e:	f001 fc8f 	bl	8002230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000c4 	.word	0x200000c4

0800091c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <USART2_IRQHandler+0x10>)
 8000922:	f002 f8c9 	bl	8002ab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000010c 	.word	0x2000010c

08000930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000938:	4a14      	ldr	r2, [pc, #80]	; (800098c <_sbrk+0x5c>)
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <_sbrk+0x60>)
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <_sbrk+0x64>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <_sbrk+0x64>)
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <_sbrk+0x68>)
 8000950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <_sbrk+0x64>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	429a      	cmp	r2, r3
 800095e:	d207      	bcs.n	8000970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000960:	f002 fe52 	bl	8003608 <__errno>
 8000964:	4603      	mov	r3, r0
 8000966:	220c      	movs	r2, #12
 8000968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
 800096e:	e009      	b.n	8000984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <_sbrk+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <_sbrk+0x64>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <_sbrk+0x64>)
 8000980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20002800 	.word	0x20002800
 8000990:	00000400 	.word	0x00000400
 8000994:	20000154 	.word	0x20000154
 8000998:	200002a8 	.word	0x200002a8

0800099c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009a8:	f7ff fff8 	bl	800099c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ac:	480b      	ldr	r0, [pc, #44]	; (80009dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009ae:	490c      	ldr	r1, [pc, #48]	; (80009e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009b0:	4a0c      	ldr	r2, [pc, #48]	; (80009e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a09      	ldr	r2, [pc, #36]	; (80009e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009c4:	4c09      	ldr	r4, [pc, #36]	; (80009ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009d2:	f002 fe1f 	bl	8003614 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009d6:	f7ff fd05 	bl	80003e4 <main>
  bx lr
 80009da:	4770      	bx	lr
  ldr r0, =_sdata
 80009dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80009e4:	08003fdc 	.word	0x08003fdc
  ldr r2, =_sbss
 80009e8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80009ec:	200002a4 	.word	0x200002a4

080009f0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <CAN1_RX1_IRQHandler>
	...

080009f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_Init+0x28>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_Init+0x28>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f000 fc0f 	bl	8001228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0a:	200f      	movs	r0, #15
 8000a0c:	f000 f808 	bl	8000a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a10:	f7ff fe5c 	bl	80006cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40022000 	.word	0x40022000

08000a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_InitTick+0x54>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_InitTick+0x58>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 fc27 	bl	8001292 <HAL_SYSTICK_Config>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e00e      	b.n	8000a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d80a      	bhi.n	8000a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	f000 fbef 	bl	800123e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <HAL_InitTick+0x5c>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e000      	b.n	8000a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	20000004 	.word	0x20000004

08000a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_IncTick+0x1c>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a03      	ldr	r2, [pc, #12]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000158 	.word	0x20000158

08000aa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b02      	ldr	r3, [pc, #8]	; (8000ab4 <HAL_GetTick+0x10>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	20000158 	.word	0x20000158

08000ab8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d101      	bne.n	8000ada <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e0be      	b.n	8000c58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d109      	bne.n	8000afc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2200      	movs	r2, #0
 8000aec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff fe1a 	bl	8000730 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f000 fa7d 	bl	8000ffc <ADC_ConversionStop_Disable>
 8000b02:	4603      	mov	r3, r0
 8000b04:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b0a:	f003 0310 	and.w	r3, r3, #16
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f040 8099 	bne.w	8000c46 <HAL_ADC_Init+0x18e>
 8000b14:	7dfb      	ldrb	r3, [r7, #23]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f040 8095 	bne.w	8000c46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b24:	f023 0302 	bic.w	r3, r3, #2
 8000b28:	f043 0202 	orr.w	r2, r3, #2
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7b1b      	ldrb	r3, [r3, #12]
 8000b3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b50:	d003      	beq.n	8000b5a <HAL_ADC_Init+0xa2>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d102      	bne.n	8000b60 <HAL_ADC_Init+0xa8>
 8000b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b5e:	e000      	b.n	8000b62 <HAL_ADC_Init+0xaa>
 8000b60:	2300      	movs	r3, #0
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	7d1b      	ldrb	r3, [r3, #20]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d119      	bne.n	8000ba4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	7b1b      	ldrb	r3, [r3, #12]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d109      	bne.n	8000b8c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	035a      	lsls	r2, r3, #13
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	e00b      	b.n	8000ba4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b90:	f043 0220 	orr.w	r2, r3, #32
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9c:	f043 0201 	orr.w	r2, r3, #1
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	689a      	ldr	r2, [r3, #8]
 8000bbe:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <HAL_ADC_Init+0x1a8>)
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	6812      	ldr	r2, [r2, #0]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	430b      	orrs	r3, r1
 8000bca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bd4:	d003      	beq.n	8000bde <HAL_ADC_Init+0x126>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d104      	bne.n	8000be8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	691b      	ldr	r3, [r3, #16]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	051b      	lsls	r3, r3, #20
 8000be6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_ADC_Init+0x1ac>)
 8000c04:	4013      	ands	r3, r2
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d10b      	bne.n	8000c24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c16:	f023 0303 	bic.w	r3, r3, #3
 8000c1a:	f043 0201 	orr.w	r2, r3, #1
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c22:	e018      	b.n	8000c56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c28:	f023 0312 	bic.w	r3, r3, #18
 8000c2c:	f043 0210 	orr.w	r2, r3, #16
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c38:	f043 0201 	orr.w	r2, r3, #1
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c44:	e007      	b.n	8000c56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4a:	f043 0210 	orr.w	r2, r3, #16
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	ffe1f7fd 	.word	0xffe1f7fd
 8000c64:	ff1f0efe 	.word	0xff1f0efe

08000c68 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	f003 0320 	and.w	r3, r3, #32
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d03e      	beq.n	8000d08 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d039      	beq.n	8000d08 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c98:	f003 0310 	and.w	r3, r3, #16
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d105      	bne.n	8000cac <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000cb6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000cba:	d11d      	bne.n	8000cf8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d119      	bne.n	8000cf8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f022 0220 	bic.w	r2, r2, #32
 8000cd2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d105      	bne.n	8000cf8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf0:	f043 0201 	orr.w	r2, r3, #1
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 f874 	bl	8000de6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f06f 0212 	mvn.w	r2, #18
 8000d06:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d04d      	beq.n	8000dae <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d048      	beq.n	8000dae <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d20:	f003 0310 	and.w	r3, r3, #16
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d105      	bne.n	8000d34 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000d3e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000d42:	d012      	beq.n	8000d6a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d125      	bne.n	8000d9e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000d5c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d60:	d11d      	bne.n	8000d9e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d119      	bne.n	8000d9e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d78:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d105      	bne.n	8000d9e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d96:	f043 0201 	orr.w	r2, r3, #1
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f000 f96d 	bl	800107e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f06f 020c 	mvn.w	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d012      	beq.n	8000dde <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d00d      	beq.n	8000dde <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f000 f812 	bl	8000df8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f06f 0201 	mvn.w	r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
	...

08000e0c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d101      	bne.n	8000e2c <HAL_ADC_ConfigChannel+0x20>
 8000e28:	2302      	movs	r3, #2
 8000e2a:	e0dc      	b.n	8000fe6 <HAL_ADC_ConfigChannel+0x1da>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b06      	cmp	r3, #6
 8000e3a:	d81c      	bhi.n	8000e76 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	4613      	mov	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3b05      	subs	r3, #5
 8000e4e:	221f      	movs	r2, #31
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	4019      	ands	r1, r3
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	6818      	ldr	r0, [r3, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	3b05      	subs	r3, #5
 8000e68:	fa00 f203 	lsl.w	r2, r0, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	430a      	orrs	r2, r1
 8000e72:	635a      	str	r2, [r3, #52]	; 0x34
 8000e74:	e03c      	b.n	8000ef0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b0c      	cmp	r3, #12
 8000e7c:	d81c      	bhi.n	8000eb8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	3b23      	subs	r3, #35	; 0x23
 8000e90:	221f      	movs	r2, #31
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	4019      	ands	r1, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	6818      	ldr	r0, [r3, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	3b23      	subs	r3, #35	; 0x23
 8000eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	631a      	str	r2, [r3, #48]	; 0x30
 8000eb6:	e01b      	b.n	8000ef0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	3b41      	subs	r3, #65	; 0x41
 8000eca:	221f      	movs	r2, #31
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	4019      	ands	r1, r3
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	6818      	ldr	r0, [r3, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	4613      	mov	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	4413      	add	r3, r2
 8000ee2:	3b41      	subs	r3, #65	; 0x41
 8000ee4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	430a      	orrs	r2, r1
 8000eee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b09      	cmp	r3, #9
 8000ef6:	d91c      	bls.n	8000f32 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68d9      	ldr	r1, [r3, #12]
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	3b1e      	subs	r3, #30
 8000f0a:	2207      	movs	r2, #7
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	4019      	ands	r1, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	6898      	ldr	r0, [r3, #8]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	3b1e      	subs	r3, #30
 8000f24:	fa00 f203 	lsl.w	r2, r0, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	e019      	b.n	8000f66 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6919      	ldr	r1, [r3, #16]
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	2207      	movs	r2, #7
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	4019      	ands	r1, r3
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	6898      	ldr	r0, [r3, #8]
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4613      	mov	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4413      	add	r3, r2
 8000f5a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	430a      	orrs	r2, r1
 8000f64:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b10      	cmp	r3, #16
 8000f6c:	d003      	beq.n	8000f76 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f72:	2b11      	cmp	r3, #17
 8000f74:	d132      	bne.n	8000fdc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a1d      	ldr	r2, [pc, #116]	; (8000ff0 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d125      	bne.n	8000fcc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d126      	bne.n	8000fdc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f9c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b10      	cmp	r3, #16
 8000fa4:	d11a      	bne.n	8000fdc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a13      	ldr	r2, [pc, #76]	; (8000ff8 <HAL_ADC_ConfigChannel+0x1ec>)
 8000fac:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb0:	0c9a      	lsrs	r2, r3, #18
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fbc:	e002      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f9      	bne.n	8000fbe <HAL_ADC_ConfigChannel+0x1b2>
 8000fca:	e007      	b.n	8000fdc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd0:	f043 0220 	orr.w	r2, r3, #32
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	40012400 	.word	0x40012400
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	431bde83 	.word	0x431bde83

08000ffc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b01      	cmp	r3, #1
 8001014:	d12e      	bne.n	8001074 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0201 	bic.w	r2, r2, #1
 8001024:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001026:	f7ff fd3d 	bl	8000aa4 <HAL_GetTick>
 800102a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800102c:	e01b      	b.n	8001066 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800102e:	f7ff fd39 	bl	8000aa4 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d914      	bls.n	8001066 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b01      	cmp	r3, #1
 8001048:	d10d      	bne.n	8001066 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104e:	f043 0210 	orr.w	r2, r3, #16
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105a:	f043 0201 	orr.w	r2, r3, #1
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e007      	b.n	8001076 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b01      	cmp	r3, #1
 8001072:	d0dc      	beq.n	800102e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	60d3      	str	r3, [r2, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <__NVIC_GetPriorityGrouping+0x18>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	f003 0307 	and.w	r3, r3, #7
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	2b00      	cmp	r3, #0
 8001104:	db0b      	blt.n	800111e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	f003 021f 	and.w	r2, r3, #31
 800110c:	4906      	ldr	r1, [pc, #24]	; (8001128 <__NVIC_EnableIRQ+0x34>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	2001      	movs	r0, #1
 8001116:	fa00 f202 	lsl.w	r2, r0, r2
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	; (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	; (800117c <__NVIC_SetPriority+0x50>)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2b04      	cmp	r3, #4
 800119c:	bf28      	it	cs
 800119e:	2304      	movcs	r3, #4
 80011a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3304      	adds	r3, #4
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d902      	bls.n	80011b0 <NVIC_EncodePriority+0x30>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3b03      	subs	r3, #3
 80011ae:	e000      	b.n	80011b2 <NVIC_EncodePriority+0x32>
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	4313      	orrs	r3, r2
         );
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	; 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f4:	d301      	bcc.n	80011fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00f      	b.n	800121a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <SysTick_Config+0x40>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001202:	210f      	movs	r1, #15
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f7ff ff90 	bl	800112c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <SysTick_Config+0x40>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <SysTick_Config+0x40>)
 8001214:	2207      	movs	r2, #7
 8001216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	e000e010 	.word	0xe000e010

08001228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff2d 	bl	8001090 <__NVIC_SetPriorityGrouping>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123e:	b580      	push	{r7, lr}
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001250:	f7ff ff42 	bl	80010d8 <__NVIC_GetPriorityGrouping>
 8001254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	6978      	ldr	r0, [r7, #20]
 800125c:	f7ff ff90 	bl	8001180 <NVIC_EncodePriority>
 8001260:	4602      	mov	r2, r0
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff5f 	bl	800112c <__NVIC_SetPriority>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff35 	bl	80010f4 <__NVIC_EnableIRQ>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ffa2 	bl	80011e4 <SysTick_Config>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b085      	sub	sp, #20
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d008      	beq.n	80012d4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2204      	movs	r2, #4
 80012c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e020      	b.n	8001316 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 020e 	bic.w	r2, r2, #14
 80012e2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0201 	bic.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012fc:	2101      	movs	r1, #1
 80012fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001302:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001314:	7bfb      	ldrb	r3, [r7, #15]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d005      	beq.n	8001344 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2204      	movs	r2, #4
 800133c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	73fb      	strb	r3, [r7, #15]
 8001342:	e051      	b.n	80013e8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 020e 	bic.w	r2, r2, #14
 8001352:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0201 	bic.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a22      	ldr	r2, [pc, #136]	; (80013f4 <HAL_DMA_Abort_IT+0xd4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d029      	beq.n	80013c2 <HAL_DMA_Abort_IT+0xa2>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a21      	ldr	r2, [pc, #132]	; (80013f8 <HAL_DMA_Abort_IT+0xd8>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d022      	beq.n	80013be <HAL_DMA_Abort_IT+0x9e>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <HAL_DMA_Abort_IT+0xdc>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d01a      	beq.n	80013b8 <HAL_DMA_Abort_IT+0x98>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a1e      	ldr	r2, [pc, #120]	; (8001400 <HAL_DMA_Abort_IT+0xe0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d012      	beq.n	80013b2 <HAL_DMA_Abort_IT+0x92>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <HAL_DMA_Abort_IT+0xe4>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00a      	beq.n	80013ac <HAL_DMA_Abort_IT+0x8c>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <HAL_DMA_Abort_IT+0xe8>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d102      	bne.n	80013a6 <HAL_DMA_Abort_IT+0x86>
 80013a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013a4:	e00e      	b.n	80013c4 <HAL_DMA_Abort_IT+0xa4>
 80013a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013aa:	e00b      	b.n	80013c4 <HAL_DMA_Abort_IT+0xa4>
 80013ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b0:	e008      	b.n	80013c4 <HAL_DMA_Abort_IT+0xa4>
 80013b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b6:	e005      	b.n	80013c4 <HAL_DMA_Abort_IT+0xa4>
 80013b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013bc:	e002      	b.n	80013c4 <HAL_DMA_Abort_IT+0xa4>
 80013be:	2310      	movs	r3, #16
 80013c0:	e000      	b.n	80013c4 <HAL_DMA_Abort_IT+0xa4>
 80013c2:	2301      	movs	r3, #1
 80013c4:	4a11      	ldr	r2, [pc, #68]	; (800140c <HAL_DMA_Abort_IT+0xec>)
 80013c6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	4798      	blx	r3
    } 
  }
  return status;
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40020008 	.word	0x40020008
 80013f8:	4002001c 	.word	0x4002001c
 80013fc:	40020030 	.word	0x40020030
 8001400:	40020044 	.word	0x40020044
 8001404:	40020058 	.word	0x40020058
 8001408:	4002006c 	.word	0x4002006c
 800140c:	40020000 	.word	0x40020000

08001410 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001410:	b480      	push	{r7}
 8001412:	b08b      	sub	sp, #44	; 0x2c
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800141e:	2300      	movs	r3, #0
 8001420:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001422:	e161      	b.n	80016e8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001424:	2201      	movs	r2, #1
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	69fa      	ldr	r2, [r7, #28]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	429a      	cmp	r2, r3
 800143e:	f040 8150 	bne.w	80016e2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	4a97      	ldr	r2, [pc, #604]	; (80016a4 <HAL_GPIO_Init+0x294>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d05e      	beq.n	800150a <HAL_GPIO_Init+0xfa>
 800144c:	4a95      	ldr	r2, [pc, #596]	; (80016a4 <HAL_GPIO_Init+0x294>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d875      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 8001452:	4a95      	ldr	r2, [pc, #596]	; (80016a8 <HAL_GPIO_Init+0x298>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d058      	beq.n	800150a <HAL_GPIO_Init+0xfa>
 8001458:	4a93      	ldr	r2, [pc, #588]	; (80016a8 <HAL_GPIO_Init+0x298>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d86f      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 800145e:	4a93      	ldr	r2, [pc, #588]	; (80016ac <HAL_GPIO_Init+0x29c>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d052      	beq.n	800150a <HAL_GPIO_Init+0xfa>
 8001464:	4a91      	ldr	r2, [pc, #580]	; (80016ac <HAL_GPIO_Init+0x29c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d869      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 800146a:	4a91      	ldr	r2, [pc, #580]	; (80016b0 <HAL_GPIO_Init+0x2a0>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d04c      	beq.n	800150a <HAL_GPIO_Init+0xfa>
 8001470:	4a8f      	ldr	r2, [pc, #572]	; (80016b0 <HAL_GPIO_Init+0x2a0>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d863      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 8001476:	4a8f      	ldr	r2, [pc, #572]	; (80016b4 <HAL_GPIO_Init+0x2a4>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d046      	beq.n	800150a <HAL_GPIO_Init+0xfa>
 800147c:	4a8d      	ldr	r2, [pc, #564]	; (80016b4 <HAL_GPIO_Init+0x2a4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d85d      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 8001482:	2b12      	cmp	r3, #18
 8001484:	d82a      	bhi.n	80014dc <HAL_GPIO_Init+0xcc>
 8001486:	2b12      	cmp	r3, #18
 8001488:	d859      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 800148a:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <HAL_GPIO_Init+0x80>)
 800148c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001490:	0800150b 	.word	0x0800150b
 8001494:	080014e5 	.word	0x080014e5
 8001498:	080014f7 	.word	0x080014f7
 800149c:	08001539 	.word	0x08001539
 80014a0:	0800153f 	.word	0x0800153f
 80014a4:	0800153f 	.word	0x0800153f
 80014a8:	0800153f 	.word	0x0800153f
 80014ac:	0800153f 	.word	0x0800153f
 80014b0:	0800153f 	.word	0x0800153f
 80014b4:	0800153f 	.word	0x0800153f
 80014b8:	0800153f 	.word	0x0800153f
 80014bc:	0800153f 	.word	0x0800153f
 80014c0:	0800153f 	.word	0x0800153f
 80014c4:	0800153f 	.word	0x0800153f
 80014c8:	0800153f 	.word	0x0800153f
 80014cc:	0800153f 	.word	0x0800153f
 80014d0:	0800153f 	.word	0x0800153f
 80014d4:	080014ed 	.word	0x080014ed
 80014d8:	08001501 	.word	0x08001501
 80014dc:	4a76      	ldr	r2, [pc, #472]	; (80016b8 <HAL_GPIO_Init+0x2a8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d013      	beq.n	800150a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014e2:	e02c      	b.n	800153e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	623b      	str	r3, [r7, #32]
          break;
 80014ea:	e029      	b.n	8001540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	3304      	adds	r3, #4
 80014f2:	623b      	str	r3, [r7, #32]
          break;
 80014f4:	e024      	b.n	8001540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	3308      	adds	r3, #8
 80014fc:	623b      	str	r3, [r7, #32]
          break;
 80014fe:	e01f      	b.n	8001540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	330c      	adds	r3, #12
 8001506:	623b      	str	r3, [r7, #32]
          break;
 8001508:	e01a      	b.n	8001540 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d102      	bne.n	8001518 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001512:	2304      	movs	r3, #4
 8001514:	623b      	str	r3, [r7, #32]
          break;
 8001516:	e013      	b.n	8001540 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d105      	bne.n	800152c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001520:	2308      	movs	r3, #8
 8001522:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	611a      	str	r2, [r3, #16]
          break;
 800152a:	e009      	b.n	8001540 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800152c:	2308      	movs	r3, #8
 800152e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	615a      	str	r2, [r3, #20]
          break;
 8001536:	e003      	b.n	8001540 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
          break;
 800153c:	e000      	b.n	8001540 <HAL_GPIO_Init+0x130>
          break;
 800153e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	2bff      	cmp	r3, #255	; 0xff
 8001544:	d801      	bhi.n	800154a <HAL_GPIO_Init+0x13a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	e001      	b.n	800154e <HAL_GPIO_Init+0x13e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3304      	adds	r3, #4
 800154e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2bff      	cmp	r3, #255	; 0xff
 8001554:	d802      	bhi.n	800155c <HAL_GPIO_Init+0x14c>
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	e002      	b.n	8001562 <HAL_GPIO_Init+0x152>
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	3b08      	subs	r3, #8
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	210f      	movs	r1, #15
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	fa01 f303 	lsl.w	r3, r1, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	401a      	ands	r2, r3
 8001574:	6a39      	ldr	r1, [r7, #32]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	431a      	orrs	r2, r3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 80a9 	beq.w	80016e2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001590:	4b4a      	ldr	r3, [pc, #296]	; (80016bc <HAL_GPIO_Init+0x2ac>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	4a49      	ldr	r2, [pc, #292]	; (80016bc <HAL_GPIO_Init+0x2ac>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6193      	str	r3, [r2, #24]
 800159c:	4b47      	ldr	r3, [pc, #284]	; (80016bc <HAL_GPIO_Init+0x2ac>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015a8:	4a45      	ldr	r2, [pc, #276]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	220f      	movs	r2, #15
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	4013      	ands	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a3d      	ldr	r2, [pc, #244]	; (80016c4 <HAL_GPIO_Init+0x2b4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d00d      	beq.n	80015f0 <HAL_GPIO_Init+0x1e0>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a3c      	ldr	r2, [pc, #240]	; (80016c8 <HAL_GPIO_Init+0x2b8>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d007      	beq.n	80015ec <HAL_GPIO_Init+0x1dc>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a3b      	ldr	r2, [pc, #236]	; (80016cc <HAL_GPIO_Init+0x2bc>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d101      	bne.n	80015e8 <HAL_GPIO_Init+0x1d8>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e004      	b.n	80015f2 <HAL_GPIO_Init+0x1e2>
 80015e8:	2303      	movs	r3, #3
 80015ea:	e002      	b.n	80015f2 <HAL_GPIO_Init+0x1e2>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <HAL_GPIO_Init+0x1e2>
 80015f0:	2300      	movs	r3, #0
 80015f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f4:	f002 0203 	and.w	r2, r2, #3
 80015f8:	0092      	lsls	r2, r2, #2
 80015fa:	4093      	lsls	r3, r2
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	4313      	orrs	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001602:	492f      	ldr	r1, [pc, #188]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	089b      	lsrs	r3, r3, #2
 8001608:	3302      	adds	r3, #2
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800161c:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <HAL_GPIO_Init+0x2c0>)
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	492b      	ldr	r1, [pc, #172]	; (80016d0 <HAL_GPIO_Init+0x2c0>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	608b      	str	r3, [r1, #8]
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800162a:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <HAL_GPIO_Init+0x2c0>)
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	43db      	mvns	r3, r3
 8001632:	4927      	ldr	r1, [pc, #156]	; (80016d0 <HAL_GPIO_Init+0x2c0>)
 8001634:	4013      	ands	r3, r2
 8001636:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d006      	beq.n	8001652 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001644:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <HAL_GPIO_Init+0x2c0>)
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	4921      	ldr	r1, [pc, #132]	; (80016d0 <HAL_GPIO_Init+0x2c0>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	60cb      	str	r3, [r1, #12]
 8001650:	e006      	b.n	8001660 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <HAL_GPIO_Init+0x2c0>)
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	43db      	mvns	r3, r3
 800165a:	491d      	ldr	r1, [pc, #116]	; (80016d0 <HAL_GPIO_Init+0x2c0>)
 800165c:	4013      	ands	r3, r2
 800165e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_GPIO_Init+0x2c0>)
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	4917      	ldr	r1, [pc, #92]	; (80016d0 <HAL_GPIO_Init+0x2c0>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
 8001678:	e006      	b.n	8001688 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_GPIO_Init+0x2c0>)
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	43db      	mvns	r3, r3
 8001682:	4913      	ldr	r1, [pc, #76]	; (80016d0 <HAL_GPIO_Init+0x2c0>)
 8001684:	4013      	ands	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d01f      	beq.n	80016d4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_GPIO_Init+0x2c0>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	490d      	ldr	r1, [pc, #52]	; (80016d0 <HAL_GPIO_Init+0x2c0>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	600b      	str	r3, [r1, #0]
 80016a0:	e01f      	b.n	80016e2 <HAL_GPIO_Init+0x2d2>
 80016a2:	bf00      	nop
 80016a4:	10320000 	.word	0x10320000
 80016a8:	10310000 	.word	0x10310000
 80016ac:	10220000 	.word	0x10220000
 80016b0:	10210000 	.word	0x10210000
 80016b4:	10120000 	.word	0x10120000
 80016b8:	10110000 	.word	0x10110000
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010000 	.word	0x40010000
 80016c4:	40010800 	.word	0x40010800
 80016c8:	40010c00 	.word	0x40010c00
 80016cc:	40011000 	.word	0x40011000
 80016d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_GPIO_Init+0x2f4>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	43db      	mvns	r3, r3
 80016dc:	4909      	ldr	r1, [pc, #36]	; (8001704 <HAL_GPIO_Init+0x2f4>)
 80016de:	4013      	ands	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	3301      	adds	r3, #1
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	fa22 f303 	lsr.w	r3, r2, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f47f ae96 	bne.w	8001424 <HAL_GPIO_Init+0x14>
  }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	372c      	adds	r7, #44	; 0x2c
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	40010400 	.word	0x40010400

08001708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]
 8001714:	4613      	mov	r3, r2
 8001716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001718:	787b      	ldrb	r3, [r7, #1]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001724:	e003      	b.n	800172e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001726:	887b      	ldrh	r3, [r7, #2]
 8001728:	041a      	lsls	r2, r3, #16
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	611a      	str	r2, [r3, #16]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800174a:	887a      	ldrh	r2, [r7, #2]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4013      	ands	r3, r2
 8001750:	041a      	lsls	r2, r3, #16
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	43d9      	mvns	r1, r3
 8001756:	887b      	ldrh	r3, [r7, #2]
 8001758:	400b      	ands	r3, r1
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	611a      	str	r2, [r3, #16]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr
	...

0800176c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e272      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 8087 	beq.w	800189a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800178c:	4b92      	ldr	r3, [pc, #584]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 030c 	and.w	r3, r3, #12
 8001794:	2b04      	cmp	r3, #4
 8001796:	d00c      	beq.n	80017b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001798:	4b8f      	ldr	r3, [pc, #572]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d112      	bne.n	80017ca <HAL_RCC_OscConfig+0x5e>
 80017a4:	4b8c      	ldr	r3, [pc, #560]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b0:	d10b      	bne.n	80017ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b2:	4b89      	ldr	r3, [pc, #548]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d06c      	beq.n	8001898 <HAL_RCC_OscConfig+0x12c>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d168      	bne.n	8001898 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e24c      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d2:	d106      	bne.n	80017e2 <HAL_RCC_OscConfig+0x76>
 80017d4:	4b80      	ldr	r3, [pc, #512]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a7f      	ldr	r2, [pc, #508]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	e02e      	b.n	8001840 <HAL_RCC_OscConfig+0xd4>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10c      	bne.n	8001804 <HAL_RCC_OscConfig+0x98>
 80017ea:	4b7b      	ldr	r3, [pc, #492]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a7a      	ldr	r2, [pc, #488]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	4b78      	ldr	r3, [pc, #480]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a77      	ldr	r2, [pc, #476]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	e01d      	b.n	8001840 <HAL_RCC_OscConfig+0xd4>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0xbc>
 800180e:	4b72      	ldr	r3, [pc, #456]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a71      	ldr	r2, [pc, #452]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b6f      	ldr	r3, [pc, #444]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a6e      	ldr	r2, [pc, #440]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e00b      	b.n	8001840 <HAL_RCC_OscConfig+0xd4>
 8001828:	4b6b      	ldr	r3, [pc, #428]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a6a      	ldr	r2, [pc, #424]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800182e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b68      	ldr	r3, [pc, #416]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a67      	ldr	r2, [pc, #412]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800183a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d013      	beq.n	8001870 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff f92c 	bl	8000aa4 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff f928 	bl	8000aa4 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e200      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	4b5d      	ldr	r3, [pc, #372]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0xe4>
 800186e:	e014      	b.n	800189a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff f918 	bl	8000aa4 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff f914 	bl	8000aa4 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e1ec      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188a:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x10c>
 8001896:	e000      	b.n	800189a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d063      	beq.n	800196e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018a6:	4b4c      	ldr	r3, [pc, #304]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00b      	beq.n	80018ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018b2:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d11c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x18c>
 80018be:	4b46      	ldr	r3, [pc, #280]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d116      	bne.n	80018f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ca:	4b43      	ldr	r3, [pc, #268]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <HAL_RCC_OscConfig+0x176>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d001      	beq.n	80018e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e1c0      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e2:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4939      	ldr	r1, [pc, #228]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f6:	e03a      	b.n	800196e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d020      	beq.n	8001942 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001900:	4b36      	ldr	r3, [pc, #216]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 8001902:	2201      	movs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff f8cd 	bl	8000aa4 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190e:	f7ff f8c9 	bl	8000aa4 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e1a1      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001920:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192c:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	4927      	ldr	r1, [pc, #156]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 800193c:	4313      	orrs	r3, r2
 800193e:	600b      	str	r3, [r1, #0]
 8001940:	e015      	b.n	800196e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001942:	4b26      	ldr	r3, [pc, #152]	; (80019dc <HAL_RCC_OscConfig+0x270>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff f8ac 	bl	8000aa4 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001950:	f7ff f8a8 	bl	8000aa4 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e180      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d03a      	beq.n	80019f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d019      	beq.n	80019b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001982:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <HAL_RCC_OscConfig+0x274>)
 8001984:	2201      	movs	r2, #1
 8001986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001988:	f7ff f88c 	bl	8000aa4 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001990:	f7ff f888 	bl	8000aa4 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e160      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019ae:	2001      	movs	r0, #1
 80019b0:	f000 face 	bl	8001f50 <RCC_Delay>
 80019b4:	e01c      	b.n	80019f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_RCC_OscConfig+0x274>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019bc:	f7ff f872 	bl	8000aa4 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c2:	e00f      	b.n	80019e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c4:	f7ff f86e 	bl	8000aa4 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d908      	bls.n	80019e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e146      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000
 80019dc:	42420000 	.word	0x42420000
 80019e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e4:	4b92      	ldr	r3, [pc, #584]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1e9      	bne.n	80019c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 80a6 	beq.w	8001b4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fe:	2300      	movs	r3, #0
 8001a00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a02:	4b8b      	ldr	r3, [pc, #556]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10d      	bne.n	8001a2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b88      	ldr	r3, [pc, #544]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4a87      	ldr	r2, [pc, #540]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	61d3      	str	r3, [r2, #28]
 8001a1a:	4b85      	ldr	r3, [pc, #532]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a26:	2301      	movs	r3, #1
 8001a28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2a:	4b82      	ldr	r3, [pc, #520]	; (8001c34 <HAL_RCC_OscConfig+0x4c8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d118      	bne.n	8001a68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a36:	4b7f      	ldr	r3, [pc, #508]	; (8001c34 <HAL_RCC_OscConfig+0x4c8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a7e      	ldr	r2, [pc, #504]	; (8001c34 <HAL_RCC_OscConfig+0x4c8>)
 8001a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a42:	f7ff f82f 	bl	8000aa4 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a4a:	f7ff f82b 	bl	8000aa4 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b64      	cmp	r3, #100	; 0x64
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e103      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5c:	4b75      	ldr	r3, [pc, #468]	; (8001c34 <HAL_RCC_OscConfig+0x4c8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x312>
 8001a70:	4b6f      	ldr	r3, [pc, #444]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	4a6e      	ldr	r2, [pc, #440]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6213      	str	r3, [r2, #32]
 8001a7c:	e02d      	b.n	8001ada <HAL_RCC_OscConfig+0x36e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x334>
 8001a86:	4b6a      	ldr	r3, [pc, #424]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4a69      	ldr	r2, [pc, #420]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	6213      	str	r3, [r2, #32]
 8001a92:	4b67      	ldr	r3, [pc, #412]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	4a66      	ldr	r2, [pc, #408]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	f023 0304 	bic.w	r3, r3, #4
 8001a9c:	6213      	str	r3, [r2, #32]
 8001a9e:	e01c      	b.n	8001ada <HAL_RCC_OscConfig+0x36e>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	d10c      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x356>
 8001aa8:	4b61      	ldr	r3, [pc, #388]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	4a60      	ldr	r2, [pc, #384]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	6213      	str	r3, [r2, #32]
 8001ab4:	4b5e      	ldr	r3, [pc, #376]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4a5d      	ldr	r2, [pc, #372]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6213      	str	r3, [r2, #32]
 8001ac0:	e00b      	b.n	8001ada <HAL_RCC_OscConfig+0x36e>
 8001ac2:	4b5b      	ldr	r3, [pc, #364]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	4a5a      	ldr	r2, [pc, #360]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	6213      	str	r3, [r2, #32]
 8001ace:	4b58      	ldr	r3, [pc, #352]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	4a57      	ldr	r2, [pc, #348]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	f023 0304 	bic.w	r3, r3, #4
 8001ad8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d015      	beq.n	8001b0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae2:	f7fe ffdf 	bl	8000aa4 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae8:	e00a      	b.n	8001b00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7fe ffdb 	bl	8000aa4 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e0b1      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b00:	4b4b      	ldr	r3, [pc, #300]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0ee      	beq.n	8001aea <HAL_RCC_OscConfig+0x37e>
 8001b0c:	e014      	b.n	8001b38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0e:	f7fe ffc9 	bl	8000aa4 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b14:	e00a      	b.n	8001b2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b16:	f7fe ffc5 	bl	8000aa4 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e09b      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b2c:	4b40      	ldr	r3, [pc, #256]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1ee      	bne.n	8001b16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b38:	7dfb      	ldrb	r3, [r7, #23]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d105      	bne.n	8001b4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3e:	4b3c      	ldr	r3, [pc, #240]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	4a3b      	ldr	r2, [pc, #236]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 8087 	beq.w	8001c62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b54:	4b36      	ldr	r3, [pc, #216]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d061      	beq.n	8001c24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d146      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b68:	4b33      	ldr	r3, [pc, #204]	; (8001c38 <HAL_RCC_OscConfig+0x4cc>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6e:	f7fe ff99 	bl	8000aa4 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b76:	f7fe ff95 	bl	8000aa4 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e06d      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b88:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1f0      	bne.n	8001b76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b9c:	d108      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	4921      	ldr	r1, [pc, #132]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a19      	ldr	r1, [r3, #32]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	491b      	ldr	r1, [pc, #108]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_RCC_OscConfig+0x4cc>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7fe ff69 	bl	8000aa4 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7fe ff65 	bl	8000aa4 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e03d      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x46a>
 8001bf4:	e035      	b.n	8001c62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_RCC_OscConfig+0x4cc>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7fe ff52 	bl	8000aa4 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c04:	f7fe ff4e 	bl	8000aa4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e026      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x498>
 8001c22:	e01e      	b.n	8001c62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d107      	bne.n	8001c3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e019      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40007000 	.word	0x40007000
 8001c38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_RCC_OscConfig+0x500>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d106      	bne.n	8001c5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d001      	beq.n	8001c62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000

08001c70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0d0      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c84:	4b6a      	ldr	r3, [pc, #424]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d910      	bls.n	8001cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b67      	ldr	r3, [pc, #412]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 0207 	bic.w	r2, r3, #7
 8001c9a:	4965      	ldr	r1, [pc, #404]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	4b63      	ldr	r3, [pc, #396]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0b8      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d020      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ccc:	4b59      	ldr	r3, [pc, #356]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4a58      	ldr	r2, [pc, #352]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce4:	4b53      	ldr	r3, [pc, #332]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4a52      	ldr	r2, [pc, #328]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4b50      	ldr	r3, [pc, #320]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	494d      	ldr	r1, [pc, #308]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d040      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d115      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e07f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2e:	4b41      	ldr	r3, [pc, #260]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d109      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e073      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3e:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e06b      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d4e:	4b39      	ldr	r3, [pc, #228]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f023 0203 	bic.w	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4936      	ldr	r1, [pc, #216]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d60:	f7fe fea0 	bl	8000aa4 <HAL_GetTick>
 8001d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d68:	f7fe fe9c 	bl	8000aa4 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e053      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 020c 	and.w	r2, r3, #12
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d1eb      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d90:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d210      	bcs.n	8001dc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 0207 	bic.w	r2, r3, #7
 8001da6:	4922      	ldr	r1, [pc, #136]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e032      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4916      	ldr	r1, [pc, #88]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	490e      	ldr	r1, [pc, #56]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dfe:	f000 f821 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8001e02:	4602      	mov	r2, r0
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	490a      	ldr	r1, [pc, #40]	; (8001e38 <HAL_RCC_ClockConfig+0x1c8>)
 8001e10:	5ccb      	ldrb	r3, [r1, r3]
 8001e12:	fa22 f303 	lsr.w	r3, r2, r3
 8001e16:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <HAL_RCC_ClockConfig+0x1cc>)
 8001e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_RCC_ClockConfig+0x1d0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fdfe 	bl	8000a20 <HAL_InitTick>

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40022000 	.word	0x40022000
 8001e34:	40021000 	.word	0x40021000
 8001e38:	08003f74 	.word	0x08003f74
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	20000004 	.word	0x20000004

08001e44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d002      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0x30>
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d003      	beq.n	8001e7a <HAL_RCC_GetSysClockFreq+0x36>
 8001e72:	e027      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_RCC_GetSysClockFreq+0x98>)
 8001e76:	613b      	str	r3, [r7, #16]
      break;
 8001e78:	e027      	b.n	8001eca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	0c9b      	lsrs	r3, r3, #18
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e84:	5cd3      	ldrb	r3, [r2, r3]
 8001e86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d010      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	0c5b      	lsrs	r3, r3, #17
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	4a11      	ldr	r2, [pc, #68]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ea0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	; (8001edc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ea6:	fb03 f202 	mul.w	r2, r3, r2
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	e004      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a0c      	ldr	r2, [pc, #48]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001eb8:	fb02 f303 	mul.w	r3, r2, r3
 8001ebc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	613b      	str	r3, [r7, #16]
      break;
 8001ec2:	e002      	b.n	8001eca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ec6:	613b      	str	r3, [r7, #16]
      break;
 8001ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eca:	693b      	ldr	r3, [r7, #16]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	371c      	adds	r7, #28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	007a1200 	.word	0x007a1200
 8001ee0:	08003f8c 	.word	0x08003f8c
 8001ee4:	08003f9c 	.word	0x08003f9c
 8001ee8:	003d0900 	.word	0x003d0900

08001eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef0:	4b02      	ldr	r3, [pc, #8]	; (8001efc <HAL_RCC_GetHCLKFreq+0x10>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	20000000 	.word	0x20000000

08001f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f04:	f7ff fff2 	bl	8001eec <HAL_RCC_GetHCLKFreq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	0a1b      	lsrs	r3, r3, #8
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	4903      	ldr	r1, [pc, #12]	; (8001f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f16:	5ccb      	ldrb	r3, [r1, r3]
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	08003f84 	.word	0x08003f84

08001f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f2c:	f7ff ffde 	bl	8001eec <HAL_RCC_GetHCLKFreq>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	0adb      	lsrs	r3, r3, #11
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	4903      	ldr	r1, [pc, #12]	; (8001f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f3e:	5ccb      	ldrb	r3, [r1, r3]
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	08003f84 	.word	0x08003f84

08001f50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f58:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <RCC_Delay+0x34>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <RCC_Delay+0x38>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	0a5b      	lsrs	r3, r3, #9
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	fb02 f303 	mul.w	r3, r2, r3
 8001f6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f6c:	bf00      	nop
  }
  while (Delay --);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1e5a      	subs	r2, r3, #1
 8001f72:	60fa      	str	r2, [r7, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f9      	bne.n	8001f6c <RCC_Delay+0x1c>
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	20000000 	.word	0x20000000
 8001f88:	10624dd3 	.word	0x10624dd3

08001f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d07d      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fac:	4b4f      	ldr	r3, [pc, #316]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10d      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb8:	4b4c      	ldr	r3, [pc, #304]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	4a4b      	ldr	r2, [pc, #300]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	61d3      	str	r3, [r2, #28]
 8001fc4:	4b49      	ldr	r3, [pc, #292]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd4:	4b46      	ldr	r3, [pc, #280]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d118      	bne.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe0:	4b43      	ldr	r3, [pc, #268]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a42      	ldr	r2, [pc, #264]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fec:	f7fe fd5a 	bl	8000aa4 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff2:	e008      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff4:	f7fe fd56 	bl	8000aa4 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b64      	cmp	r3, #100	; 0x64
 8002000:	d901      	bls.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e06d      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002006:	4b3a      	ldr	r3, [pc, #232]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002012:	4b36      	ldr	r3, [pc, #216]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800201a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d02e      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	429a      	cmp	r2, r3
 800202e:	d027      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002030:	4b2e      	ldr	r3, [pc, #184]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002038:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800203a:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002040:	4b2c      	ldr	r3, [pc, #176]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002046:	4a29      	ldr	r2, [pc, #164]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d014      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002056:	f7fe fd25 	bl	8000aa4 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205c:	e00a      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205e:	f7fe fd21 	bl	8000aa4 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	; 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d901      	bls.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e036      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002074:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0ee      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002080:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4917      	ldr	r1, [pc, #92]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800208e:	4313      	orrs	r3, r2
 8002090:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002092:	7dfb      	ldrb	r3, [r7, #23]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d105      	bne.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002098:	4b14      	ldr	r3, [pc, #80]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	4a13      	ldr	r2, [pc, #76]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800209e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020b0:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	490b      	ldr	r1, [pc, #44]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d008      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	4904      	ldr	r1, [pc, #16]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40007000 	.word	0x40007000
 80020f4:	42420440 	.word	0x42420440

080020f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e041      	b.n	800218e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d106      	bne.n	8002124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe fb4a 	bl	80007b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3304      	adds	r3, #4
 8002134:	4619      	mov	r1, r3
 8002136:	4610      	mov	r0, r2
 8002138:	f000 fa6e 	bl	8002618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d001      	beq.n	80021b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e035      	b.n	800221c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a16      	ldr	r2, [pc, #88]	; (8002228 <HAL_TIM_Base_Start_IT+0x90>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d009      	beq.n	80021e6 <HAL_TIM_Base_Start_IT+0x4e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021da:	d004      	beq.n	80021e6 <HAL_TIM_Base_Start_IT+0x4e>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a12      	ldr	r2, [pc, #72]	; (800222c <HAL_TIM_Base_Start_IT+0x94>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d111      	bne.n	800220a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b06      	cmp	r3, #6
 80021f6:	d010      	beq.n	800221a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002208:	e007      	b.n	800221a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0201 	orr.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40012c00 	.word	0x40012c00
 800222c:	40000400 	.word	0x40000400

08002230 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d122      	bne.n	800228c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b02      	cmp	r3, #2
 8002252:	d11b      	bne.n	800228c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0202 	mvn.w	r2, #2
 800225c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f9b4 	bl	80025e0 <HAL_TIM_IC_CaptureCallback>
 8002278:	e005      	b.n	8002286 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f9a7 	bl	80025ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f9b6 	bl	80025f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0304 	and.w	r3, r3, #4
 8002296:	2b04      	cmp	r3, #4
 8002298:	d122      	bne.n	80022e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d11b      	bne.n	80022e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0204 	mvn.w	r2, #4
 80022b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2202      	movs	r2, #2
 80022b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f98a 	bl	80025e0 <HAL_TIM_IC_CaptureCallback>
 80022cc:	e005      	b.n	80022da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f97d 	bl	80025ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f98c 	bl	80025f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d122      	bne.n	8002334 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d11b      	bne.n	8002334 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0208 	mvn.w	r2, #8
 8002304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2204      	movs	r2, #4
 800230a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f960 	bl	80025e0 <HAL_TIM_IC_CaptureCallback>
 8002320:	e005      	b.n	800232e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f953 	bl	80025ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f962 	bl	80025f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	2b10      	cmp	r3, #16
 8002340:	d122      	bne.n	8002388 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	2b10      	cmp	r3, #16
 800234e:	d11b      	bne.n	8002388 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0210 	mvn.w	r2, #16
 8002358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2208      	movs	r2, #8
 800235e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f936 	bl	80025e0 <HAL_TIM_IC_CaptureCallback>
 8002374:	e005      	b.n	8002382 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f929 	bl	80025ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f938 	bl	80025f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b01      	cmp	r3, #1
 8002394:	d10e      	bne.n	80023b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d107      	bne.n	80023b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0201 	mvn.w	r2, #1
 80023ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7fd ff8a 	bl	80002c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023be:	2b80      	cmp	r3, #128	; 0x80
 80023c0:	d10e      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023cc:	2b80      	cmp	r3, #128	; 0x80
 80023ce:	d107      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 fa6b 	bl	80028b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ea:	2b40      	cmp	r3, #64	; 0x40
 80023ec:	d10e      	bne.n	800240c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f8:	2b40      	cmp	r3, #64	; 0x40
 80023fa:	d107      	bne.n	800240c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f8fc 	bl	8002604 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f003 0320 	and.w	r3, r3, #32
 8002416:	2b20      	cmp	r3, #32
 8002418:	d10e      	bne.n	8002438 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b20      	cmp	r3, #32
 8002426:	d107      	bne.n	8002438 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0220 	mvn.w	r2, #32
 8002430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fa36 	bl	80028a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_TIM_ConfigClockSource+0x1c>
 8002458:	2302      	movs	r3, #2
 800245a:	e0b4      	b.n	80025c6 <HAL_TIM_ConfigClockSource+0x186>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800247a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002482:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002494:	d03e      	beq.n	8002514 <HAL_TIM_ConfigClockSource+0xd4>
 8002496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800249a:	f200 8087 	bhi.w	80025ac <HAL_TIM_ConfigClockSource+0x16c>
 800249e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a2:	f000 8086 	beq.w	80025b2 <HAL_TIM_ConfigClockSource+0x172>
 80024a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024aa:	d87f      	bhi.n	80025ac <HAL_TIM_ConfigClockSource+0x16c>
 80024ac:	2b70      	cmp	r3, #112	; 0x70
 80024ae:	d01a      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0xa6>
 80024b0:	2b70      	cmp	r3, #112	; 0x70
 80024b2:	d87b      	bhi.n	80025ac <HAL_TIM_ConfigClockSource+0x16c>
 80024b4:	2b60      	cmp	r3, #96	; 0x60
 80024b6:	d050      	beq.n	800255a <HAL_TIM_ConfigClockSource+0x11a>
 80024b8:	2b60      	cmp	r3, #96	; 0x60
 80024ba:	d877      	bhi.n	80025ac <HAL_TIM_ConfigClockSource+0x16c>
 80024bc:	2b50      	cmp	r3, #80	; 0x50
 80024be:	d03c      	beq.n	800253a <HAL_TIM_ConfigClockSource+0xfa>
 80024c0:	2b50      	cmp	r3, #80	; 0x50
 80024c2:	d873      	bhi.n	80025ac <HAL_TIM_ConfigClockSource+0x16c>
 80024c4:	2b40      	cmp	r3, #64	; 0x40
 80024c6:	d058      	beq.n	800257a <HAL_TIM_ConfigClockSource+0x13a>
 80024c8:	2b40      	cmp	r3, #64	; 0x40
 80024ca:	d86f      	bhi.n	80025ac <HAL_TIM_ConfigClockSource+0x16c>
 80024cc:	2b30      	cmp	r3, #48	; 0x30
 80024ce:	d064      	beq.n	800259a <HAL_TIM_ConfigClockSource+0x15a>
 80024d0:	2b30      	cmp	r3, #48	; 0x30
 80024d2:	d86b      	bhi.n	80025ac <HAL_TIM_ConfigClockSource+0x16c>
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d060      	beq.n	800259a <HAL_TIM_ConfigClockSource+0x15a>
 80024d8:	2b20      	cmp	r3, #32
 80024da:	d867      	bhi.n	80025ac <HAL_TIM_ConfigClockSource+0x16c>
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d05c      	beq.n	800259a <HAL_TIM_ConfigClockSource+0x15a>
 80024e0:	2b10      	cmp	r3, #16
 80024e2:	d05a      	beq.n	800259a <HAL_TIM_ConfigClockSource+0x15a>
 80024e4:	e062      	b.n	80025ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024f6:	f000 f95e 	bl	80027b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002508:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	609a      	str	r2, [r3, #8]
      break;
 8002512:	e04f      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002524:	f000 f947 	bl	80027b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002536:	609a      	str	r2, [r3, #8]
      break;
 8002538:	e03c      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002546:	461a      	mov	r2, r3
 8002548:	f000 f8be 	bl	80026c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2150      	movs	r1, #80	; 0x50
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f915 	bl	8002782 <TIM_ITRx_SetConfig>
      break;
 8002558:	e02c      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002566:	461a      	mov	r2, r3
 8002568:	f000 f8dc 	bl	8002724 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2160      	movs	r1, #96	; 0x60
 8002572:	4618      	mov	r0, r3
 8002574:	f000 f905 	bl	8002782 <TIM_ITRx_SetConfig>
      break;
 8002578:	e01c      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002586:	461a      	mov	r2, r3
 8002588:	f000 f89e 	bl	80026c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2140      	movs	r1, #64	; 0x40
 8002592:	4618      	mov	r0, r3
 8002594:	f000 f8f5 	bl	8002782 <TIM_ITRx_SetConfig>
      break;
 8002598:	e00c      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4619      	mov	r1, r3
 80025a4:	4610      	mov	r0, r2
 80025a6:	f000 f8ec 	bl	8002782 <TIM_ITRx_SetConfig>
      break;
 80025aa:	e003      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
      break;
 80025b0:	e000      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
	...

08002618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a25      	ldr	r2, [pc, #148]	; (80026c0 <TIM_Base_SetConfig+0xa8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d007      	beq.n	8002640 <TIM_Base_SetConfig+0x28>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002636:	d003      	beq.n	8002640 <TIM_Base_SetConfig+0x28>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a22      	ldr	r2, [pc, #136]	; (80026c4 <TIM_Base_SetConfig+0xac>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d108      	bne.n	8002652 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a1a      	ldr	r2, [pc, #104]	; (80026c0 <TIM_Base_SetConfig+0xa8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <TIM_Base_SetConfig+0x52>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002660:	d003      	beq.n	800266a <TIM_Base_SetConfig+0x52>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a17      	ldr	r2, [pc, #92]	; (80026c4 <TIM_Base_SetConfig+0xac>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d108      	bne.n	800267c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4313      	orrs	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <TIM_Base_SetConfig+0xa8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d103      	bne.n	80026b0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	615a      	str	r2, [r3, #20]
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	40012c00 	.word	0x40012c00
 80026c4:	40000400 	.word	0x40000400

080026c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	f023 0201 	bic.w	r2, r3, #1
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f023 030a 	bic.w	r3, r3, #10
 8002704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4313      	orrs	r3, r2
 800270c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	621a      	str	r2, [r3, #32]
}
 800271a:	bf00      	nop
 800271c:	371c      	adds	r7, #28
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	f023 0210 	bic.w	r2, r3, #16
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800274e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	031b      	lsls	r3, r3, #12
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002760:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	621a      	str	r2, [r3, #32]
}
 8002778:	bf00      	nop
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr

08002782 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002782:	b480      	push	{r7}
 8002784:	b085      	sub	sp, #20
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002798:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	f043 0307 	orr.w	r3, r3, #7
 80027a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	609a      	str	r2, [r3, #8]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b087      	sub	sp, #28
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	021a      	lsls	r2, r3, #8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	431a      	orrs	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4313      	orrs	r3, r2
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	609a      	str	r2, [r3, #8]
}
 80027ea:	bf00      	nop
 80027ec:	371c      	adds	r7, #28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002808:	2302      	movs	r3, #2
 800280a:	e041      	b.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a14      	ldr	r2, [pc, #80]	; (800289c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d009      	beq.n	8002864 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002858:	d004      	beq.n	8002864 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a10      	ldr	r2, [pc, #64]	; (80028a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d10c      	bne.n	800287e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800286a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	4313      	orrs	r3, r2
 8002874:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40012c00 	.word	0x40012c00
 80028a0:	40000400 	.word	0x40000400

080028a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e042      	b.n	8002960 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fd ff86 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2224      	movs	r2, #36	; 0x24
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800290a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 fdc5 	bl	800349c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002920:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	4613      	mov	r3, r2
 8002976:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b20      	cmp	r3, #32
 8002986:	d16d      	bne.n	8002a64 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_UART_Transmit+0x2c>
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e066      	b.n	8002a66 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2221      	movs	r2, #33	; 0x21
 80029a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029a6:	f7fe f87d 	bl	8000aa4 <HAL_GetTick>
 80029aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	88fa      	ldrh	r2, [r7, #6]
 80029b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	88fa      	ldrh	r2, [r7, #6]
 80029b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c0:	d108      	bne.n	80029d4 <HAL_UART_Transmit+0x6c>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d104      	bne.n	80029d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	e003      	b.n	80029dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029dc:	e02a      	b.n	8002a34 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2200      	movs	r2, #0
 80029e6:	2180      	movs	r1, #128	; 0x80
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 fb14 	bl	8003016 <UART_WaitOnFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e036      	b.n	8002a66 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10b      	bne.n	8002a16 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	3302      	adds	r3, #2
 8002a12:	61bb      	str	r3, [r7, #24]
 8002a14:	e007      	b.n	8002a26 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	781a      	ldrb	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	3301      	adds	r3, #1
 8002a24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1cf      	bne.n	80029de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2200      	movs	r2, #0
 8002a46:	2140      	movs	r1, #64	; 0x40
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 fae4 	bl	8003016 <UART_WaitOnFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e006      	b.n	8002a66 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	e000      	b.n	8002a66 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002a64:	2302      	movs	r3, #2
  }
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	d112      	bne.n	8002aae <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <HAL_UART_Receive_IT+0x26>
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e00b      	b.n	8002ab0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 fb24 	bl	80030f2 <UART_Start_Receive_IT>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	e000      	b.n	8002ab0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002aae:	2302      	movs	r3, #2
  }
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b0ba      	sub	sp, #232	; 0xe8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002af6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10f      	bne.n	8002b1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <HAL_UART_IRQHandler+0x66>
 8002b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fc01 	bl	800331e <UART_Receive_IT>
      return;
 8002b1c:	e25b      	b.n	8002fd6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 80de 	beq.w	8002ce4 <HAL_UART_IRQHandler+0x22c>
 8002b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d106      	bne.n	8002b42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80d1 	beq.w	8002ce4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_UART_IRQHandler+0xae>
 8002b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	f043 0201 	orr.w	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_UART_IRQHandler+0xd2>
 8002b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	f043 0202 	orr.w	r2, r3, #2
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00b      	beq.n	8002bae <HAL_UART_IRQHandler+0xf6>
 8002b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	f043 0204 	orr.w	r2, r3, #4
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d011      	beq.n	8002bde <HAL_UART_IRQHandler+0x126>
 8002bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d105      	bne.n	8002bd2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	f043 0208 	orr.w	r2, r3, #8
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 81f2 	beq.w	8002fcc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_UART_IRQHandler+0x14e>
 8002bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 fb8c 	bl	800331e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d103      	bne.n	8002c32 <HAL_UART_IRQHandler+0x17a>
 8002c2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d04f      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fa96 	bl	8003164 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d041      	beq.n	8002cca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3314      	adds	r3, #20
 8002c4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c54:	e853 3f00 	ldrex	r3, [r3]
 8002c58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3314      	adds	r3, #20
 8002c6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c82:	e841 2300 	strex	r3, r2, [r1]
 8002c86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1d9      	bne.n	8002c46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d013      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9e:	4a7e      	ldr	r2, [pc, #504]	; (8002e98 <HAL_UART_IRQHandler+0x3e0>)
 8002ca0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe fb3a 	bl	8001320 <HAL_DMA_Abort_IT>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d016      	beq.n	8002ce0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc0:	e00e      	b.n	8002ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f993 	bl	8002fee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc8:	e00a      	b.n	8002ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f98f 	bl	8002fee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd0:	e006      	b.n	8002ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f98b 	bl	8002fee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002cde:	e175      	b.n	8002fcc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce0:	bf00      	nop
    return;
 8002ce2:	e173      	b.n	8002fcc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	f040 814f 	bne.w	8002f8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 8148 	beq.w	8002f8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 8141 	beq.w	8002f8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 80b6 	beq.w	8002e9c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 8145 	beq.w	8002fd0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	f080 813e 	bcs.w	8002fd0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b20      	cmp	r3, #32
 8002d64:	f000 8088 	beq.w	8002e78 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	330c      	adds	r3, #12
 8002d6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d76:	e853 3f00 	ldrex	r3, [r3]
 8002d7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	330c      	adds	r3, #12
 8002d90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d94:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002da0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002da4:	e841 2300 	strex	r3, r2, [r1]
 8002da8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1d9      	bne.n	8002d68 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3314      	adds	r3, #20
 8002dba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dbe:	e853 3f00 	ldrex	r3, [r3]
 8002dc2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002dc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dc6:	f023 0301 	bic.w	r3, r3, #1
 8002dca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3314      	adds	r3, #20
 8002dd4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dd8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ddc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dde:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002de0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002de4:	e841 2300 	strex	r3, r2, [r1]
 8002de8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1e1      	bne.n	8002db4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3314      	adds	r3, #20
 8002df6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dfa:	e853 3f00 	ldrex	r3, [r3]
 8002dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3314      	adds	r3, #20
 8002e10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e14:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e1c:	e841 2300 	strex	r3, r2, [r1]
 8002e20:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e3      	bne.n	8002df0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	330c      	adds	r3, #12
 8002e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e40:	e853 3f00 	ldrex	r3, [r3]
 8002e44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e48:	f023 0310 	bic.w	r3, r3, #16
 8002e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	330c      	adds	r3, #12
 8002e56:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e5a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e5c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e62:	e841 2300 	strex	r3, r2, [r1]
 8002e66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1e3      	bne.n	8002e36 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fa19 	bl	80012aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f8b6 	bl	8003000 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e94:	e09c      	b.n	8002fd0 <HAL_UART_IRQHandler+0x518>
 8002e96:	bf00      	nop
 8002e98:	08003229 	.word	0x08003229
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 808e 	beq.w	8002fd4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002eb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 8089 	beq.w	8002fd4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	330c      	adds	r3, #12
 8002ec8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ecc:	e853 3f00 	ldrex	r3, [r3]
 8002ed0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ed8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	330c      	adds	r3, #12
 8002ee2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ee6:	647a      	str	r2, [r7, #68]	; 0x44
 8002ee8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002eec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002eee:	e841 2300 	strex	r3, r2, [r1]
 8002ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1e3      	bne.n	8002ec2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3314      	adds	r3, #20
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	e853 3f00 	ldrex	r3, [r3]
 8002f08:	623b      	str	r3, [r7, #32]
   return(result);
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3314      	adds	r3, #20
 8002f1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f1e:	633a      	str	r2, [r7, #48]	; 0x30
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f26:	e841 2300 	strex	r3, r2, [r1]
 8002f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1e3      	bne.n	8002efa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	330c      	adds	r3, #12
 8002f46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	e853 3f00 	ldrex	r3, [r3]
 8002f4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0310 	bic.w	r3, r3, #16
 8002f56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	330c      	adds	r3, #12
 8002f60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f64:	61fa      	str	r2, [r7, #28]
 8002f66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f68:	69b9      	ldr	r1, [r7, #24]
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	e841 2300 	strex	r3, r2, [r1]
 8002f70:	617b      	str	r3, [r7, #20]
   return(result);
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1e3      	bne.n	8002f40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f82:	4619      	mov	r1, r3
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f83b 	bl	8003000 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f8a:	e023      	b.n	8002fd4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d009      	beq.n	8002fac <HAL_UART_IRQHandler+0x4f4>
 8002f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f953 	bl	8003250 <UART_Transmit_IT>
    return;
 8002faa:	e014      	b.n	8002fd6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00e      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x51e>
 8002fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f992 	bl	80032ee <UART_EndTransmit_IT>
    return;
 8002fca:	e004      	b.n	8002fd6 <HAL_UART_IRQHandler+0x51e>
    return;
 8002fcc:	bf00      	nop
 8002fce:	e002      	b.n	8002fd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002fd0:	bf00      	nop
 8002fd2:	e000      	b.n	8002fd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002fd4:	bf00      	nop
  }
}
 8002fd6:	37e8      	adds	r7, #232	; 0xe8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr

08002fee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b090      	sub	sp, #64	; 0x40
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	603b      	str	r3, [r7, #0]
 8003022:	4613      	mov	r3, r2
 8003024:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003026:	e050      	b.n	80030ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800302a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302e:	d04c      	beq.n	80030ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <UART_WaitOnFlagUntilTimeout+0x30>
 8003036:	f7fd fd35 	bl	8000aa4 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003042:	429a      	cmp	r2, r3
 8003044:	d241      	bcs.n	80030ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	330c      	adds	r3, #12
 800304c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	e853 3f00 	ldrex	r3, [r3]
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800305c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	330c      	adds	r3, #12
 8003064:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003066:	637a      	str	r2, [r7, #52]	; 0x34
 8003068:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800306c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800306e:	e841 2300 	strex	r3, r2, [r1]
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1e5      	bne.n	8003046 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	3314      	adds	r3, #20
 8003080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	e853 3f00 	ldrex	r3, [r3]
 8003088:	613b      	str	r3, [r7, #16]
   return(result);
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f023 0301 	bic.w	r3, r3, #1
 8003090:	63bb      	str	r3, [r7, #56]	; 0x38
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3314      	adds	r3, #20
 8003098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800309a:	623a      	str	r2, [r7, #32]
 800309c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309e:	69f9      	ldr	r1, [r7, #28]
 80030a0:	6a3a      	ldr	r2, [r7, #32]
 80030a2:	e841 2300 	strex	r3, r2, [r1]
 80030a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1e5      	bne.n	800307a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e00f      	b.n	80030ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4013      	ands	r3, r2
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	bf0c      	ite	eq
 80030da:	2301      	moveq	r3, #1
 80030dc:	2300      	movne	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d09f      	beq.n	8003028 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3740      	adds	r7, #64	; 0x40
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	4613      	mov	r3, r2
 80030fe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	88fa      	ldrh	r2, [r7, #6]
 800310a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	88fa      	ldrh	r2, [r7, #6]
 8003110:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2222      	movs	r2, #34	; 0x22
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003136:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695a      	ldr	r2, [r3, #20]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0220 	orr.w	r2, r2, #32
 8003156:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003164:	b480      	push	{r7}
 8003166:	b095      	sub	sp, #84	; 0x54
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	330c      	adds	r3, #12
 8003172:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003176:	e853 3f00 	ldrex	r3, [r3]
 800317a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	330c      	adds	r3, #12
 800318a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800318c:	643a      	str	r2, [r7, #64]	; 0x40
 800318e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003190:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003194:	e841 2300 	strex	r3, r2, [r1]
 8003198:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1e5      	bne.n	800316c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3314      	adds	r3, #20
 80031a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	e853 3f00 	ldrex	r3, [r3]
 80031ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3314      	adds	r3, #20
 80031be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031c8:	e841 2300 	strex	r3, r2, [r1]
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1e5      	bne.n	80031a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d119      	bne.n	8003210 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	330c      	adds	r3, #12
 80031e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	e853 3f00 	ldrex	r3, [r3]
 80031ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f023 0310 	bic.w	r3, r3, #16
 80031f2:	647b      	str	r3, [r7, #68]	; 0x44
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	330c      	adds	r3, #12
 80031fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031fc:	61ba      	str	r2, [r7, #24]
 80031fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003200:	6979      	ldr	r1, [r7, #20]
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	e841 2300 	strex	r3, r2, [r1]
 8003208:	613b      	str	r3, [r7, #16]
   return(result);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e5      	bne.n	80031dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800321e:	bf00      	nop
 8003220:	3754      	adds	r7, #84	; 0x54
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f7ff fed3 	bl	8002fee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b21      	cmp	r3, #33	; 0x21
 8003262:	d13e      	bne.n	80032e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326c:	d114      	bne.n	8003298 <UART_Transmit_IT+0x48>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d110      	bne.n	8003298 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800328a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	1c9a      	adds	r2, r3, #2
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	621a      	str	r2, [r3, #32]
 8003296:	e008      	b.n	80032aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	1c59      	adds	r1, r3, #1
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6211      	str	r1, [r2, #32]
 80032a2:	781a      	ldrb	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	4619      	mov	r1, r3
 80032b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10f      	bne.n	80032de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	e000      	b.n	80032e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032e2:	2302      	movs	r3, #2
  }
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr

080032ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003304:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff fe64 	bl	8002fdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b08c      	sub	sp, #48	; 0x30
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b22      	cmp	r3, #34	; 0x22
 8003330:	f040 80ae 	bne.w	8003490 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333c:	d117      	bne.n	800336e <UART_Receive_IT+0x50>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d113      	bne.n	800336e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003346:	2300      	movs	r3, #0
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	b29b      	uxth	r3, r3
 8003358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335c:	b29a      	uxth	r2, r3
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003366:	1c9a      	adds	r2, r3, #2
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	629a      	str	r2, [r3, #40]	; 0x28
 800336c:	e026      	b.n	80033bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003374:	2300      	movs	r3, #0
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003380:	d007      	beq.n	8003392 <UART_Receive_IT+0x74>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10a      	bne.n	80033a0 <UART_Receive_IT+0x82>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	e008      	b.n	80033b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	4619      	mov	r1, r3
 80033ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d15d      	bne.n	800348c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0220 	bic.w	r2, r2, #32
 80033de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	2b01      	cmp	r3, #1
 8003414:	d135      	bne.n	8003482 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	330c      	adds	r3, #12
 8003422:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	613b      	str	r3, [r7, #16]
   return(result);
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f023 0310 	bic.w	r3, r3, #16
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	330c      	adds	r3, #12
 800343a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343c:	623a      	str	r2, [r7, #32]
 800343e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	69f9      	ldr	r1, [r7, #28]
 8003442:	6a3a      	ldr	r2, [r7, #32]
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	61bb      	str	r3, [r7, #24]
   return(result);
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e5      	bne.n	800341c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	2b10      	cmp	r3, #16
 800345c:	d10a      	bne.n	8003474 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003478:	4619      	mov	r1, r3
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff fdc0 	bl	8003000 <HAL_UARTEx_RxEventCallback>
 8003480:	e002      	b.n	8003488 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fc ff6e 	bl	8000364 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	e002      	b.n	8003492 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	e000      	b.n	8003492 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003490:	2302      	movs	r3, #2
  }
}
 8003492:	4618      	mov	r0, r3
 8003494:	3730      	adds	r7, #48	; 0x30
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034d6:	f023 030c 	bic.w	r3, r3, #12
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6812      	ldr	r2, [r2, #0]
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	430b      	orrs	r3, r1
 80034e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699a      	ldr	r2, [r3, #24]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a2c      	ldr	r2, [pc, #176]	; (80035b0 <UART_SetConfig+0x114>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d103      	bne.n	800350c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003504:	f7fe fd10 	bl	8001f28 <HAL_RCC_GetPCLK2Freq>
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	e002      	b.n	8003512 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800350c:	f7fe fcf8 	bl	8001f00 <HAL_RCC_GetPCLK1Freq>
 8003510:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	009a      	lsls	r2, r3, #2
 800351c:	441a      	add	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	fbb2 f3f3 	udiv	r3, r2, r3
 8003528:	4a22      	ldr	r2, [pc, #136]	; (80035b4 <UART_SetConfig+0x118>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	0119      	lsls	r1, r3, #4
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	009a      	lsls	r2, r3, #2
 800353c:	441a      	add	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	fbb2 f2f3 	udiv	r2, r2, r3
 8003548:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <UART_SetConfig+0x118>)
 800354a:	fba3 0302 	umull	r0, r3, r3, r2
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	2064      	movs	r0, #100	; 0x64
 8003552:	fb00 f303 	mul.w	r3, r0, r3
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	3332      	adds	r3, #50	; 0x32
 800355c:	4a15      	ldr	r2, [pc, #84]	; (80035b4 <UART_SetConfig+0x118>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003568:	4419      	add	r1, r3
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	009a      	lsls	r2, r3, #2
 8003574:	441a      	add	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003580:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <UART_SetConfig+0x118>)
 8003582:	fba3 0302 	umull	r0, r3, r3, r2
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	2064      	movs	r0, #100	; 0x64
 800358a:	fb00 f303 	mul.w	r3, r0, r3
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	3332      	adds	r3, #50	; 0x32
 8003594:	4a07      	ldr	r2, [pc, #28]	; (80035b4 <UART_SetConfig+0x118>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	f003 020f 	and.w	r2, r3, #15
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	440a      	add	r2, r1
 80035a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035a8:	bf00      	nop
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40013800 	.word	0x40013800
 80035b4:	51eb851f 	.word	0x51eb851f

080035b8 <siprintf>:
 80035b8:	b40e      	push	{r1, r2, r3}
 80035ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035be:	b500      	push	{lr}
 80035c0:	b09c      	sub	sp, #112	; 0x70
 80035c2:	ab1d      	add	r3, sp, #116	; 0x74
 80035c4:	9002      	str	r0, [sp, #8]
 80035c6:	9006      	str	r0, [sp, #24]
 80035c8:	9107      	str	r1, [sp, #28]
 80035ca:	9104      	str	r1, [sp, #16]
 80035cc:	4808      	ldr	r0, [pc, #32]	; (80035f0 <siprintf+0x38>)
 80035ce:	4909      	ldr	r1, [pc, #36]	; (80035f4 <siprintf+0x3c>)
 80035d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80035d4:	9105      	str	r1, [sp, #20]
 80035d6:	6800      	ldr	r0, [r0, #0]
 80035d8:	a902      	add	r1, sp, #8
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	f000 f98e 	bl	80038fc <_svfiprintf_r>
 80035e0:	2200      	movs	r2, #0
 80035e2:	9b02      	ldr	r3, [sp, #8]
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	b01c      	add	sp, #112	; 0x70
 80035e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80035ec:	b003      	add	sp, #12
 80035ee:	4770      	bx	lr
 80035f0:	20000058 	.word	0x20000058
 80035f4:	ffff0208 	.word	0xffff0208

080035f8 <memset>:
 80035f8:	4603      	mov	r3, r0
 80035fa:	4402      	add	r2, r0
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d100      	bne.n	8003602 <memset+0xa>
 8003600:	4770      	bx	lr
 8003602:	f803 1b01 	strb.w	r1, [r3], #1
 8003606:	e7f9      	b.n	80035fc <memset+0x4>

08003608 <__errno>:
 8003608:	4b01      	ldr	r3, [pc, #4]	; (8003610 <__errno+0x8>)
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	20000058 	.word	0x20000058

08003614 <__libc_init_array>:
 8003614:	b570      	push	{r4, r5, r6, lr}
 8003616:	2600      	movs	r6, #0
 8003618:	4d0c      	ldr	r5, [pc, #48]	; (800364c <__libc_init_array+0x38>)
 800361a:	4c0d      	ldr	r4, [pc, #52]	; (8003650 <__libc_init_array+0x3c>)
 800361c:	1b64      	subs	r4, r4, r5
 800361e:	10a4      	asrs	r4, r4, #2
 8003620:	42a6      	cmp	r6, r4
 8003622:	d109      	bne.n	8003638 <__libc_init_array+0x24>
 8003624:	f000 fc7a 	bl	8003f1c <_init>
 8003628:	2600      	movs	r6, #0
 800362a:	4d0a      	ldr	r5, [pc, #40]	; (8003654 <__libc_init_array+0x40>)
 800362c:	4c0a      	ldr	r4, [pc, #40]	; (8003658 <__libc_init_array+0x44>)
 800362e:	1b64      	subs	r4, r4, r5
 8003630:	10a4      	asrs	r4, r4, #2
 8003632:	42a6      	cmp	r6, r4
 8003634:	d105      	bne.n	8003642 <__libc_init_array+0x2e>
 8003636:	bd70      	pop	{r4, r5, r6, pc}
 8003638:	f855 3b04 	ldr.w	r3, [r5], #4
 800363c:	4798      	blx	r3
 800363e:	3601      	adds	r6, #1
 8003640:	e7ee      	b.n	8003620 <__libc_init_array+0xc>
 8003642:	f855 3b04 	ldr.w	r3, [r5], #4
 8003646:	4798      	blx	r3
 8003648:	3601      	adds	r6, #1
 800364a:	e7f2      	b.n	8003632 <__libc_init_array+0x1e>
 800364c:	08003fd4 	.word	0x08003fd4
 8003650:	08003fd4 	.word	0x08003fd4
 8003654:	08003fd4 	.word	0x08003fd4
 8003658:	08003fd8 	.word	0x08003fd8

0800365c <__retarget_lock_acquire_recursive>:
 800365c:	4770      	bx	lr

0800365e <__retarget_lock_release_recursive>:
 800365e:	4770      	bx	lr

08003660 <_free_r>:
 8003660:	b538      	push	{r3, r4, r5, lr}
 8003662:	4605      	mov	r5, r0
 8003664:	2900      	cmp	r1, #0
 8003666:	d040      	beq.n	80036ea <_free_r+0x8a>
 8003668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800366c:	1f0c      	subs	r4, r1, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	bfb8      	it	lt
 8003672:	18e4      	addlt	r4, r4, r3
 8003674:	f000 f8dc 	bl	8003830 <__malloc_lock>
 8003678:	4a1c      	ldr	r2, [pc, #112]	; (80036ec <_free_r+0x8c>)
 800367a:	6813      	ldr	r3, [r2, #0]
 800367c:	b933      	cbnz	r3, 800368c <_free_r+0x2c>
 800367e:	6063      	str	r3, [r4, #4]
 8003680:	6014      	str	r4, [r2, #0]
 8003682:	4628      	mov	r0, r5
 8003684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003688:	f000 b8d8 	b.w	800383c <__malloc_unlock>
 800368c:	42a3      	cmp	r3, r4
 800368e:	d908      	bls.n	80036a2 <_free_r+0x42>
 8003690:	6820      	ldr	r0, [r4, #0]
 8003692:	1821      	adds	r1, r4, r0
 8003694:	428b      	cmp	r3, r1
 8003696:	bf01      	itttt	eq
 8003698:	6819      	ldreq	r1, [r3, #0]
 800369a:	685b      	ldreq	r3, [r3, #4]
 800369c:	1809      	addeq	r1, r1, r0
 800369e:	6021      	streq	r1, [r4, #0]
 80036a0:	e7ed      	b.n	800367e <_free_r+0x1e>
 80036a2:	461a      	mov	r2, r3
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	b10b      	cbz	r3, 80036ac <_free_r+0x4c>
 80036a8:	42a3      	cmp	r3, r4
 80036aa:	d9fa      	bls.n	80036a2 <_free_r+0x42>
 80036ac:	6811      	ldr	r1, [r2, #0]
 80036ae:	1850      	adds	r0, r2, r1
 80036b0:	42a0      	cmp	r0, r4
 80036b2:	d10b      	bne.n	80036cc <_free_r+0x6c>
 80036b4:	6820      	ldr	r0, [r4, #0]
 80036b6:	4401      	add	r1, r0
 80036b8:	1850      	adds	r0, r2, r1
 80036ba:	4283      	cmp	r3, r0
 80036bc:	6011      	str	r1, [r2, #0]
 80036be:	d1e0      	bne.n	8003682 <_free_r+0x22>
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	4408      	add	r0, r1
 80036c6:	6010      	str	r0, [r2, #0]
 80036c8:	6053      	str	r3, [r2, #4]
 80036ca:	e7da      	b.n	8003682 <_free_r+0x22>
 80036cc:	d902      	bls.n	80036d4 <_free_r+0x74>
 80036ce:	230c      	movs	r3, #12
 80036d0:	602b      	str	r3, [r5, #0]
 80036d2:	e7d6      	b.n	8003682 <_free_r+0x22>
 80036d4:	6820      	ldr	r0, [r4, #0]
 80036d6:	1821      	adds	r1, r4, r0
 80036d8:	428b      	cmp	r3, r1
 80036da:	bf01      	itttt	eq
 80036dc:	6819      	ldreq	r1, [r3, #0]
 80036de:	685b      	ldreq	r3, [r3, #4]
 80036e0:	1809      	addeq	r1, r1, r0
 80036e2:	6021      	streq	r1, [r4, #0]
 80036e4:	6063      	str	r3, [r4, #4]
 80036e6:	6054      	str	r4, [r2, #4]
 80036e8:	e7cb      	b.n	8003682 <_free_r+0x22>
 80036ea:	bd38      	pop	{r3, r4, r5, pc}
 80036ec:	2000029c 	.word	0x2000029c

080036f0 <sbrk_aligned>:
 80036f0:	b570      	push	{r4, r5, r6, lr}
 80036f2:	4e0e      	ldr	r6, [pc, #56]	; (800372c <sbrk_aligned+0x3c>)
 80036f4:	460c      	mov	r4, r1
 80036f6:	6831      	ldr	r1, [r6, #0]
 80036f8:	4605      	mov	r5, r0
 80036fa:	b911      	cbnz	r1, 8003702 <sbrk_aligned+0x12>
 80036fc:	f000 fbaa 	bl	8003e54 <_sbrk_r>
 8003700:	6030      	str	r0, [r6, #0]
 8003702:	4621      	mov	r1, r4
 8003704:	4628      	mov	r0, r5
 8003706:	f000 fba5 	bl	8003e54 <_sbrk_r>
 800370a:	1c43      	adds	r3, r0, #1
 800370c:	d00a      	beq.n	8003724 <sbrk_aligned+0x34>
 800370e:	1cc4      	adds	r4, r0, #3
 8003710:	f024 0403 	bic.w	r4, r4, #3
 8003714:	42a0      	cmp	r0, r4
 8003716:	d007      	beq.n	8003728 <sbrk_aligned+0x38>
 8003718:	1a21      	subs	r1, r4, r0
 800371a:	4628      	mov	r0, r5
 800371c:	f000 fb9a 	bl	8003e54 <_sbrk_r>
 8003720:	3001      	adds	r0, #1
 8003722:	d101      	bne.n	8003728 <sbrk_aligned+0x38>
 8003724:	f04f 34ff 	mov.w	r4, #4294967295
 8003728:	4620      	mov	r0, r4
 800372a:	bd70      	pop	{r4, r5, r6, pc}
 800372c:	200002a0 	.word	0x200002a0

08003730 <_malloc_r>:
 8003730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003734:	1ccd      	adds	r5, r1, #3
 8003736:	f025 0503 	bic.w	r5, r5, #3
 800373a:	3508      	adds	r5, #8
 800373c:	2d0c      	cmp	r5, #12
 800373e:	bf38      	it	cc
 8003740:	250c      	movcc	r5, #12
 8003742:	2d00      	cmp	r5, #0
 8003744:	4607      	mov	r7, r0
 8003746:	db01      	blt.n	800374c <_malloc_r+0x1c>
 8003748:	42a9      	cmp	r1, r5
 800374a:	d905      	bls.n	8003758 <_malloc_r+0x28>
 800374c:	230c      	movs	r3, #12
 800374e:	2600      	movs	r6, #0
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	4630      	mov	r0, r6
 8003754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003758:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800382c <_malloc_r+0xfc>
 800375c:	f000 f868 	bl	8003830 <__malloc_lock>
 8003760:	f8d8 3000 	ldr.w	r3, [r8]
 8003764:	461c      	mov	r4, r3
 8003766:	bb5c      	cbnz	r4, 80037c0 <_malloc_r+0x90>
 8003768:	4629      	mov	r1, r5
 800376a:	4638      	mov	r0, r7
 800376c:	f7ff ffc0 	bl	80036f0 <sbrk_aligned>
 8003770:	1c43      	adds	r3, r0, #1
 8003772:	4604      	mov	r4, r0
 8003774:	d155      	bne.n	8003822 <_malloc_r+0xf2>
 8003776:	f8d8 4000 	ldr.w	r4, [r8]
 800377a:	4626      	mov	r6, r4
 800377c:	2e00      	cmp	r6, #0
 800377e:	d145      	bne.n	800380c <_malloc_r+0xdc>
 8003780:	2c00      	cmp	r4, #0
 8003782:	d048      	beq.n	8003816 <_malloc_r+0xe6>
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	4631      	mov	r1, r6
 8003788:	4638      	mov	r0, r7
 800378a:	eb04 0903 	add.w	r9, r4, r3
 800378e:	f000 fb61 	bl	8003e54 <_sbrk_r>
 8003792:	4581      	cmp	r9, r0
 8003794:	d13f      	bne.n	8003816 <_malloc_r+0xe6>
 8003796:	6821      	ldr	r1, [r4, #0]
 8003798:	4638      	mov	r0, r7
 800379a:	1a6d      	subs	r5, r5, r1
 800379c:	4629      	mov	r1, r5
 800379e:	f7ff ffa7 	bl	80036f0 <sbrk_aligned>
 80037a2:	3001      	adds	r0, #1
 80037a4:	d037      	beq.n	8003816 <_malloc_r+0xe6>
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	442b      	add	r3, r5
 80037aa:	6023      	str	r3, [r4, #0]
 80037ac:	f8d8 3000 	ldr.w	r3, [r8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d038      	beq.n	8003826 <_malloc_r+0xf6>
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	42a2      	cmp	r2, r4
 80037b8:	d12b      	bne.n	8003812 <_malloc_r+0xe2>
 80037ba:	2200      	movs	r2, #0
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	e00f      	b.n	80037e0 <_malloc_r+0xb0>
 80037c0:	6822      	ldr	r2, [r4, #0]
 80037c2:	1b52      	subs	r2, r2, r5
 80037c4:	d41f      	bmi.n	8003806 <_malloc_r+0xd6>
 80037c6:	2a0b      	cmp	r2, #11
 80037c8:	d917      	bls.n	80037fa <_malloc_r+0xca>
 80037ca:	1961      	adds	r1, r4, r5
 80037cc:	42a3      	cmp	r3, r4
 80037ce:	6025      	str	r5, [r4, #0]
 80037d0:	bf18      	it	ne
 80037d2:	6059      	strne	r1, [r3, #4]
 80037d4:	6863      	ldr	r3, [r4, #4]
 80037d6:	bf08      	it	eq
 80037d8:	f8c8 1000 	streq.w	r1, [r8]
 80037dc:	5162      	str	r2, [r4, r5]
 80037de:	604b      	str	r3, [r1, #4]
 80037e0:	4638      	mov	r0, r7
 80037e2:	f104 060b 	add.w	r6, r4, #11
 80037e6:	f000 f829 	bl	800383c <__malloc_unlock>
 80037ea:	f026 0607 	bic.w	r6, r6, #7
 80037ee:	1d23      	adds	r3, r4, #4
 80037f0:	1af2      	subs	r2, r6, r3
 80037f2:	d0ae      	beq.n	8003752 <_malloc_r+0x22>
 80037f4:	1b9b      	subs	r3, r3, r6
 80037f6:	50a3      	str	r3, [r4, r2]
 80037f8:	e7ab      	b.n	8003752 <_malloc_r+0x22>
 80037fa:	42a3      	cmp	r3, r4
 80037fc:	6862      	ldr	r2, [r4, #4]
 80037fe:	d1dd      	bne.n	80037bc <_malloc_r+0x8c>
 8003800:	f8c8 2000 	str.w	r2, [r8]
 8003804:	e7ec      	b.n	80037e0 <_malloc_r+0xb0>
 8003806:	4623      	mov	r3, r4
 8003808:	6864      	ldr	r4, [r4, #4]
 800380a:	e7ac      	b.n	8003766 <_malloc_r+0x36>
 800380c:	4634      	mov	r4, r6
 800380e:	6876      	ldr	r6, [r6, #4]
 8003810:	e7b4      	b.n	800377c <_malloc_r+0x4c>
 8003812:	4613      	mov	r3, r2
 8003814:	e7cc      	b.n	80037b0 <_malloc_r+0x80>
 8003816:	230c      	movs	r3, #12
 8003818:	4638      	mov	r0, r7
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	f000 f80e 	bl	800383c <__malloc_unlock>
 8003820:	e797      	b.n	8003752 <_malloc_r+0x22>
 8003822:	6025      	str	r5, [r4, #0]
 8003824:	e7dc      	b.n	80037e0 <_malloc_r+0xb0>
 8003826:	605b      	str	r3, [r3, #4]
 8003828:	deff      	udf	#255	; 0xff
 800382a:	bf00      	nop
 800382c:	2000029c 	.word	0x2000029c

08003830 <__malloc_lock>:
 8003830:	4801      	ldr	r0, [pc, #4]	; (8003838 <__malloc_lock+0x8>)
 8003832:	f7ff bf13 	b.w	800365c <__retarget_lock_acquire_recursive>
 8003836:	bf00      	nop
 8003838:	20000298 	.word	0x20000298

0800383c <__malloc_unlock>:
 800383c:	4801      	ldr	r0, [pc, #4]	; (8003844 <__malloc_unlock+0x8>)
 800383e:	f7ff bf0e 	b.w	800365e <__retarget_lock_release_recursive>
 8003842:	bf00      	nop
 8003844:	20000298 	.word	0x20000298

08003848 <__ssputs_r>:
 8003848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800384c:	461f      	mov	r7, r3
 800384e:	688e      	ldr	r6, [r1, #8]
 8003850:	4682      	mov	sl, r0
 8003852:	42be      	cmp	r6, r7
 8003854:	460c      	mov	r4, r1
 8003856:	4690      	mov	r8, r2
 8003858:	680b      	ldr	r3, [r1, #0]
 800385a:	d82c      	bhi.n	80038b6 <__ssputs_r+0x6e>
 800385c:	898a      	ldrh	r2, [r1, #12]
 800385e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003862:	d026      	beq.n	80038b2 <__ssputs_r+0x6a>
 8003864:	6965      	ldr	r5, [r4, #20]
 8003866:	6909      	ldr	r1, [r1, #16]
 8003868:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800386c:	eba3 0901 	sub.w	r9, r3, r1
 8003870:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003874:	1c7b      	adds	r3, r7, #1
 8003876:	444b      	add	r3, r9
 8003878:	106d      	asrs	r5, r5, #1
 800387a:	429d      	cmp	r5, r3
 800387c:	bf38      	it	cc
 800387e:	461d      	movcc	r5, r3
 8003880:	0553      	lsls	r3, r2, #21
 8003882:	d527      	bpl.n	80038d4 <__ssputs_r+0x8c>
 8003884:	4629      	mov	r1, r5
 8003886:	f7ff ff53 	bl	8003730 <_malloc_r>
 800388a:	4606      	mov	r6, r0
 800388c:	b360      	cbz	r0, 80038e8 <__ssputs_r+0xa0>
 800388e:	464a      	mov	r2, r9
 8003890:	6921      	ldr	r1, [r4, #16]
 8003892:	f000 fafd 	bl	8003e90 <memcpy>
 8003896:	89a3      	ldrh	r3, [r4, #12]
 8003898:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800389c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a0:	81a3      	strh	r3, [r4, #12]
 80038a2:	6126      	str	r6, [r4, #16]
 80038a4:	444e      	add	r6, r9
 80038a6:	6026      	str	r6, [r4, #0]
 80038a8:	463e      	mov	r6, r7
 80038aa:	6165      	str	r5, [r4, #20]
 80038ac:	eba5 0509 	sub.w	r5, r5, r9
 80038b0:	60a5      	str	r5, [r4, #8]
 80038b2:	42be      	cmp	r6, r7
 80038b4:	d900      	bls.n	80038b8 <__ssputs_r+0x70>
 80038b6:	463e      	mov	r6, r7
 80038b8:	4632      	mov	r2, r6
 80038ba:	4641      	mov	r1, r8
 80038bc:	6820      	ldr	r0, [r4, #0]
 80038be:	f000 faaf 	bl	8003e20 <memmove>
 80038c2:	2000      	movs	r0, #0
 80038c4:	68a3      	ldr	r3, [r4, #8]
 80038c6:	1b9b      	subs	r3, r3, r6
 80038c8:	60a3      	str	r3, [r4, #8]
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	4433      	add	r3, r6
 80038ce:	6023      	str	r3, [r4, #0]
 80038d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d4:	462a      	mov	r2, r5
 80038d6:	f000 fae9 	bl	8003eac <_realloc_r>
 80038da:	4606      	mov	r6, r0
 80038dc:	2800      	cmp	r0, #0
 80038de:	d1e0      	bne.n	80038a2 <__ssputs_r+0x5a>
 80038e0:	4650      	mov	r0, sl
 80038e2:	6921      	ldr	r1, [r4, #16]
 80038e4:	f7ff febc 	bl	8003660 <_free_r>
 80038e8:	230c      	movs	r3, #12
 80038ea:	f8ca 3000 	str.w	r3, [sl]
 80038ee:	89a3      	ldrh	r3, [r4, #12]
 80038f0:	f04f 30ff 	mov.w	r0, #4294967295
 80038f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038f8:	81a3      	strh	r3, [r4, #12]
 80038fa:	e7e9      	b.n	80038d0 <__ssputs_r+0x88>

080038fc <_svfiprintf_r>:
 80038fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003900:	4698      	mov	r8, r3
 8003902:	898b      	ldrh	r3, [r1, #12]
 8003904:	4607      	mov	r7, r0
 8003906:	061b      	lsls	r3, r3, #24
 8003908:	460d      	mov	r5, r1
 800390a:	4614      	mov	r4, r2
 800390c:	b09d      	sub	sp, #116	; 0x74
 800390e:	d50e      	bpl.n	800392e <_svfiprintf_r+0x32>
 8003910:	690b      	ldr	r3, [r1, #16]
 8003912:	b963      	cbnz	r3, 800392e <_svfiprintf_r+0x32>
 8003914:	2140      	movs	r1, #64	; 0x40
 8003916:	f7ff ff0b 	bl	8003730 <_malloc_r>
 800391a:	6028      	str	r0, [r5, #0]
 800391c:	6128      	str	r0, [r5, #16]
 800391e:	b920      	cbnz	r0, 800392a <_svfiprintf_r+0x2e>
 8003920:	230c      	movs	r3, #12
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	e0d0      	b.n	8003acc <_svfiprintf_r+0x1d0>
 800392a:	2340      	movs	r3, #64	; 0x40
 800392c:	616b      	str	r3, [r5, #20]
 800392e:	2300      	movs	r3, #0
 8003930:	9309      	str	r3, [sp, #36]	; 0x24
 8003932:	2320      	movs	r3, #32
 8003934:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003938:	2330      	movs	r3, #48	; 0x30
 800393a:	f04f 0901 	mov.w	r9, #1
 800393e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003942:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003ae4 <_svfiprintf_r+0x1e8>
 8003946:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800394a:	4623      	mov	r3, r4
 800394c:	469a      	mov	sl, r3
 800394e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003952:	b10a      	cbz	r2, 8003958 <_svfiprintf_r+0x5c>
 8003954:	2a25      	cmp	r2, #37	; 0x25
 8003956:	d1f9      	bne.n	800394c <_svfiprintf_r+0x50>
 8003958:	ebba 0b04 	subs.w	fp, sl, r4
 800395c:	d00b      	beq.n	8003976 <_svfiprintf_r+0x7a>
 800395e:	465b      	mov	r3, fp
 8003960:	4622      	mov	r2, r4
 8003962:	4629      	mov	r1, r5
 8003964:	4638      	mov	r0, r7
 8003966:	f7ff ff6f 	bl	8003848 <__ssputs_r>
 800396a:	3001      	adds	r0, #1
 800396c:	f000 80a9 	beq.w	8003ac2 <_svfiprintf_r+0x1c6>
 8003970:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003972:	445a      	add	r2, fp
 8003974:	9209      	str	r2, [sp, #36]	; 0x24
 8003976:	f89a 3000 	ldrb.w	r3, [sl]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 80a1 	beq.w	8003ac2 <_svfiprintf_r+0x1c6>
 8003980:	2300      	movs	r3, #0
 8003982:	f04f 32ff 	mov.w	r2, #4294967295
 8003986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800398a:	f10a 0a01 	add.w	sl, sl, #1
 800398e:	9304      	str	r3, [sp, #16]
 8003990:	9307      	str	r3, [sp, #28]
 8003992:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003996:	931a      	str	r3, [sp, #104]	; 0x68
 8003998:	4654      	mov	r4, sl
 800399a:	2205      	movs	r2, #5
 800399c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039a0:	4850      	ldr	r0, [pc, #320]	; (8003ae4 <_svfiprintf_r+0x1e8>)
 80039a2:	f000 fa67 	bl	8003e74 <memchr>
 80039a6:	9a04      	ldr	r2, [sp, #16]
 80039a8:	b9d8      	cbnz	r0, 80039e2 <_svfiprintf_r+0xe6>
 80039aa:	06d0      	lsls	r0, r2, #27
 80039ac:	bf44      	itt	mi
 80039ae:	2320      	movmi	r3, #32
 80039b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039b4:	0711      	lsls	r1, r2, #28
 80039b6:	bf44      	itt	mi
 80039b8:	232b      	movmi	r3, #43	; 0x2b
 80039ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039be:	f89a 3000 	ldrb.w	r3, [sl]
 80039c2:	2b2a      	cmp	r3, #42	; 0x2a
 80039c4:	d015      	beq.n	80039f2 <_svfiprintf_r+0xf6>
 80039c6:	4654      	mov	r4, sl
 80039c8:	2000      	movs	r0, #0
 80039ca:	f04f 0c0a 	mov.w	ip, #10
 80039ce:	9a07      	ldr	r2, [sp, #28]
 80039d0:	4621      	mov	r1, r4
 80039d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039d6:	3b30      	subs	r3, #48	; 0x30
 80039d8:	2b09      	cmp	r3, #9
 80039da:	d94d      	bls.n	8003a78 <_svfiprintf_r+0x17c>
 80039dc:	b1b0      	cbz	r0, 8003a0c <_svfiprintf_r+0x110>
 80039de:	9207      	str	r2, [sp, #28]
 80039e0:	e014      	b.n	8003a0c <_svfiprintf_r+0x110>
 80039e2:	eba0 0308 	sub.w	r3, r0, r8
 80039e6:	fa09 f303 	lsl.w	r3, r9, r3
 80039ea:	4313      	orrs	r3, r2
 80039ec:	46a2      	mov	sl, r4
 80039ee:	9304      	str	r3, [sp, #16]
 80039f0:	e7d2      	b.n	8003998 <_svfiprintf_r+0x9c>
 80039f2:	9b03      	ldr	r3, [sp, #12]
 80039f4:	1d19      	adds	r1, r3, #4
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	9103      	str	r1, [sp, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	bfbb      	ittet	lt
 80039fe:	425b      	neglt	r3, r3
 8003a00:	f042 0202 	orrlt.w	r2, r2, #2
 8003a04:	9307      	strge	r3, [sp, #28]
 8003a06:	9307      	strlt	r3, [sp, #28]
 8003a08:	bfb8      	it	lt
 8003a0a:	9204      	strlt	r2, [sp, #16]
 8003a0c:	7823      	ldrb	r3, [r4, #0]
 8003a0e:	2b2e      	cmp	r3, #46	; 0x2e
 8003a10:	d10c      	bne.n	8003a2c <_svfiprintf_r+0x130>
 8003a12:	7863      	ldrb	r3, [r4, #1]
 8003a14:	2b2a      	cmp	r3, #42	; 0x2a
 8003a16:	d134      	bne.n	8003a82 <_svfiprintf_r+0x186>
 8003a18:	9b03      	ldr	r3, [sp, #12]
 8003a1a:	3402      	adds	r4, #2
 8003a1c:	1d1a      	adds	r2, r3, #4
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	9203      	str	r2, [sp, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	bfb8      	it	lt
 8003a26:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a2a:	9305      	str	r3, [sp, #20]
 8003a2c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003ae8 <_svfiprintf_r+0x1ec>
 8003a30:	2203      	movs	r2, #3
 8003a32:	4650      	mov	r0, sl
 8003a34:	7821      	ldrb	r1, [r4, #0]
 8003a36:	f000 fa1d 	bl	8003e74 <memchr>
 8003a3a:	b138      	cbz	r0, 8003a4c <_svfiprintf_r+0x150>
 8003a3c:	2240      	movs	r2, #64	; 0x40
 8003a3e:	9b04      	ldr	r3, [sp, #16]
 8003a40:	eba0 000a 	sub.w	r0, r0, sl
 8003a44:	4082      	lsls	r2, r0
 8003a46:	4313      	orrs	r3, r2
 8003a48:	3401      	adds	r4, #1
 8003a4a:	9304      	str	r3, [sp, #16]
 8003a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a50:	2206      	movs	r2, #6
 8003a52:	4826      	ldr	r0, [pc, #152]	; (8003aec <_svfiprintf_r+0x1f0>)
 8003a54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a58:	f000 fa0c 	bl	8003e74 <memchr>
 8003a5c:	2800      	cmp	r0, #0
 8003a5e:	d038      	beq.n	8003ad2 <_svfiprintf_r+0x1d6>
 8003a60:	4b23      	ldr	r3, [pc, #140]	; (8003af0 <_svfiprintf_r+0x1f4>)
 8003a62:	bb1b      	cbnz	r3, 8003aac <_svfiprintf_r+0x1b0>
 8003a64:	9b03      	ldr	r3, [sp, #12]
 8003a66:	3307      	adds	r3, #7
 8003a68:	f023 0307 	bic.w	r3, r3, #7
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	9303      	str	r3, [sp, #12]
 8003a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a72:	4433      	add	r3, r6
 8003a74:	9309      	str	r3, [sp, #36]	; 0x24
 8003a76:	e768      	b.n	800394a <_svfiprintf_r+0x4e>
 8003a78:	460c      	mov	r4, r1
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a80:	e7a6      	b.n	80039d0 <_svfiprintf_r+0xd4>
 8003a82:	2300      	movs	r3, #0
 8003a84:	f04f 0c0a 	mov.w	ip, #10
 8003a88:	4619      	mov	r1, r3
 8003a8a:	3401      	adds	r4, #1
 8003a8c:	9305      	str	r3, [sp, #20]
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a94:	3a30      	subs	r2, #48	; 0x30
 8003a96:	2a09      	cmp	r2, #9
 8003a98:	d903      	bls.n	8003aa2 <_svfiprintf_r+0x1a6>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0c6      	beq.n	8003a2c <_svfiprintf_r+0x130>
 8003a9e:	9105      	str	r1, [sp, #20]
 8003aa0:	e7c4      	b.n	8003a2c <_svfiprintf_r+0x130>
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003aaa:	e7f0      	b.n	8003a8e <_svfiprintf_r+0x192>
 8003aac:	ab03      	add	r3, sp, #12
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	462a      	mov	r2, r5
 8003ab2:	4638      	mov	r0, r7
 8003ab4:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <_svfiprintf_r+0x1f8>)
 8003ab6:	a904      	add	r1, sp, #16
 8003ab8:	f3af 8000 	nop.w
 8003abc:	1c42      	adds	r2, r0, #1
 8003abe:	4606      	mov	r6, r0
 8003ac0:	d1d6      	bne.n	8003a70 <_svfiprintf_r+0x174>
 8003ac2:	89ab      	ldrh	r3, [r5, #12]
 8003ac4:	065b      	lsls	r3, r3, #25
 8003ac6:	f53f af2d 	bmi.w	8003924 <_svfiprintf_r+0x28>
 8003aca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003acc:	b01d      	add	sp, #116	; 0x74
 8003ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ad2:	ab03      	add	r3, sp, #12
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	462a      	mov	r2, r5
 8003ad8:	4638      	mov	r0, r7
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <_svfiprintf_r+0x1f8>)
 8003adc:	a904      	add	r1, sp, #16
 8003ade:	f000 f87d 	bl	8003bdc <_printf_i>
 8003ae2:	e7eb      	b.n	8003abc <_svfiprintf_r+0x1c0>
 8003ae4:	08003f9e 	.word	0x08003f9e
 8003ae8:	08003fa4 	.word	0x08003fa4
 8003aec:	08003fa8 	.word	0x08003fa8
 8003af0:	00000000 	.word	0x00000000
 8003af4:	08003849 	.word	0x08003849

08003af8 <_printf_common>:
 8003af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003afc:	4616      	mov	r6, r2
 8003afe:	4699      	mov	r9, r3
 8003b00:	688a      	ldr	r2, [r1, #8]
 8003b02:	690b      	ldr	r3, [r1, #16]
 8003b04:	4607      	mov	r7, r0
 8003b06:	4293      	cmp	r3, r2
 8003b08:	bfb8      	it	lt
 8003b0a:	4613      	movlt	r3, r2
 8003b0c:	6033      	str	r3, [r6, #0]
 8003b0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b12:	460c      	mov	r4, r1
 8003b14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b18:	b10a      	cbz	r2, 8003b1e <_printf_common+0x26>
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	6033      	str	r3, [r6, #0]
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	0699      	lsls	r1, r3, #26
 8003b22:	bf42      	ittt	mi
 8003b24:	6833      	ldrmi	r3, [r6, #0]
 8003b26:	3302      	addmi	r3, #2
 8003b28:	6033      	strmi	r3, [r6, #0]
 8003b2a:	6825      	ldr	r5, [r4, #0]
 8003b2c:	f015 0506 	ands.w	r5, r5, #6
 8003b30:	d106      	bne.n	8003b40 <_printf_common+0x48>
 8003b32:	f104 0a19 	add.w	sl, r4, #25
 8003b36:	68e3      	ldr	r3, [r4, #12]
 8003b38:	6832      	ldr	r2, [r6, #0]
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	42ab      	cmp	r3, r5
 8003b3e:	dc2b      	bgt.n	8003b98 <_printf_common+0xa0>
 8003b40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b44:	1e13      	subs	r3, r2, #0
 8003b46:	6822      	ldr	r2, [r4, #0]
 8003b48:	bf18      	it	ne
 8003b4a:	2301      	movne	r3, #1
 8003b4c:	0692      	lsls	r2, r2, #26
 8003b4e:	d430      	bmi.n	8003bb2 <_printf_common+0xba>
 8003b50:	4649      	mov	r1, r9
 8003b52:	4638      	mov	r0, r7
 8003b54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b58:	47c0      	blx	r8
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	d023      	beq.n	8003ba6 <_printf_common+0xae>
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	6922      	ldr	r2, [r4, #16]
 8003b62:	f003 0306 	and.w	r3, r3, #6
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	bf14      	ite	ne
 8003b6a:	2500      	movne	r5, #0
 8003b6c:	6833      	ldreq	r3, [r6, #0]
 8003b6e:	f04f 0600 	mov.w	r6, #0
 8003b72:	bf08      	it	eq
 8003b74:	68e5      	ldreq	r5, [r4, #12]
 8003b76:	f104 041a 	add.w	r4, r4, #26
 8003b7a:	bf08      	it	eq
 8003b7c:	1aed      	subeq	r5, r5, r3
 8003b7e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003b82:	bf08      	it	eq
 8003b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	bfc4      	itt	gt
 8003b8c:	1a9b      	subgt	r3, r3, r2
 8003b8e:	18ed      	addgt	r5, r5, r3
 8003b90:	42b5      	cmp	r5, r6
 8003b92:	d11a      	bne.n	8003bca <_printf_common+0xd2>
 8003b94:	2000      	movs	r0, #0
 8003b96:	e008      	b.n	8003baa <_printf_common+0xb2>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	4652      	mov	r2, sl
 8003b9c:	4649      	mov	r1, r9
 8003b9e:	4638      	mov	r0, r7
 8003ba0:	47c0      	blx	r8
 8003ba2:	3001      	adds	r0, #1
 8003ba4:	d103      	bne.n	8003bae <_printf_common+0xb6>
 8003ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8003baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bae:	3501      	adds	r5, #1
 8003bb0:	e7c1      	b.n	8003b36 <_printf_common+0x3e>
 8003bb2:	2030      	movs	r0, #48	; 0x30
 8003bb4:	18e1      	adds	r1, r4, r3
 8003bb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bc0:	4422      	add	r2, r4
 8003bc2:	3302      	adds	r3, #2
 8003bc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bc8:	e7c2      	b.n	8003b50 <_printf_common+0x58>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	4622      	mov	r2, r4
 8003bce:	4649      	mov	r1, r9
 8003bd0:	4638      	mov	r0, r7
 8003bd2:	47c0      	blx	r8
 8003bd4:	3001      	adds	r0, #1
 8003bd6:	d0e6      	beq.n	8003ba6 <_printf_common+0xae>
 8003bd8:	3601      	adds	r6, #1
 8003bda:	e7d9      	b.n	8003b90 <_printf_common+0x98>

08003bdc <_printf_i>:
 8003bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003be0:	7e0f      	ldrb	r7, [r1, #24]
 8003be2:	4691      	mov	r9, r2
 8003be4:	2f78      	cmp	r7, #120	; 0x78
 8003be6:	4680      	mov	r8, r0
 8003be8:	460c      	mov	r4, r1
 8003bea:	469a      	mov	sl, r3
 8003bec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bf2:	d807      	bhi.n	8003c04 <_printf_i+0x28>
 8003bf4:	2f62      	cmp	r7, #98	; 0x62
 8003bf6:	d80a      	bhi.n	8003c0e <_printf_i+0x32>
 8003bf8:	2f00      	cmp	r7, #0
 8003bfa:	f000 80d5 	beq.w	8003da8 <_printf_i+0x1cc>
 8003bfe:	2f58      	cmp	r7, #88	; 0x58
 8003c00:	f000 80c1 	beq.w	8003d86 <_printf_i+0x1aa>
 8003c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c0c:	e03a      	b.n	8003c84 <_printf_i+0xa8>
 8003c0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c12:	2b15      	cmp	r3, #21
 8003c14:	d8f6      	bhi.n	8003c04 <_printf_i+0x28>
 8003c16:	a101      	add	r1, pc, #4	; (adr r1, 8003c1c <_printf_i+0x40>)
 8003c18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c1c:	08003c75 	.word	0x08003c75
 8003c20:	08003c89 	.word	0x08003c89
 8003c24:	08003c05 	.word	0x08003c05
 8003c28:	08003c05 	.word	0x08003c05
 8003c2c:	08003c05 	.word	0x08003c05
 8003c30:	08003c05 	.word	0x08003c05
 8003c34:	08003c89 	.word	0x08003c89
 8003c38:	08003c05 	.word	0x08003c05
 8003c3c:	08003c05 	.word	0x08003c05
 8003c40:	08003c05 	.word	0x08003c05
 8003c44:	08003c05 	.word	0x08003c05
 8003c48:	08003d8f 	.word	0x08003d8f
 8003c4c:	08003cb5 	.word	0x08003cb5
 8003c50:	08003d49 	.word	0x08003d49
 8003c54:	08003c05 	.word	0x08003c05
 8003c58:	08003c05 	.word	0x08003c05
 8003c5c:	08003db1 	.word	0x08003db1
 8003c60:	08003c05 	.word	0x08003c05
 8003c64:	08003cb5 	.word	0x08003cb5
 8003c68:	08003c05 	.word	0x08003c05
 8003c6c:	08003c05 	.word	0x08003c05
 8003c70:	08003d51 	.word	0x08003d51
 8003c74:	682b      	ldr	r3, [r5, #0]
 8003c76:	1d1a      	adds	r2, r3, #4
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	602a      	str	r2, [r5, #0]
 8003c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0a0      	b.n	8003dca <_printf_i+0x1ee>
 8003c88:	6820      	ldr	r0, [r4, #0]
 8003c8a:	682b      	ldr	r3, [r5, #0]
 8003c8c:	0607      	lsls	r7, r0, #24
 8003c8e:	f103 0104 	add.w	r1, r3, #4
 8003c92:	6029      	str	r1, [r5, #0]
 8003c94:	d501      	bpl.n	8003c9a <_printf_i+0xbe>
 8003c96:	681e      	ldr	r6, [r3, #0]
 8003c98:	e003      	b.n	8003ca2 <_printf_i+0xc6>
 8003c9a:	0646      	lsls	r6, r0, #25
 8003c9c:	d5fb      	bpl.n	8003c96 <_printf_i+0xba>
 8003c9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003ca2:	2e00      	cmp	r6, #0
 8003ca4:	da03      	bge.n	8003cae <_printf_i+0xd2>
 8003ca6:	232d      	movs	r3, #45	; 0x2d
 8003ca8:	4276      	negs	r6, r6
 8003caa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cae:	230a      	movs	r3, #10
 8003cb0:	4859      	ldr	r0, [pc, #356]	; (8003e18 <_printf_i+0x23c>)
 8003cb2:	e012      	b.n	8003cda <_printf_i+0xfe>
 8003cb4:	682b      	ldr	r3, [r5, #0]
 8003cb6:	6820      	ldr	r0, [r4, #0]
 8003cb8:	1d19      	adds	r1, r3, #4
 8003cba:	6029      	str	r1, [r5, #0]
 8003cbc:	0605      	lsls	r5, r0, #24
 8003cbe:	d501      	bpl.n	8003cc4 <_printf_i+0xe8>
 8003cc0:	681e      	ldr	r6, [r3, #0]
 8003cc2:	e002      	b.n	8003cca <_printf_i+0xee>
 8003cc4:	0641      	lsls	r1, r0, #25
 8003cc6:	d5fb      	bpl.n	8003cc0 <_printf_i+0xe4>
 8003cc8:	881e      	ldrh	r6, [r3, #0]
 8003cca:	2f6f      	cmp	r7, #111	; 0x6f
 8003ccc:	bf0c      	ite	eq
 8003cce:	2308      	moveq	r3, #8
 8003cd0:	230a      	movne	r3, #10
 8003cd2:	4851      	ldr	r0, [pc, #324]	; (8003e18 <_printf_i+0x23c>)
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cda:	6865      	ldr	r5, [r4, #4]
 8003cdc:	2d00      	cmp	r5, #0
 8003cde:	bfa8      	it	ge
 8003ce0:	6821      	ldrge	r1, [r4, #0]
 8003ce2:	60a5      	str	r5, [r4, #8]
 8003ce4:	bfa4      	itt	ge
 8003ce6:	f021 0104 	bicge.w	r1, r1, #4
 8003cea:	6021      	strge	r1, [r4, #0]
 8003cec:	b90e      	cbnz	r6, 8003cf2 <_printf_i+0x116>
 8003cee:	2d00      	cmp	r5, #0
 8003cf0:	d04b      	beq.n	8003d8a <_printf_i+0x1ae>
 8003cf2:	4615      	mov	r5, r2
 8003cf4:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cf8:	fb03 6711 	mls	r7, r3, r1, r6
 8003cfc:	5dc7      	ldrb	r7, [r0, r7]
 8003cfe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d02:	4637      	mov	r7, r6
 8003d04:	42bb      	cmp	r3, r7
 8003d06:	460e      	mov	r6, r1
 8003d08:	d9f4      	bls.n	8003cf4 <_printf_i+0x118>
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d10b      	bne.n	8003d26 <_printf_i+0x14a>
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	07de      	lsls	r6, r3, #31
 8003d12:	d508      	bpl.n	8003d26 <_printf_i+0x14a>
 8003d14:	6923      	ldr	r3, [r4, #16]
 8003d16:	6861      	ldr	r1, [r4, #4]
 8003d18:	4299      	cmp	r1, r3
 8003d1a:	bfde      	ittt	le
 8003d1c:	2330      	movle	r3, #48	; 0x30
 8003d1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d22:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d26:	1b52      	subs	r2, r2, r5
 8003d28:	6122      	str	r2, [r4, #16]
 8003d2a:	464b      	mov	r3, r9
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	4640      	mov	r0, r8
 8003d30:	f8cd a000 	str.w	sl, [sp]
 8003d34:	aa03      	add	r2, sp, #12
 8003d36:	f7ff fedf 	bl	8003af8 <_printf_common>
 8003d3a:	3001      	adds	r0, #1
 8003d3c:	d14a      	bne.n	8003dd4 <_printf_i+0x1f8>
 8003d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d42:	b004      	add	sp, #16
 8003d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	f043 0320 	orr.w	r3, r3, #32
 8003d4e:	6023      	str	r3, [r4, #0]
 8003d50:	2778      	movs	r7, #120	; 0x78
 8003d52:	4832      	ldr	r0, [pc, #200]	; (8003e1c <_printf_i+0x240>)
 8003d54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	6829      	ldr	r1, [r5, #0]
 8003d5c:	061f      	lsls	r7, r3, #24
 8003d5e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d62:	d402      	bmi.n	8003d6a <_printf_i+0x18e>
 8003d64:	065f      	lsls	r7, r3, #25
 8003d66:	bf48      	it	mi
 8003d68:	b2b6      	uxthmi	r6, r6
 8003d6a:	07df      	lsls	r7, r3, #31
 8003d6c:	bf48      	it	mi
 8003d6e:	f043 0320 	orrmi.w	r3, r3, #32
 8003d72:	6029      	str	r1, [r5, #0]
 8003d74:	bf48      	it	mi
 8003d76:	6023      	strmi	r3, [r4, #0]
 8003d78:	b91e      	cbnz	r6, 8003d82 <_printf_i+0x1a6>
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	f023 0320 	bic.w	r3, r3, #32
 8003d80:	6023      	str	r3, [r4, #0]
 8003d82:	2310      	movs	r3, #16
 8003d84:	e7a6      	b.n	8003cd4 <_printf_i+0xf8>
 8003d86:	4824      	ldr	r0, [pc, #144]	; (8003e18 <_printf_i+0x23c>)
 8003d88:	e7e4      	b.n	8003d54 <_printf_i+0x178>
 8003d8a:	4615      	mov	r5, r2
 8003d8c:	e7bd      	b.n	8003d0a <_printf_i+0x12e>
 8003d8e:	682b      	ldr	r3, [r5, #0]
 8003d90:	6826      	ldr	r6, [r4, #0]
 8003d92:	1d18      	adds	r0, r3, #4
 8003d94:	6961      	ldr	r1, [r4, #20]
 8003d96:	6028      	str	r0, [r5, #0]
 8003d98:	0635      	lsls	r5, r6, #24
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	d501      	bpl.n	8003da2 <_printf_i+0x1c6>
 8003d9e:	6019      	str	r1, [r3, #0]
 8003da0:	e002      	b.n	8003da8 <_printf_i+0x1cc>
 8003da2:	0670      	lsls	r0, r6, #25
 8003da4:	d5fb      	bpl.n	8003d9e <_printf_i+0x1c2>
 8003da6:	8019      	strh	r1, [r3, #0]
 8003da8:	2300      	movs	r3, #0
 8003daa:	4615      	mov	r5, r2
 8003dac:	6123      	str	r3, [r4, #16]
 8003dae:	e7bc      	b.n	8003d2a <_printf_i+0x14e>
 8003db0:	682b      	ldr	r3, [r5, #0]
 8003db2:	2100      	movs	r1, #0
 8003db4:	1d1a      	adds	r2, r3, #4
 8003db6:	602a      	str	r2, [r5, #0]
 8003db8:	681d      	ldr	r5, [r3, #0]
 8003dba:	6862      	ldr	r2, [r4, #4]
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f000 f859 	bl	8003e74 <memchr>
 8003dc2:	b108      	cbz	r0, 8003dc8 <_printf_i+0x1ec>
 8003dc4:	1b40      	subs	r0, r0, r5
 8003dc6:	6060      	str	r0, [r4, #4]
 8003dc8:	6863      	ldr	r3, [r4, #4]
 8003dca:	6123      	str	r3, [r4, #16]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dd2:	e7aa      	b.n	8003d2a <_printf_i+0x14e>
 8003dd4:	462a      	mov	r2, r5
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	4640      	mov	r0, r8
 8003dda:	6923      	ldr	r3, [r4, #16]
 8003ddc:	47d0      	blx	sl
 8003dde:	3001      	adds	r0, #1
 8003de0:	d0ad      	beq.n	8003d3e <_printf_i+0x162>
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	079b      	lsls	r3, r3, #30
 8003de6:	d413      	bmi.n	8003e10 <_printf_i+0x234>
 8003de8:	68e0      	ldr	r0, [r4, #12]
 8003dea:	9b03      	ldr	r3, [sp, #12]
 8003dec:	4298      	cmp	r0, r3
 8003dee:	bfb8      	it	lt
 8003df0:	4618      	movlt	r0, r3
 8003df2:	e7a6      	b.n	8003d42 <_printf_i+0x166>
 8003df4:	2301      	movs	r3, #1
 8003df6:	4632      	mov	r2, r6
 8003df8:	4649      	mov	r1, r9
 8003dfa:	4640      	mov	r0, r8
 8003dfc:	47d0      	blx	sl
 8003dfe:	3001      	adds	r0, #1
 8003e00:	d09d      	beq.n	8003d3e <_printf_i+0x162>
 8003e02:	3501      	adds	r5, #1
 8003e04:	68e3      	ldr	r3, [r4, #12]
 8003e06:	9903      	ldr	r1, [sp, #12]
 8003e08:	1a5b      	subs	r3, r3, r1
 8003e0a:	42ab      	cmp	r3, r5
 8003e0c:	dcf2      	bgt.n	8003df4 <_printf_i+0x218>
 8003e0e:	e7eb      	b.n	8003de8 <_printf_i+0x20c>
 8003e10:	2500      	movs	r5, #0
 8003e12:	f104 0619 	add.w	r6, r4, #25
 8003e16:	e7f5      	b.n	8003e04 <_printf_i+0x228>
 8003e18:	08003faf 	.word	0x08003faf
 8003e1c:	08003fc0 	.word	0x08003fc0

08003e20 <memmove>:
 8003e20:	4288      	cmp	r0, r1
 8003e22:	b510      	push	{r4, lr}
 8003e24:	eb01 0402 	add.w	r4, r1, r2
 8003e28:	d902      	bls.n	8003e30 <memmove+0x10>
 8003e2a:	4284      	cmp	r4, r0
 8003e2c:	4623      	mov	r3, r4
 8003e2e:	d807      	bhi.n	8003e40 <memmove+0x20>
 8003e30:	1e43      	subs	r3, r0, #1
 8003e32:	42a1      	cmp	r1, r4
 8003e34:	d008      	beq.n	8003e48 <memmove+0x28>
 8003e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e3e:	e7f8      	b.n	8003e32 <memmove+0x12>
 8003e40:	4601      	mov	r1, r0
 8003e42:	4402      	add	r2, r0
 8003e44:	428a      	cmp	r2, r1
 8003e46:	d100      	bne.n	8003e4a <memmove+0x2a>
 8003e48:	bd10      	pop	{r4, pc}
 8003e4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e52:	e7f7      	b.n	8003e44 <memmove+0x24>

08003e54 <_sbrk_r>:
 8003e54:	b538      	push	{r3, r4, r5, lr}
 8003e56:	2300      	movs	r3, #0
 8003e58:	4d05      	ldr	r5, [pc, #20]	; (8003e70 <_sbrk_r+0x1c>)
 8003e5a:	4604      	mov	r4, r0
 8003e5c:	4608      	mov	r0, r1
 8003e5e:	602b      	str	r3, [r5, #0]
 8003e60:	f7fc fd66 	bl	8000930 <_sbrk>
 8003e64:	1c43      	adds	r3, r0, #1
 8003e66:	d102      	bne.n	8003e6e <_sbrk_r+0x1a>
 8003e68:	682b      	ldr	r3, [r5, #0]
 8003e6a:	b103      	cbz	r3, 8003e6e <_sbrk_r+0x1a>
 8003e6c:	6023      	str	r3, [r4, #0]
 8003e6e:	bd38      	pop	{r3, r4, r5, pc}
 8003e70:	20000294 	.word	0x20000294

08003e74 <memchr>:
 8003e74:	4603      	mov	r3, r0
 8003e76:	b510      	push	{r4, lr}
 8003e78:	b2c9      	uxtb	r1, r1
 8003e7a:	4402      	add	r2, r0
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	d101      	bne.n	8003e86 <memchr+0x12>
 8003e82:	2000      	movs	r0, #0
 8003e84:	e003      	b.n	8003e8e <memchr+0x1a>
 8003e86:	7804      	ldrb	r4, [r0, #0]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	428c      	cmp	r4, r1
 8003e8c:	d1f6      	bne.n	8003e7c <memchr+0x8>
 8003e8e:	bd10      	pop	{r4, pc}

08003e90 <memcpy>:
 8003e90:	440a      	add	r2, r1
 8003e92:	4291      	cmp	r1, r2
 8003e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e98:	d100      	bne.n	8003e9c <memcpy+0xc>
 8003e9a:	4770      	bx	lr
 8003e9c:	b510      	push	{r4, lr}
 8003e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ea2:	4291      	cmp	r1, r2
 8003ea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ea8:	d1f9      	bne.n	8003e9e <memcpy+0xe>
 8003eaa:	bd10      	pop	{r4, pc}

08003eac <_realloc_r>:
 8003eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb0:	4680      	mov	r8, r0
 8003eb2:	4614      	mov	r4, r2
 8003eb4:	460e      	mov	r6, r1
 8003eb6:	b921      	cbnz	r1, 8003ec2 <_realloc_r+0x16>
 8003eb8:	4611      	mov	r1, r2
 8003eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ebe:	f7ff bc37 	b.w	8003730 <_malloc_r>
 8003ec2:	b92a      	cbnz	r2, 8003ed0 <_realloc_r+0x24>
 8003ec4:	f7ff fbcc 	bl	8003660 <_free_r>
 8003ec8:	4625      	mov	r5, r4
 8003eca:	4628      	mov	r0, r5
 8003ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ed0:	f000 f81b 	bl	8003f0a <_malloc_usable_size_r>
 8003ed4:	4284      	cmp	r4, r0
 8003ed6:	4607      	mov	r7, r0
 8003ed8:	d802      	bhi.n	8003ee0 <_realloc_r+0x34>
 8003eda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ede:	d812      	bhi.n	8003f06 <_realloc_r+0x5a>
 8003ee0:	4621      	mov	r1, r4
 8003ee2:	4640      	mov	r0, r8
 8003ee4:	f7ff fc24 	bl	8003730 <_malloc_r>
 8003ee8:	4605      	mov	r5, r0
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d0ed      	beq.n	8003eca <_realloc_r+0x1e>
 8003eee:	42bc      	cmp	r4, r7
 8003ef0:	4622      	mov	r2, r4
 8003ef2:	4631      	mov	r1, r6
 8003ef4:	bf28      	it	cs
 8003ef6:	463a      	movcs	r2, r7
 8003ef8:	f7ff ffca 	bl	8003e90 <memcpy>
 8003efc:	4631      	mov	r1, r6
 8003efe:	4640      	mov	r0, r8
 8003f00:	f7ff fbae 	bl	8003660 <_free_r>
 8003f04:	e7e1      	b.n	8003eca <_realloc_r+0x1e>
 8003f06:	4635      	mov	r5, r6
 8003f08:	e7df      	b.n	8003eca <_realloc_r+0x1e>

08003f0a <_malloc_usable_size_r>:
 8003f0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f0e:	1f18      	subs	r0, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bfbc      	itt	lt
 8003f14:	580b      	ldrlt	r3, [r1, r0]
 8003f16:	18c0      	addlt	r0, r0, r3
 8003f18:	4770      	bx	lr
	...

08003f1c <_init>:
 8003f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1e:	bf00      	nop
 8003f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f22:	bc08      	pop	{r3}
 8003f24:	469e      	mov	lr, r3
 8003f26:	4770      	bx	lr

08003f28 <_fini>:
 8003f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2a:	bf00      	nop
 8003f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2e:	bc08      	pop	{r3}
 8003f30:	469e      	mov	lr, r3
 8003f32:	4770      	bx	lr
